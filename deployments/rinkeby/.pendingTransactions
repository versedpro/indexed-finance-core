{
  "0x82a108c8641e18015f6c005006571a84ab462fe8ca865be05733943ac8b6851b": {
    "name": "IndexPool",
    "deployment": {
      "abi": [
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "src",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "dst",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amt",
              "type": "uint256"
            }
          ],
          "name": "Approval",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "newDenorm",
              "type": "uint256"
            }
          ],
          "name": "LOG_DENORM_UPDATED",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "desiredDenorm",
              "type": "uint256"
            }
          ],
          "name": "LOG_DESIRED_DENORM_SET",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "caller",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "tokenAmountOut",
              "type": "uint256"
            }
          ],
          "name": "LOG_EXIT",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "caller",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "tokenAmountIn",
              "type": "uint256"
            }
          ],
          "name": "LOG_JOIN",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "maxPoolTokens",
              "type": "uint256"
            }
          ],
          "name": "LOG_MAX_TOKENS_UPDATED",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "minimumBalance",
              "type": "uint256"
            }
          ],
          "name": "LOG_MINIMUM_BALANCE_UPDATED",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [],
          "name": "LOG_PUBLIC_SWAP_ENABLED",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "caller",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "tokenAmountIn",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "tokenAmountOut",
              "type": "uint256"
            }
          ],
          "name": "LOG_SWAP",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "swapFee",
              "type": "uint256"
            }
          ],
          "name": "LOG_SWAP_FEE_UPDATED",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "desiredDenorm",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "minimumBalance",
              "type": "uint256"
            }
          ],
          "name": "LOG_TOKEN_ADDED",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "token",
              "type": "address"
            }
          ],
          "name": "LOG_TOKEN_READY",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "token",
              "type": "address"
            }
          ],
          "name": "LOG_TOKEN_REMOVED",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "src",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "dst",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amt",
              "type": "uint256"
            }
          ],
          "name": "Transfer",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "VERSION_NUMBER",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "src",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dst",
              "type": "address"
            }
          ],
          "name": "allowance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "dst",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amt",
              "type": "uint256"
            }
          ],
          "name": "approve",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "whom",
              "type": "address"
            }
          ],
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "controller",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            }
          ],
          "name": "configure",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "decimals",
          "outputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "dst",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amt",
              "type": "uint256"
            }
          ],
          "name": "decreaseApproval",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "delegatee",
              "type": "address"
            }
          ],
          "name": "delegateCompLikeToken",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "poolAmountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "minAmountsOut",
              "type": "uint256[]"
            }
          ],
          "name": "exitPool",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPoolAmountIn",
              "type": "uint256"
            }
          ],
          "name": "exitswapExternAmountOut",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "poolAmountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minAmountOut",
              "type": "uint256"
            }
          ],
          "name": "exitswapPoolAmountIn",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "extrapolatePoolValueFromToken",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "name": "flashBorrow",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            }
          ],
          "name": "getBalance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getController",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getCurrentDesiredTokens",
          "outputs": [
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getCurrentTokens",
          "outputs": [
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            }
          ],
          "name": "getDenormalizedWeight",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getMaxPoolTokens",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            }
          ],
          "name": "getMinimumBalance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getNumTokens",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            }
          ],
          "name": "getSpotPrice",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getSwapFee",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            }
          ],
          "name": "getTokenRecord",
          "outputs": [
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "bound",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "ready",
                  "type": "bool"
                },
                {
                  "internalType": "uint40",
                  "name": "lastDenormUpdate",
                  "type": "uint40"
                },
                {
                  "internalType": "uint96",
                  "name": "denorm",
                  "type": "uint96"
                },
                {
                  "internalType": "uint96",
                  "name": "desiredDenorm",
                  "type": "uint96"
                },
                {
                  "internalType": "uint8",
                  "name": "index",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IIndexPool.Record",
              "name": "record",
              "type": "tuple"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getTotalDenormalizedWeight",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            }
          ],
          "name": "getUsedBalance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            }
          ],
          "name": "gulp",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "dst",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amt",
              "type": "uint256"
            }
          ],
          "name": "increaseApproval",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "balances",
              "type": "uint256[]"
            },
            {
              "internalType": "uint96[]",
              "name": "denorms",
              "type": "uint96[]"
            },
            {
              "internalType": "address",
              "name": "tokenProvider",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "unbindHandler",
              "type": "address"
            }
          ],
          "name": "initialize",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "t",
              "type": "address"
            }
          ],
          "name": "isBound",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "isPublicSwap",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "poolAmountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "maxAmountsIn",
              "type": "uint256[]"
            }
          ],
          "name": "joinPool",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPoolAmountOut",
              "type": "uint256"
            }
          ],
          "name": "joinswapExternAmountIn",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "poolAmountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxAmountIn",
              "type": "uint256"
            }
          ],
          "name": "joinswapPoolAmountOut",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint96[]",
              "name": "desiredDenorms",
              "type": "uint96[]"
            },
            {
              "internalType": "uint256[]",
              "name": "minimumBalances",
              "type": "uint256[]"
            }
          ],
          "name": "reindexTokens",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint96[]",
              "name": "desiredDenorms",
              "type": "uint96[]"
            }
          ],
          "name": "reweighTokens",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "maxPoolTokens",
              "type": "uint256"
            }
          ],
          "name": "setMaxPoolTokens",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minimumBalance",
              "type": "uint256"
            }
          ],
          "name": "setMinimumBalance",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "swapFee",
              "type": "uint256"
            }
          ],
          "name": "setSwapFee",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmountIn",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minAmountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPrice",
              "type": "uint256"
            }
          ],
          "name": "swapExactAmountIn",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maxAmountIn",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPrice",
              "type": "uint256"
            }
          ],
          "name": "swapExactAmountOut",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "dst",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amt",
              "type": "uint256"
            }
          ],
          "name": "transfer",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "src",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dst",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amt",
              "type": "uint256"
            }
          ],
          "name": "transferFrom",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ],
      "args": [],
      "solcInputHash": "0x9fe672adfd61ad4556db8657afa0dfab9c01f2e512370dde3c09d54d895040e2",
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"temp-contracts/balancer/BConst.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\n\\r\\n/************************************************************************************************\\r\\nOriginally from https://github.com/balancer-labs/balancer-core/blob/master/contracts/BConst.sol\\r\\n\\r\\nThis source code has been modified from the original, which was copied from the github repository\\r\\nat commit hash f4ed5d65362a8d6cec21662fb6eae233b0babc1f.\\r\\n\\r\\nSubject to the GPL-3.0 license\\r\\n*************************************************************************************************/\\r\\n\\r\\n\\r\\ncontract BConst {\\r\\n  uint256 public constant VERSION_NUMBER = 1;\\r\\n\\r\\n/* ---  Weight Updates  --- */\\r\\n\\r\\n  // Minimum time passed between each weight update for a token.\\r\\n  uint256 internal constant WEIGHT_UPDATE_DELAY = 1 hours;\\r\\n\\r\\n  // Maximum percent by which a weight can adjust at a time\\r\\n  // relative to the current weight.\\r\\n  // The number of iterations needed to move from weight A to weight B is the floor of:\\r\\n  // (A > B): (ln(A) - ln(B)) / ln(1.01)\\r\\n  // (B > A): (ln(A) - ln(B)) / ln(0.99)\\r\\n  uint256 internal constant WEIGHT_CHANGE_PCT = BONE/100;\\r\\n\\r\\n  uint256 internal constant BONE = 10**18;\\r\\n\\r\\n  uint256 internal constant MIN_BOUND_TOKENS = 2;\\r\\n  uint256 internal constant MAX_BOUND_TOKENS = 10;\\r\\n\\r\\n  // Minimum swap fee.\\r\\n  uint256 internal constant MIN_FEE = BONE / 10**6;\\r\\n  // Maximum swap or exit fee.\\r\\n  uint256 internal constant MAX_FEE = BONE / 10;\\r\\n  // Actual exit fee.\\r\\n  uint256 internal constant EXIT_FEE = 0;\\r\\n\\r\\n  // Default total of all desired weights. Can differ by up to BONE.\\r\\n  uint256 internal constant DEFAULT_TOTAL_WEIGHT = BONE * 25;\\r\\n  // Minimum weight for any token (1/100).\\r\\n  uint256 internal constant MIN_WEIGHT = BONE / 4;\\r\\n  uint256 internal constant MAX_WEIGHT = BONE * 25;\\r\\n  // Maximum total weight.\\r\\n  uint256 internal constant MAX_TOTAL_WEIGHT = BONE * 26;\\r\\n  // Minimum balance for a token (only applied at initialization)\\r\\n  uint256 internal constant MIN_BALANCE = BONE / 10**12;\\r\\n  // Initial pool tokens\\r\\n  uint256 internal constant INIT_POOL_SUPPLY = BONE * 100;\\r\\n\\r\\n  uint256 internal constant MIN_BPOW_BASE = 1 wei;\\r\\n  uint256 internal constant MAX_BPOW_BASE = (2 * BONE) - 1 wei;\\r\\n  uint256 internal constant BPOW_PRECISION = BONE / 10**10;\\r\\n\\r\\n  // Maximum ratio of input tokens to balance for swaps.\\r\\n  uint256 internal constant MAX_IN_RATIO = BONE / 2;\\r\\n  // Maximum ratio of output tokens to balance for swaps.\\r\\n  uint256 internal constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\r\\n}\\r\\n\"\n    },\n    \"temp-contracts/balancer/BMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport \\\"./BNum.sol\\\";\\r\\n\\r\\n\\r\\n/************************************************************************************************\\r\\nOriginally from https://github.com/balancer-labs/balancer-core/blob/master/contracts/BMath.sol\\r\\n\\r\\nThis source code has been modified from the original, which was copied from the github repository\\r\\nat commit hash f4ed5d65362a8d6cec21662fb6eae233b0babc1f.\\r\\n\\r\\nSubject to the GPL-3.0 license\\r\\n*************************************************************************************************/\\r\\n\\r\\n\\r\\ncontract BMath is BConst, BNum {\\r\\n  /**********************************************************************************************\\r\\n    // calcSpotPrice                                                                             //\\r\\n    // sP = spotPrice                                                                            //\\r\\n    // bI = tokenBalanceIn                ( bI / wI )         1                                  //\\r\\n    // bO = tokenBalanceOut         sP =  -----------  *  ----------                             //\\r\\n    // wI = tokenWeightIn                 ( bO / wO )     ( 1 - sF )                             //\\r\\n    // wO = tokenWeightOut                                                                       //\\r\\n    // sF = swapFee                                                                              //\\r\\n    **********************************************************************************************/\\r\\n  function calcSpotPrice(\\r\\n    uint256 tokenBalanceIn,\\r\\n    uint256 tokenWeightIn,\\r\\n    uint256 tokenBalanceOut,\\r\\n    uint256 tokenWeightOut,\\r\\n    uint256 swapFee\\r\\n  ) internal pure returns (uint256 spotPrice) {\\r\\n    uint256 numer = bdiv(tokenBalanceIn, tokenWeightIn);\\r\\n    uint256 denom = bdiv(tokenBalanceOut, tokenWeightOut);\\r\\n    uint256 ratio = bdiv(numer, denom);\\r\\n    uint256 scale = bdiv(BONE, bsub(BONE, swapFee));\\r\\n    return (spotPrice = bmul(ratio, scale));\\r\\n  }\\r\\n\\r\\n  /**********************************************************************************************\\r\\n    // calcOutGivenIn                                                                            //\\r\\n    // aO = tokenAmountOut                                                                       //\\r\\n    // bO = tokenBalanceOut                                                                      //\\r\\n    // bI = tokenBalanceIn              /      /            bI             \\\\    (wI / wO) \\\\      //\\r\\n    // aI = tokenAmountIn    aO = bO * |  1 - | --------------------------  | ^            |     //\\r\\n    // wI = tokenWeightIn               \\\\      \\\\ ( bI + ( aI * ( 1 - sF )) /              /      //\\r\\n    // wO = tokenWeightOut                                                                       //\\r\\n    // sF = swapFee                                                                              //\\r\\n    **********************************************************************************************/\\r\\n  function calcOutGivenIn(\\r\\n    uint256 tokenBalanceIn,\\r\\n    uint256 tokenWeightIn,\\r\\n    uint256 tokenBalanceOut,\\r\\n    uint256 tokenWeightOut,\\r\\n    uint256 tokenAmountIn,\\r\\n    uint256 swapFee\\r\\n  ) internal pure returns (uint256 tokenAmountOut) {\\r\\n    uint256 weightRatio = bdiv(tokenWeightIn, tokenWeightOut);\\r\\n    uint256 adjustedIn = bsub(BONE, swapFee);\\r\\n    adjustedIn = bmul(tokenAmountIn, adjustedIn);\\r\\n    uint256 y = bdiv(tokenBalanceIn, badd(tokenBalanceIn, adjustedIn));\\r\\n    uint256 foo = bpow(y, weightRatio);\\r\\n    uint256 bar = bsub(BONE, foo);\\r\\n    tokenAmountOut = bmul(tokenBalanceOut, bar);\\r\\n    return tokenAmountOut;\\r\\n  }\\r\\n\\r\\n  /**********************************************************************************************\\r\\n    // calcInGivenOut                                                                            //\\r\\n    // aI = tokenAmountIn                                                                        //\\r\\n    // bO = tokenBalanceOut               /  /     bO      \\\\    (wO / wI)      \\\\                 //\\r\\n    // bI = tokenBalanceIn          bI * |  | ------------  | ^            - 1  |                //\\r\\n    // aO = tokenAmountOut    aI =        \\\\  \\\\ ( bO - aO ) /                   /                 //\\r\\n    // wI = tokenWeightIn           --------------------------------------------                 //\\r\\n    // wO = tokenWeightOut                          ( 1 - sF )                                   //\\r\\n    // sF = swapFee                                                                              //\\r\\n    **********************************************************************************************/\\r\\n  function calcInGivenOut(\\r\\n    uint256 tokenBalanceIn,\\r\\n    uint256 tokenWeightIn,\\r\\n    uint256 tokenBalanceOut,\\r\\n    uint256 tokenWeightOut,\\r\\n    uint256 tokenAmountOut,\\r\\n    uint256 swapFee\\r\\n  ) internal pure returns (uint256 tokenAmountIn) {\\r\\n    uint256 weightRatio = bdiv(tokenWeightOut, tokenWeightIn);\\r\\n    uint256 diff = bsub(tokenBalanceOut, tokenAmountOut);\\r\\n    uint256 y = bdiv(tokenBalanceOut, diff);\\r\\n    uint256 foo = bpow(y, weightRatio);\\r\\n    foo = bsub(foo, BONE);\\r\\n    tokenAmountIn = bsub(BONE, swapFee);\\r\\n    tokenAmountIn = bdiv(bmul(tokenBalanceIn, foo), tokenAmountIn);\\r\\n    return tokenAmountIn;\\r\\n  }\\r\\n\\r\\n  /**********************************************************************************************\\r\\n    // calcPoolOutGivenSingleIn                                                                  //\\r\\n    // pAo = poolAmountOut         /                                              \\\\              //\\r\\n    // tAi = tokenAmountIn        ///      /     //    wI \\\\      \\\\\\\\       \\\\     wI \\\\             //\\r\\n    // wI = tokenWeightIn        //| tAi *| 1 - || 1 - --  | * sF || + tBi \\\\    --  \\\\            //\\r\\n    // tW = totalWeight     pAo=||  \\\\      \\\\     \\\\\\\\    tW /      //         | ^ tW   | * pS - pS //\\r\\n    // tBi = tokenBalanceIn      \\\\\\\\  ------------------------------------- /        /            //\\r\\n    // pS = poolSupply            \\\\\\\\                    tBi               /        /             //\\r\\n    // sF = swapFee                \\\\                                              /              //\\r\\n    **********************************************************************************************/\\r\\n  function calcPoolOutGivenSingleIn(\\r\\n    uint256 tokenBalanceIn,\\r\\n    uint256 tokenWeightIn,\\r\\n    uint256 poolSupply,\\r\\n    uint256 totalWeight,\\r\\n    uint256 tokenAmountIn,\\r\\n    uint256 swapFee\\r\\n  ) internal pure returns (uint256 poolAmountOut) {\\r\\n    // Charge the trading fee for the proportion of tokenAi\\r\\n    ///  which is implicitly traded to the other pool tokens.\\r\\n    // That proportion is (1- weightTokenIn)\\r\\n    // tokenAiAfterFee = tAi * (1 - (1-weightTi) * poolFee);\\r\\n    uint256 normalizedWeight = bdiv(tokenWeightIn, totalWeight);\\r\\n    uint256 zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\\r\\n    uint256 tokenAmountInAfterFee = bmul(tokenAmountIn, bsub(BONE, zaz));\\r\\n\\r\\n    uint256 newTokenBalanceIn = badd(tokenBalanceIn, tokenAmountInAfterFee);\\r\\n    uint256 tokenInRatio = bdiv(newTokenBalanceIn, tokenBalanceIn);\\r\\n\\r\\n    // uint newPoolSupply = (ratioTi ^ weightTi) * poolSupply;\\r\\n    uint256 poolRatio = bpow(tokenInRatio, normalizedWeight);\\r\\n    uint256 newPoolSupply = bmul(poolRatio, poolSupply);\\r\\n    poolAmountOut = bsub(newPoolSupply, poolSupply);\\r\\n    return poolAmountOut;\\r\\n  }\\r\\n\\r\\n  /**********************************************************************************************\\r\\n    // calcSingleInGivenPoolOut                                                                  //\\r\\n    // tAi = tokenAmountIn              //(pS + pAo)\\\\     /    1    \\\\\\\\                           //\\r\\n    // pS = poolSupply                 || ---------  | ^ | --------- || * bI - bI                //\\r\\n    // pAo = poolAmountOut              \\\\\\\\    pS    /     \\\\(wI / tW)//                           //\\r\\n    // bI = balanceIn          tAi =  --------------------------------------------               //\\r\\n    // wI = weightIn                              /      wI  \\\\                                   //\\r\\n    // tW = totalWeight                          |  1 - ----  |  * sF                            //\\r\\n    // sF = swapFee                               \\\\      tW  /                                   //\\r\\n    **********************************************************************************************/\\r\\n  function calcSingleInGivenPoolOut(\\r\\n    uint256 tokenBalanceIn,\\r\\n    uint256 tokenWeightIn,\\r\\n    uint256 poolSupply,\\r\\n    uint256 totalWeight,\\r\\n    uint256 poolAmountOut,\\r\\n    uint256 swapFee\\r\\n  ) internal pure returns (uint256 tokenAmountIn) {\\r\\n    uint256 normalizedWeight = bdiv(tokenWeightIn, totalWeight);\\r\\n    uint256 newPoolSupply = badd(poolSupply, poolAmountOut);\\r\\n    uint256 poolRatio = bdiv(newPoolSupply, poolSupply);\\r\\n\\r\\n    //uint newBalTi = poolRatio^(1/weightTi) * balTi;\\r\\n    uint256 boo = bdiv(BONE, normalizedWeight);\\r\\n    uint256 tokenInRatio = bpow(poolRatio, boo);\\r\\n    uint256 newTokenBalanceIn = bmul(tokenInRatio, tokenBalanceIn);\\r\\n    uint256 tokenAmountInAfterFee = bsub(newTokenBalanceIn, tokenBalanceIn);\\r\\n    // Do reverse order of fees charged in joinswap_ExternAmountIn, this way\\r\\n    //     ``` pAo == joinswap_ExternAmountIn(Ti, joinswap_PoolAmountOut(pAo, Ti)) ```\\r\\n    //uint tAi = tAiAfterFee / (1 - (1-weightTi) * swapFee) ;\\r\\n    uint256 zar = bmul(bsub(BONE, normalizedWeight), swapFee);\\r\\n    tokenAmountIn = bdiv(tokenAmountInAfterFee, bsub(BONE, zar));\\r\\n    return tokenAmountIn;\\r\\n  }\\r\\n\\r\\n  /**********************************************************************************************\\r\\n    // calcSingleOutGivenPoolIn                                                                  //\\r\\n    // tAo = tokenAmountOut            /      /                                             \\\\\\\\   //\\r\\n    // bO = tokenBalanceOut           /      // pS - (pAi * (1 - eF)) \\\\     /    1    \\\\      \\\\\\\\  //\\r\\n    // pAi = poolAmountIn            | bO - || ----------------------- | ^ | --------- | * b0 || //\\r\\n    // ps = poolSupply                \\\\      \\\\\\\\          pS           /     \\\\(wO / tW)/      //  //\\r\\n    // wI = tokenWeightIn      tAo =   \\\\      \\\\                                             //   //\\r\\n    // tW = totalWeight                    /     /      wO \\\\       \\\\                             //\\r\\n    // sF = swapFee                    *  | 1 - |  1 - ---- | * sF  |                            //\\r\\n    // eF = exitFee                        \\\\     \\\\      tW /       /                             //\\r\\n    **********************************************************************************************/\\r\\n  function calcSingleOutGivenPoolIn(\\r\\n    uint256 tokenBalanceOut,\\r\\n    uint256 tokenWeightOut,\\r\\n    uint256 poolSupply,\\r\\n    uint256 totalWeight,\\r\\n    uint256 poolAmountIn,\\r\\n    uint256 swapFee\\r\\n  ) internal pure returns (uint256 tokenAmountOut) {\\r\\n    uint256 normalizedWeight = bdiv(tokenWeightOut, totalWeight);\\r\\n    // charge exit fee on the pool token side\\r\\n    // pAiAfterExitFee = pAi*(1-exitFee)\\r\\n    uint256 poolAmountInAfterExitFee = bmul(poolAmountIn, bsub(BONE, EXIT_FEE));\\r\\n    uint256 newPoolSupply = bsub(poolSupply, poolAmountInAfterExitFee);\\r\\n    uint256 poolRatio = bdiv(newPoolSupply, poolSupply);\\r\\n\\r\\n    // newBalTo = poolRatio^(1/weightTo) * balTo;\\r\\n    uint256 tokenOutRatio = bpow(poolRatio, bdiv(BONE, normalizedWeight));\\r\\n    uint256 newTokenBalanceOut = bmul(tokenOutRatio, tokenBalanceOut);\\r\\n\\r\\n    uint256 tokenAmountOutBeforeSwapFee = bsub(\\r\\n      tokenBalanceOut,\\r\\n      newTokenBalanceOut\\r\\n    );\\r\\n\\r\\n    // charge swap fee on the output token side\\r\\n    //uint tAo = tAoBeforeSwapFee * (1 - (1-weightTo) * swapFee)\\r\\n    uint256 zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\\r\\n    tokenAmountOut = bmul(tokenAmountOutBeforeSwapFee, bsub(BONE, zaz));\\r\\n    return tokenAmountOut;\\r\\n  }\\r\\n\\r\\n  /**********************************************************************************************\\r\\n    // calcPoolInGivenSingleOut                                                                  //\\r\\n    // pAi = poolAmountIn               // /               tAo             \\\\\\\\     / wO \\\\     \\\\   //\\r\\n    // bO = tokenBalanceOut            // | bO - -------------------------- |\\\\   | ---- |     \\\\  //\\r\\n    // tAo = tokenAmountOut      pS - ||   \\\\     1 - ((1 - (tO / tW)) * sF)/  | ^ \\\\ tW /  * pS | //\\r\\n    // ps = poolSupply                 \\\\\\\\ -----------------------------------/                /  //\\r\\n    // wO = tokenWeightOut  pAi =       \\\\\\\\               bO                 /                /   //\\r\\n    // tW = totalWeight           -------------------------------------------------------------  //\\r\\n    // sF = swapFee                                        ( 1 - eF )                            //\\r\\n    // eF = exitFee                                                                              //\\r\\n    **********************************************************************************************/\\r\\n  function calcPoolInGivenSingleOut(\\r\\n    uint256 tokenBalanceOut,\\r\\n    uint256 tokenWeightOut,\\r\\n    uint256 poolSupply,\\r\\n    uint256 totalWeight,\\r\\n    uint256 tokenAmountOut,\\r\\n    uint256 swapFee\\r\\n  ) internal pure returns (uint256 poolAmountIn) {\\r\\n    // charge swap fee on the output token side\\r\\n    uint256 normalizedWeight = bdiv(tokenWeightOut, totalWeight);\\r\\n    //uint tAoBeforeSwapFee = tAo / (1 - (1-weightTo) * swapFee) ;\\r\\n    uint256 zoo = bsub(BONE, normalizedWeight);\\r\\n    uint256 zar = bmul(zoo, swapFee);\\r\\n    uint256 tokenAmountOutBeforeSwapFee = bdiv(tokenAmountOut, bsub(BONE, zar));\\r\\n\\r\\n    uint256 newTokenBalanceOut = bsub(\\r\\n      tokenBalanceOut,\\r\\n      tokenAmountOutBeforeSwapFee\\r\\n    );\\r\\n    uint256 tokenOutRatio = bdiv(newTokenBalanceOut, tokenBalanceOut);\\r\\n\\r\\n    //uint newPoolSupply = (ratioTo ^ weightTo) * poolSupply;\\r\\n    uint256 poolRatio = bpow(tokenOutRatio, normalizedWeight);\\r\\n    uint256 newPoolSupply = bmul(poolRatio, poolSupply);\\r\\n    uint256 poolAmountInAfterExitFee = bsub(poolSupply, newPoolSupply);\\r\\n\\r\\n    // charge exit fee on the pool token side\\r\\n    // pAi = pAiAfterExitFee/(1-exitFee)\\r\\n    poolAmountIn = bdiv(poolAmountInAfterExitFee, bsub(BONE, EXIT_FEE));\\r\\n    return poolAmountIn;\\r\\n  }\\r\\n}\\r\\n\"\n    },\n    \"temp-contracts/balancer/BNum.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport \\\"./BConst.sol\\\";\\r\\n\\r\\n\\r\\n/************************************************************************************************\\r\\nOriginally from https://github.com/balancer-labs/balancer-core/blob/master/contracts/BNum.sol\\r\\n\\r\\nThis source code has been modified from the original, which was copied from the github repository\\r\\nat commit hash f4ed5d65362a8d6cec21662fb6eae233b0babc1f.\\r\\n\\r\\nSubject to the GPL-3.0 license\\r\\n*************************************************************************************************/\\r\\n\\r\\n\\r\\ncontract BNum is BConst {\\r\\n  function btoi(uint256 a) internal pure returns (uint256) {\\r\\n    return a / BONE;\\r\\n  }\\r\\n\\r\\n  function bfloor(uint256 a) internal pure returns (uint256) {\\r\\n    return btoi(a) * BONE;\\r\\n  }\\r\\n\\r\\n  function badd(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    uint256 c = a + b;\\r\\n    require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  function bsub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    (uint256 c, bool flag) = bsubSign(a, b);\\r\\n    require(!flag, \\\"ERR_SUB_UNDERFLOW\\\");\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  function bsubSign(uint256 a, uint256 b)\\r\\n    internal\\r\\n    pure\\r\\n    returns (uint256, bool)\\r\\n  {\\r\\n    if (a >= b) {\\r\\n      return (a - b, false);\\r\\n    } else {\\r\\n      return (b - a, true);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function bmul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    uint256 c0 = a * b;\\r\\n    require(a == 0 || c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\r\\n    uint256 c1 = c0 + (BONE / 2);\\r\\n    require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\r\\n    uint256 c2 = c1 / BONE;\\r\\n    return c2;\\r\\n  }\\r\\n\\r\\n  function bdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    require(b != 0, \\\"ERR_DIV_ZERO\\\");\\r\\n    uint256 c0 = a * BONE;\\r\\n    require(a == 0 || c0 / a == BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\r\\n    uint256 c1 = c0 + (b / 2);\\r\\n    require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\r\\n    uint256 c2 = c1 / b;\\r\\n    return c2;\\r\\n  }\\r\\n\\r\\n  // DSMath.wpow\\r\\n  function bpowi(uint256 a, uint256 n) internal pure returns (uint256) {\\r\\n    uint256 z = n % 2 != 0 ? a : BONE;\\r\\n\\r\\n    for (n /= 2; n != 0; n /= 2) {\\r\\n      a = bmul(a, a);\\r\\n\\r\\n      if (n % 2 != 0) {\\r\\n        z = bmul(z, a);\\r\\n      }\\r\\n    }\\r\\n    return z;\\r\\n  }\\r\\n\\r\\n  // Compute b^(e.w) by splitting it into (b^e)*(b^0.w).\\r\\n  // Use `bpowi` for `b^e` and `bpowK` for k iterations\\r\\n  // of approximation of b^0.w\\r\\n  function bpow(uint256 base, uint256 exp) internal pure returns (uint256) {\\r\\n    require(base >= MIN_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_LOW\\\");\\r\\n    require(base <= MAX_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_HIGH\\\");\\r\\n\\r\\n    uint256 whole = bfloor(exp);\\r\\n    uint256 remain = bsub(exp, whole);\\r\\n\\r\\n    uint256 wholePow = bpowi(base, btoi(whole));\\r\\n\\r\\n    if (remain == 0) {\\r\\n      return wholePow;\\r\\n    }\\r\\n\\r\\n    uint256 partialResult = bpowApprox(base, remain, BPOW_PRECISION);\\r\\n    return bmul(wholePow, partialResult);\\r\\n  }\\r\\n\\r\\n  function bpowApprox(\\r\\n    uint256 base,\\r\\n    uint256 exp,\\r\\n    uint256 precision\\r\\n  ) internal pure returns (uint256) {\\r\\n    // term 0:\\r\\n    uint256 a = exp;\\r\\n    (uint256 x, bool xneg) = bsubSign(base, BONE);\\r\\n    uint256 term = BONE;\\r\\n    uint256 sum = term;\\r\\n    bool negative = false;\\r\\n\\r\\n    // term(k) = numer / denom\\r\\n    //         = (product(a - i - 1, i=1-->k) * x^k) / (k!)\\r\\n    // each iteration, multiply previous term by (a-(k-1)) * x / k\\r\\n    // continue until term is less than precision\\r\\n    for (uint256 i = 1; term >= precision; i++) {\\r\\n      uint256 bigK = i * BONE;\\r\\n      (uint256 c, bool cneg) = bsubSign(a, bsub(bigK, BONE));\\r\\n      term = bmul(term, bmul(c, x));\\r\\n      term = bdiv(term, bigK);\\r\\n      if (term == 0) break;\\r\\n\\r\\n      if (xneg) negative = !negative;\\r\\n      if (cneg) negative = !negative;\\r\\n      if (negative) {\\r\\n        sum = bsub(sum, term);\\r\\n      } else {\\r\\n        sum = badd(sum, term);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return sum;\\r\\n  }\\r\\n}\\r\\n\"\n    },\n    \"temp-contracts/balancer/BToken.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport \\\"./BNum.sol\\\";\\r\\n\\r\\n\\r\\n/************************************************************************************************\\r\\nOriginally from https://github.com/balancer-labs/balancer-core/blob/master/contracts/BToken.sol\\r\\n\\r\\nThis source code has been modified from the original, which was copied from the github repository\\r\\nat commit hash f4ed5d65362a8d6cec21662fb6eae233b0babc1f.\\r\\n\\r\\nSubject to the GPL-3.0 license\\r\\n*************************************************************************************************/\\r\\n\\r\\n\\r\\n// Highly opinionated token implementation\\r\\ninterface IERC20 {\\r\\n  event Approval(address indexed src, address indexed dst, uint256 amt);\\r\\n  event Transfer(address indexed src, address indexed dst, uint256 amt);\\r\\n\\r\\n  function name() external view returns (string memory);\\r\\n\\r\\n  function symbol() external view returns (string memory);\\r\\n\\r\\n  function decimals() external view returns (uint8);\\r\\n\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  function balanceOf(address whom) external view returns (uint256);\\r\\n\\r\\n  function allowance(address src, address dst) external view returns (uint256);\\r\\n\\r\\n  function approve(address dst, uint256 amt) external returns (bool);\\r\\n\\r\\n  function transfer(address dst, uint256 amt) external returns (bool);\\r\\n\\r\\n  function transferFrom(\\r\\n    address src,\\r\\n    address dst,\\r\\n    uint256 amt\\r\\n  ) external returns (bool);\\r\\n}\\r\\n\\r\\n\\r\\ncontract BTokenBase is BNum {\\r\\n  mapping(address => uint256) internal _balance;\\r\\n  mapping(address => mapping(address => uint256)) internal _allowance;\\r\\n  uint256 internal _totalSupply;\\r\\n\\r\\n  event Approval(address indexed src, address indexed dst, uint256 amt);\\r\\n  event Transfer(address indexed src, address indexed dst, uint256 amt);\\r\\n\\r\\n  function _mint(uint256 amt) internal {\\r\\n    _balance[address(this)] = badd(_balance[address(this)], amt);\\r\\n    _totalSupply = badd(_totalSupply, amt);\\r\\n    emit Transfer(address(0), address(this), amt);\\r\\n  }\\r\\n\\r\\n  function _burn(uint256 amt) internal {\\r\\n    require(_balance[address(this)] >= amt, \\\"ERR_INSUFFICIENT_BAL\\\");\\r\\n    _balance[address(this)] = bsub(_balance[address(this)], amt);\\r\\n    _totalSupply = bsub(_totalSupply, amt);\\r\\n    emit Transfer(address(this), address(0), amt);\\r\\n  }\\r\\n\\r\\n  function _move(\\r\\n    address src,\\r\\n    address dst,\\r\\n    uint256 amt\\r\\n  ) internal {\\r\\n    require(_balance[src] >= amt, \\\"ERR_INSUFFICIENT_BAL\\\");\\r\\n    _balance[src] = bsub(_balance[src], amt);\\r\\n    _balance[dst] = badd(_balance[dst], amt);\\r\\n    emit Transfer(src, dst, amt);\\r\\n  }\\r\\n\\r\\n  function _push(address to, uint256 amt) internal {\\r\\n    _move(address(this), to, amt);\\r\\n  }\\r\\n\\r\\n  function _pull(address from, uint256 amt) internal {\\r\\n    _move(from, address(this), amt);\\r\\n  }\\r\\n}\\r\\n\\r\\n\\r\\ncontract BToken is BTokenBase, IERC20 {\\r\\n  uint8 private constant DECIMALS = 18;\\r\\n  string private _name;\\r\\n  string private _symbol;\\r\\n\\r\\n  function _initializeToken(string memory name, string memory symbol) internal {\\r\\n    require(\\r\\n      bytes(_name).length == 0 &&\\r\\n      bytes(name).length != 0 &&\\r\\n      bytes(symbol).length != 0,\\r\\n      \\\"ERR_BTOKEN_INITIALIZED\\\"\\r\\n    );\\r\\n    _name = name;\\r\\n    _symbol = symbol;\\r\\n  }\\r\\n\\r\\n  function name()\\r\\n    external\\r\\n    override\\r\\n    view\\r\\n    returns (string memory)\\r\\n  {\\r\\n    return _name;\\r\\n  }\\r\\n\\r\\n  function symbol()\\r\\n    external\\r\\n    override\\r\\n    view\\r\\n    returns (string memory)\\r\\n  {\\r\\n    return _symbol;\\r\\n  }\\r\\n\\r\\n  function decimals()\\r\\n    external\\r\\n    override\\r\\n    view\\r\\n    returns (uint8)\\r\\n  {\\r\\n    return DECIMALS;\\r\\n  }\\r\\n\\r\\n  function allowance(address src, address dst)\\r\\n    external\\r\\n    override\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return _allowance[src][dst];\\r\\n  }\\r\\n\\r\\n  function balanceOf(address whom) external override view returns (uint256) {\\r\\n    return _balance[whom];\\r\\n  }\\r\\n\\r\\n  function totalSupply() public override view returns (uint256) {\\r\\n    return _totalSupply;\\r\\n  }\\r\\n\\r\\n  function approve(address dst, uint256 amt) external override returns (bool) {\\r\\n    _allowance[msg.sender][dst] = amt;\\r\\n    emit Approval(msg.sender, dst, amt);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function increaseApproval(address dst, uint256 amt) external returns (bool) {\\r\\n    _allowance[msg.sender][dst] = badd(_allowance[msg.sender][dst], amt);\\r\\n    emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function decreaseApproval(address dst, uint256 amt) external returns (bool) {\\r\\n    uint256 oldValue = _allowance[msg.sender][dst];\\r\\n    if (amt > oldValue) {\\r\\n      _allowance[msg.sender][dst] = 0;\\r\\n    } else {\\r\\n      _allowance[msg.sender][dst] = bsub(oldValue, amt);\\r\\n    }\\r\\n    emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function transfer(address dst, uint256 amt) external override returns (bool) {\\r\\n    _move(msg.sender, dst, amt);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function transferFrom(\\r\\n    address src,\\r\\n    address dst,\\r\\n    uint256 amt\\r\\n  ) external override returns (bool) {\\r\\n    require(\\r\\n      msg.sender == src || amt <= _allowance[src][msg.sender],\\r\\n      \\\"ERR_BTOKEN_BAD_CALLER\\\"\\r\\n    );\\r\\n    _move(src, dst, amt);\\r\\n    if (msg.sender != src && _allowance[src][msg.sender] != uint256(-1)) {\\r\\n      _allowance[src][msg.sender] = bsub(_allowance[src][msg.sender], amt);\\r\\n      emit Approval(msg.sender, dst, _allowance[src][msg.sender]);\\r\\n    }\\r\\n    return true;\\r\\n  }\\r\\n}\\r\\n\"\n    },\n    \"temp-contracts/balancer/IndexPool.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.6.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/* ========== Internal Inheritance ========== */\\r\\nimport \\\"./BToken.sol\\\";\\r\\nimport \\\"./BMath.sol\\\";\\r\\n\\r\\n/* ========== Internal Interfaces ========== */\\r\\nimport \\\"../interfaces/IFlashLoanRecipient.sol\\\";\\r\\nimport \\\"../interfaces/IIndexPool.sol\\\";\\r\\nimport \\\"../interfaces/ICompLikeToken.sol\\\";\\r\\n\\r\\n\\r\\n/************************************************************************************************\\r\\nOriginally from https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol\\r\\n\\r\\nThis source code has been modified from the original, which was copied from the github repository\\r\\nat commit hash f4ed5d65362a8d6cec21662fb6eae233b0babc1f.\\r\\n\\r\\nSubject to the GPL-3.0 license\\r\\n*************************************************************************************************/\\r\\n\\r\\n\\r\\ncontract IndexPool is BToken, BMath, IIndexPool {\\r\\n\\r\\n/* ==========  EVENTS  ========== */\\r\\n\\r\\n  /** @dev Emitted when tokens are swapped. */\\r\\n  event LOG_SWAP(\\r\\n    address indexed caller,\\r\\n    address indexed tokenIn,\\r\\n    address indexed tokenOut,\\r\\n    uint256 tokenAmountIn,\\r\\n    uint256 tokenAmountOut\\r\\n  );\\r\\n\\r\\n  /** @dev Emitted when underlying tokens are deposited for pool tokens. */\\r\\n  event LOG_JOIN(\\r\\n    address indexed caller,\\r\\n    address indexed tokenIn,\\r\\n    uint256 tokenAmountIn\\r\\n  );\\r\\n\\r\\n  /** @dev Emitted when pool tokens are burned for underlying. */\\r\\n  event LOG_EXIT(\\r\\n    address indexed caller,\\r\\n    address indexed tokenOut,\\r\\n    uint256 tokenAmountOut\\r\\n  );\\r\\n\\r\\n  /** @dev Emitted when a token's weight updates. */\\r\\n  event LOG_DENORM_UPDATED(address indexed token, uint256 newDenorm);\\r\\n\\r\\n  /** @dev Emitted when a token's desired weight is set. */\\r\\n  event LOG_DESIRED_DENORM_SET(address indexed token, uint256 desiredDenorm);\\r\\n\\r\\n  /** @dev Emitted when a token is unbound from the pool. */\\r\\n  event LOG_TOKEN_REMOVED(address token);\\r\\n\\r\\n  /** @dev Emitted when a token is unbound from the pool. */\\r\\n  event LOG_TOKEN_ADDED(\\r\\n    address indexed token,\\r\\n    uint256 desiredDenorm,\\r\\n    uint256 minimumBalance\\r\\n  );\\r\\n\\r\\n  /** @dev Emitted when a token's minimum balance is updated. */\\r\\n  event LOG_MINIMUM_BALANCE_UPDATED(address token, uint256 minimumBalance);\\r\\n\\r\\n  /** @dev Emitted when a token reaches its minimum balance. */\\r\\n  event LOG_TOKEN_READY(address indexed token);\\r\\n\\r\\n  /** @dev Emitted when public trades are enabled. */\\r\\n  event LOG_PUBLIC_SWAP_ENABLED();\\r\\n\\r\\n  /** @dev Emitted when the maximum tokens value is updated. */\\r\\n  event LOG_MAX_TOKENS_UPDATED(uint256 maxPoolTokens);\\r\\n\\r\\n  /** @dev Emitted when the swap fee is updated. */\\r\\n  event LOG_SWAP_FEE_UPDATED(uint256 swapFee);\\r\\n\\r\\n/* ==========  Modifiers  ========== */\\r\\n\\r\\n  modifier _lock_ {\\r\\n    require(!_mutex, \\\"ERR_REENTRY\\\");\\r\\n    _mutex = true;\\r\\n    _;\\r\\n    _mutex = false;\\r\\n  }\\r\\n\\r\\n  modifier _viewlock_() {\\r\\n    require(!_mutex, \\\"ERR_REENTRY\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier _control_ {\\r\\n    require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier _public_ {\\r\\n    require(_publicSwap, \\\"ERR_NOT_PUBLIC\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n/* ==========  Storage  ========== */\\r\\n\\r\\n  bool internal _mutex;\\r\\n\\r\\n  // Account with CONTROL role. Able to modify the swap fee,\\r\\n  // adjust token weights, bind and unbind tokens and lock\\r\\n  // public swaps & joins.\\r\\n  address internal _controller;\\r\\n\\r\\n  // Contract that handles unbound tokens.\\r\\n  TokenUnbindHandler internal _unbindHandler;\\r\\n\\r\\n  // True if PUBLIC can call SWAP & JOIN functions\\r\\n  bool internal _publicSwap;\\r\\n\\r\\n  // `setSwapFee` requires CONTROL\\r\\n  uint256 internal _swapFee;\\r\\n\\r\\n  // Array of underlying tokens in the pool.\\r\\n  address[] internal _tokens;\\r\\n\\r\\n  // Internal records of the pool's underlying tokens\\r\\n  mapping(address => Record) internal _records;\\r\\n\\r\\n  // Total denormalized weight of the pool.\\r\\n  uint256 internal _totalWeight;\\r\\n\\r\\n  // Minimum balances for tokens which have been added without the\\r\\n  // requisite initial balance.\\r\\n  mapping(address => uint256) internal _minimumBalances;\\r\\n\\r\\n  // Maximum LP tokens that can be bound.\\r\\n  // Used in alpha to restrict the economic impact of a catastrophic\\r\\n  // failure. It can be gradually increased as the pool continues to\\r\\n  // not be exploited.\\r\\n  uint256 internal _maxPoolTokens;\\r\\n\\r\\n/* ==========  Controls  ========== */\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the controller address and the token name & symbol.\\r\\n   *\\r\\n   * Note: This saves on storage costs for multi-step pool deployment.\\r\\n   *\\r\\n   * @param controller Controller of the pool\\r\\n   * @param name Name of the pool token\\r\\n   * @param symbol Symbol of the pool token\\r\\n   */\\r\\n  function configure(\\r\\n    address controller,\\r\\n    string calldata name,\\r\\n    string calldata symbol\\r\\n  ) external override {\\r\\n    require(_controller == address(0), \\\"ERR_CONFIGURED\\\");\\r\\n    require(controller != address(0), \\\"ERR_NULL_ADDRESS\\\");\\r\\n    _controller = controller;\\r\\n    // default fee is 2.5%\\r\\n    _swapFee = BONE / 40;\\r\\n    _initializeToken(name, symbol);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets up the initial assets for the pool.\\r\\n   *\\r\\n   * Note: `tokenProvider` must have approved the pool to transfer the\\r\\n   * corresponding `balances` of `tokens`.\\r\\n   *\\r\\n   * @param tokens Underlying tokens to initialize the pool with\\r\\n   * @param balances Initial balances to transfer\\r\\n   * @param denorms Initial denormalized weights for the tokens\\r\\n   * @param tokenProvider Address to transfer the balances from\\r\\n   */\\r\\n  function initialize(\\r\\n    address[] calldata tokens,\\r\\n    uint256[] calldata balances,\\r\\n    uint96[] calldata denorms,\\r\\n    address tokenProvider,\\r\\n    address unbindHandler\\r\\n  )\\r\\n    external\\r\\n    override\\r\\n    _control_\\r\\n  {\\r\\n    require(_tokens.length == 0, \\\"ERR_INITIALIZED\\\");\\r\\n    uint256 len = tokens.length;\\r\\n    require(len >= MIN_BOUND_TOKENS, \\\"ERR_MIN_TOKENS\\\");\\r\\n    require(len <= MAX_BOUND_TOKENS, \\\"ERR_MAX_TOKENS\\\");\\r\\n    require(balances.length == len && denorms.length == len, \\\"ERR_ARR_LEN\\\");\\r\\n    uint256 totalWeight = 0;\\r\\n    for (uint256 i = 0; i < len; i++) {\\r\\n      address token = tokens[i];\\r\\n      uint96 denorm = denorms[i];\\r\\n      uint256 balance = balances[i];\\r\\n      require(denorm >= MIN_WEIGHT, \\\"ERR_MIN_WEIGHT\\\");\\r\\n      require(denorm <= MAX_WEIGHT, \\\"ERR_MAX_WEIGHT\\\");\\r\\n      require(balance >= MIN_BALANCE, \\\"ERR_MIN_BALANCE\\\");\\r\\n      _records[token] = Record({\\r\\n        bound: true,\\r\\n        ready: true,\\r\\n        lastDenormUpdate: uint40(now),\\r\\n        denorm: denorm,\\r\\n        desiredDenorm: denorm,\\r\\n        index: uint8(i),\\r\\n        balance: balance\\r\\n      });\\r\\n      _tokens.push(token);\\r\\n      totalWeight = badd(totalWeight, denorm);\\r\\n      _pullUnderlying(token, tokenProvider, balance);\\r\\n    }\\r\\n    require(totalWeight <= MAX_TOTAL_WEIGHT, \\\"ERR_MAX_TOTAL_WEIGHT\\\");\\r\\n    _totalWeight = totalWeight;\\r\\n    _publicSwap = true;\\r\\n    emit LOG_PUBLIC_SWAP_ENABLED();\\r\\n    _mintPoolShare(INIT_POOL_SUPPLY);\\r\\n    _pushPoolShare(tokenProvider, INIT_POOL_SUPPLY);\\r\\n    _unbindHandler = TokenUnbindHandler(unbindHandler);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the maximum number of pool tokens that can be minted.\\r\\n   *\\r\\n   * This value will be used in the alpha to limit the maximum damage\\r\\n   * that can be caused by a catastrophic error. It can be gradually\\r\\n   * increased as the pool continues to not be exploited.\\r\\n   *\\r\\n   * If it is set to 0, the limit will be removed.\\r\\n   */\\r\\n  function setMaxPoolTokens(uint256 maxPoolTokens) external override _control_ {\\r\\n    _maxPoolTokens = maxPoolTokens;\\r\\n    emit LOG_MAX_TOKENS_UPDATED(maxPoolTokens);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Set the swap fee.\\r\\n   * Note: Swap fee must be between 0.0001% and 10%\\r\\n   */\\r\\n  function setSwapFee(uint256 swapFee) external override _control_ {\\r\\n    require(swapFee >= MIN_FEE && swapFee <= MAX_FEE, \\\"ERR_INVALID_FEE\\\");\\r\\n    _swapFee = swapFee;\\r\\n    emit LOG_SWAP_FEE_UPDATED(swapFee);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Delegate a comp-like governance token to an address\\r\\n   * specified by the controller.\\r\\n   */\\r\\n  function delegateCompLikeToken(address token,address delegatee)\\r\\n    external\\r\\n    override\\r\\n    _control_\\r\\n  {\\r\\n    ICompLikeToken(token).delegate(delegatee);\\r\\n  }\\r\\n\\r\\n/* ==========  Token Management Actions  ========== */\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the desired weights for the pool tokens, which\\r\\n   * will be adjusted over time as they are swapped.\\r\\n   *\\r\\n   * Note: This does not check for duplicate tokens or that the total\\r\\n   * of the desired weights is equal to the target total weight (25).\\r\\n   * Those assumptions should be met in the controller. Further, the\\r\\n   * provided tokens should only include the tokens which are not set\\r\\n   * for removal.\\r\\n   */\\r\\n  function reweighTokens(\\r\\n    address[] calldata tokens,\\r\\n    uint96[] calldata desiredDenorms\\r\\n  )\\r\\n    external\\r\\n    override\\r\\n    _lock_\\r\\n    _control_\\r\\n  {\\r\\n    require(desiredDenorms.length == tokens.length, \\\"ERR_ARR_LEN\\\");\\r\\n    for (uint256 i = 0; i < tokens.length; i++)\\r\\n      _setDesiredDenorm(tokens[i], desiredDenorms[i]);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Update the underlying assets held by the pool and their associated\\r\\n   * weights. Tokens which are not currently bound will be gradually added\\r\\n   * as they are swapped in to reach the provided minimum balances, which must\\r\\n   * be an amount of tokens worth the minimum weight of the total pool value.\\r\\n   * If a currently bound token is not received in this call, the token's\\r\\n   * desired weight will be set to 0.\\r\\n   */\\r\\n  function reindexTokens(\\r\\n    address[] calldata tokens,\\r\\n    uint96[] calldata desiredDenorms,\\r\\n    uint256[] calldata minimumBalances\\r\\n  )\\r\\n    external\\r\\n    override\\r\\n    _lock_\\r\\n    _control_\\r\\n  {\\r\\n    require(\\r\\n      desiredDenorms.length == tokens.length && minimumBalances.length == tokens.length,\\r\\n      \\\"ERR_ARR_LEN\\\"\\r\\n    );\\r\\n    // This size may not be the same as the input size, as it is possible\\r\\n    // to temporarily exceed the index size while tokens are being phased in\\r\\n    // or out.\\r\\n    uint256 tLen = _tokens.length;\\r\\n    bool[] memory receivedIndices = new bool[](tLen);\\r\\n    // We need to read token records in two separate loops, so\\r\\n    // write them to memory to avoid duplicate storage reads.\\r\\n    Record[] memory records = new Record[](tokens.length);\\r\\n    // Read all the records from storage and mark which of the existing tokens\\r\\n    // were represented in the reindex call.\\r\\n    for (uint256 i = 0; i < tokens.length; i++) {\\r\\n      records[i] = _records[tokens[i]];\\r\\n      if (records[i].bound) receivedIndices[records[i].index] = true;\\r\\n    }\\r\\n    // If any bound tokens were not sent in this call, set their desired weights to 0.\\r\\n    for (uint256 i = 0; i < tLen; i++) {\\r\\n      if (!receivedIndices[i]) {\\r\\n        _setDesiredDenorm(_tokens[i], 0);\\r\\n      }\\r\\n    }\\r\\n    for (uint256 i = 0; i < tokens.length; i++) {\\r\\n      address token = tokens[i];\\r\\n      // If an input weight is less than the minimum weight, use that instead.\\r\\n      uint96 denorm = desiredDenorms[i];\\r\\n      if (denorm < MIN_WEIGHT) denorm = uint96(MIN_WEIGHT);\\r\\n      if (!records[i].bound) {\\r\\n        // If the token is not bound, bind it.\\r\\n        _bind(token, minimumBalances[i], denorm);\\r\\n      } else {\\r\\n        _setDesiredDenorm(token, denorm);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Updates the minimum balance for an uninitialized token.\\r\\n   * This becomes useful if a token's external price significantly\\r\\n   * rises after being bound, since the pool can not send a token\\r\\n   * out until it reaches the minimum balance.\\r\\n   */\\r\\n  function setMinimumBalance(\\r\\n    address token,\\r\\n    uint256 minimumBalance\\r\\n  )\\r\\n    external\\r\\n    override\\r\\n    _control_\\r\\n  {\\r\\n    Record storage record = _records[token];\\r\\n    require(record.bound, \\\"ERR_NOT_BOUND\\\");\\r\\n    require(!record.ready, \\\"ERR_READY\\\");\\r\\n    _minimumBalances[token] = minimumBalance;\\r\\n    emit LOG_MINIMUM_BALANCE_UPDATED(token, minimumBalance);\\r\\n  }\\r\\n\\r\\n/* ==========  Liquidity Provider Actions  ========== */\\r\\n\\r\\n  /**\\r\\n   * @dev Mint new pool tokens by providing the proportional amount of each\\r\\n   * underlying token's balance relative to the proportion of pool tokens minted.\\r\\n   *\\r\\n   * For any underlying tokens which are not initialized, the caller must provide\\r\\n   * the proportional share of the minimum balance for the token rather than the\\r\\n   * actual balance.\\r\\n   *\\r\\n   * @param poolAmountOut Amount of pool tokens to mint\\r\\n   * @param maxAmountsIn Maximum amount of each token to pay in the same\\r\\n   * order as the pool's _tokens list.\\r\\n   */\\r\\n  function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn)\\r\\n    external\\r\\n    override\\r\\n    _lock_\\r\\n    _public_\\r\\n  {\\r\\n    uint256 poolTotal = totalSupply();\\r\\n    uint256 ratio = bdiv(poolAmountOut, poolTotal);\\r\\n    require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\r\\n    require(maxAmountsIn.length == _tokens.length, \\\"ERR_ARR_LEN\\\");\\r\\n\\r\\n    uint256 maxPoolTokens = _maxPoolTokens;\\r\\n    if (maxPoolTokens > 0) {\\r\\n      require(\\r\\n        badd(poolTotal, poolAmountOut) <= maxPoolTokens,\\r\\n        \\\"ERR_MAX_POOL_TOKENS\\\"\\r\\n      );\\r\\n    }\\r\\n\\r\\n    for (uint256 i = 0; i < maxAmountsIn.length; i++) {\\r\\n      address t = _tokens[i];\\r\\n      (Record memory record, uint256 realBalance) = _getInputToken(t);\\r\\n      uint256 tokenAmountIn = bmul(ratio, record.balance);\\r\\n      require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\r\\n      require(tokenAmountIn <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\r\\n      _updateInputToken(t, record, badd(realBalance, tokenAmountIn));\\r\\n      emit LOG_JOIN(msg.sender, t, tokenAmountIn);\\r\\n      _pullUnderlying(t, msg.sender, tokenAmountIn);\\r\\n    }\\r\\n    _mintPoolShare(poolAmountOut);\\r\\n    _pushPoolShare(msg.sender, poolAmountOut);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Pay `tokenAmountIn` of `tokenIn` to mint at least `minPoolAmountOut`\\r\\n   * pool tokens.\\r\\n   *\\r\\n   * The pool implicitly swaps `(1- weightTokenIn) * tokenAmountIn` to the other\\r\\n   * underlying tokens. Thus a swap fee is charged against the input tokens.\\r\\n   *\\r\\n   * @param tokenIn Token to send the pool\\r\\n   * @param tokenAmountIn Exact amount of `tokenIn` to pay\\r\\n   * @param minPoolAmountOut Minimum amount of pool tokens to mint\\r\\n   * @return poolAmountOut - Amount of pool tokens minted\\r\\n   */\\r\\n  function joinswapExternAmountIn(\\r\\n    address tokenIn,\\r\\n    uint256 tokenAmountIn,\\r\\n    uint256 minPoolAmountOut\\r\\n  )\\r\\n    external\\r\\n    override\\r\\n    _lock_\\r\\n    _public_\\r\\n    returns (uint256/* poolAmountOut */)\\r\\n  {\\r\\n    (Record memory inRecord, uint256 realInBalance) = _getInputToken(tokenIn);\\r\\n\\r\\n    require(tokenAmountIn != 0, \\\"ERR_ZERO_IN\\\");\\r\\n\\r\\n    require(\\r\\n      tokenAmountIn <= bmul(inRecord.balance, MAX_IN_RATIO),\\r\\n      \\\"ERR_MAX_IN_RATIO\\\"\\r\\n    );\\r\\n\\r\\n    uint256 poolAmountOut = calcPoolOutGivenSingleIn(\\r\\n      inRecord.balance,\\r\\n      inRecord.denorm,\\r\\n      _totalSupply,\\r\\n      _totalWeight,\\r\\n      tokenAmountIn,\\r\\n      _swapFee\\r\\n    );\\r\\n\\r\\n    uint256 maxPoolTokens = _maxPoolTokens;\\r\\n    if (maxPoolTokens > 0) {\\r\\n      require(\\r\\n        badd(_totalSupply, poolAmountOut) <= maxPoolTokens,\\r\\n        \\\"ERR_MAX_POOL_TOKENS\\\"\\r\\n      );\\r\\n    }\\r\\n\\r\\n    require(poolAmountOut >= minPoolAmountOut, \\\"ERR_LIMIT_OUT\\\");\\r\\n\\r\\n    _updateInputToken(tokenIn, inRecord, badd(realInBalance, tokenAmountIn));\\r\\n\\r\\n    emit LOG_JOIN(msg.sender, tokenIn, tokenAmountIn);\\r\\n\\r\\n    _mintPoolShare(poolAmountOut);\\r\\n    _pushPoolShare(msg.sender, poolAmountOut);\\r\\n    _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\r\\n\\r\\n    return poolAmountOut;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Pay up to `maxAmountIn` of `tokenIn` to mint exactly `poolAmountOut`.\\r\\n   *\\r\\n   * The pool implicitly swaps `(1- weightTokenIn) * tokenAmountIn` to the other\\r\\n   * underlying tokens. Thus a swap fee is charged against the input tokens.\\r\\n   *\\r\\n   * @param tokenIn Token to send the pool\\r\\n   * @param poolAmountOut Exact amount of pool tokens to mint\\r\\n   * @param maxAmountIn Maximum amount of `tokenIn` to pay\\r\\n   * @return tokenAmountIn - Amount of `tokenIn` paid\\r\\n   */\\r\\n  function joinswapPoolAmountOut(\\r\\n    address tokenIn,\\r\\n    uint256 poolAmountOut,\\r\\n    uint256 maxAmountIn\\r\\n  )\\r\\n    external\\r\\n    override\\r\\n    _lock_\\r\\n    _public_\\r\\n    returns (uint256/* tokenAmountIn */)\\r\\n  {\\r\\n    uint256 maxPoolTokens = _maxPoolTokens;\\r\\n    if (maxPoolTokens > 0) {\\r\\n      require(\\r\\n        badd(_totalSupply, poolAmountOut) <= maxPoolTokens,\\r\\n        \\\"ERR_MAX_POOL_TOKENS\\\"\\r\\n      );\\r\\n    }\\r\\n\\r\\n    (Record memory inRecord, uint256 realInBalance) = _getInputToken(tokenIn);\\r\\n\\r\\n    uint256 tokenAmountIn = calcSingleInGivenPoolOut(\\r\\n      inRecord.balance,\\r\\n      inRecord.denorm,\\r\\n      _totalSupply,\\r\\n      _totalWeight,\\r\\n      poolAmountOut,\\r\\n      _swapFee\\r\\n    );\\r\\n\\r\\n    require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\r\\n    require(tokenAmountIn <= maxAmountIn, \\\"ERR_LIMIT_IN\\\");\\r\\n\\r\\n    require(\\r\\n      tokenAmountIn <= bmul(inRecord.balance, MAX_IN_RATIO),\\r\\n      \\\"ERR_MAX_IN_RATIO\\\"\\r\\n    );\\r\\n\\r\\n    _updateInputToken(tokenIn, inRecord, badd(realInBalance, tokenAmountIn));\\r\\n\\r\\n    emit LOG_JOIN(msg.sender, tokenIn, tokenAmountIn);\\r\\n\\r\\n    _mintPoolShare(poolAmountOut);\\r\\n    _pushPoolShare(msg.sender, poolAmountOut);\\r\\n    _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\r\\n\\r\\n    return tokenAmountIn;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Burns `poolAmountIn` pool tokens in exchange for the amounts of each\\r\\n   * underlying token's balance proportional to the ratio of tokens burned to\\r\\n   * total pool supply. The amount of each token transferred to the caller must\\r\\n   * be greater than or equal to the associated minimum output amount from the\\r\\n   * `minAmountsOut` array.\\r\\n   *\\r\\n   * @param poolAmountIn Exact amount of pool tokens to burn\\r\\n   * @param minAmountsOut Minimum amount of each token to receive, in the same\\r\\n   * order as the pool's _tokens list.\\r\\n   */\\r\\n  function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut)\\r\\n    external\\r\\n    override\\r\\n    _lock_\\r\\n  {\\r\\n    require(minAmountsOut.length == _tokens.length, \\\"ERR_ARR_LEN\\\");\\r\\n    uint256 poolTotal = totalSupply();\\r\\n    uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\r\\n    uint256 pAiAfterExitFee = bsub(poolAmountIn, exitFee);\\r\\n    uint256 ratio = bdiv(pAiAfterExitFee, poolTotal);\\r\\n    require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\r\\n\\r\\n    _pullPoolShare(msg.sender, poolAmountIn);\\r\\n    _pushPoolShare(_controller, exitFee);\\r\\n    _burnPoolShare(pAiAfterExitFee);\\r\\n    for (uint256 i = 0; i < minAmountsOut.length; i++) {\\r\\n      address t = _tokens[i];\\r\\n      Record memory record = _records[t];\\r\\n      if (record.ready) {\\r\\n        uint256 tokenAmountOut = bmul(ratio, record.balance);\\r\\n        require(tokenAmountOut != 0, \\\"ERR_MATH_APPROX\\\");\\r\\n        require(tokenAmountOut >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\r\\n\\r\\n        _records[t].balance = bsub(record.balance, tokenAmountOut);\\r\\n        emit LOG_EXIT(msg.sender, t, tokenAmountOut);\\r\\n        _pushUnderlying(t, msg.sender, tokenAmountOut);\\r\\n      } else {\\r\\n        // If the token is not initialized, it can not exit the pool.\\r\\n        require(minAmountsOut[i] == 0, \\\"ERR_OUT_NOT_READY\\\");\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Burns `poolAmountIn` pool tokens in exchange for at least `minAmountOut`\\r\\n   * of `tokenOut`. Returns the number of tokens sent to the caller.\\r\\n   *\\r\\n   * The pool implicitly burns the tokens for all underlying tokens and swaps them\\r\\n   * to the desired output token. A swap fee is charged against the output tokens.\\r\\n   *\\r\\n   * @param tokenOut Token to receive\\r\\n   * @param poolAmountIn Exact amount of pool tokens to burn\\r\\n   * @param minAmountOut Minimum amount of `tokenOut` to receive\\r\\n   * @return tokenAmountOut - Amount of `tokenOut` received\\r\\n   */\\r\\n  function exitswapPoolAmountIn(\\r\\n    address tokenOut,\\r\\n    uint256 poolAmountIn,\\r\\n    uint256 minAmountOut\\r\\n  )\\r\\n    external\\r\\n    override\\r\\n    _lock_\\r\\n    returns (uint256/* tokenAmountOut */)\\r\\n  {\\r\\n    Record memory outRecord = _getOutputToken(tokenOut);\\r\\n\\r\\n    uint256 tokenAmountOut = calcSingleOutGivenPoolIn(\\r\\n      outRecord.balance,\\r\\n      outRecord.denorm,\\r\\n      _totalSupply,\\r\\n      _totalWeight,\\r\\n      poolAmountIn,\\r\\n      _swapFee\\r\\n    );\\r\\n\\r\\n    require(tokenAmountOut >= minAmountOut, \\\"ERR_LIMIT_OUT\\\");\\r\\n\\r\\n    require(\\r\\n      tokenAmountOut <= bmul(outRecord.balance, MAX_OUT_RATIO),\\r\\n      \\\"ERR_MAX_OUT_RATIO\\\"\\r\\n    );\\r\\n\\r\\n    _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\r\\n    _records[tokenOut].balance = bsub(outRecord.balance, tokenAmountOut);\\r\\n    _decreaseDenorm(outRecord, tokenOut);\\r\\n    uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\r\\n\\r\\n    emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOut);\\r\\n\\r\\n    _pullPoolShare(msg.sender, poolAmountIn);\\r\\n    _burnPoolShare(bsub(poolAmountIn, exitFee));\\r\\n    _pushPoolShare(_controller, exitFee);\\r\\n\\r\\n    return tokenAmountOut;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Burn up to `maxPoolAmountIn` for exactly `tokenAmountOut` of `tokenOut`.\\r\\n   * Returns the number of pool tokens burned.\\r\\n   *\\r\\n   * The pool implicitly burns the tokens for all underlying tokens and swaps them\\r\\n   * to the desired output token. A swap fee is charged against the output tokens.\\r\\n   *\\r\\n   * @param tokenOut Token to receive\\r\\n   * @param tokenAmountOut Exact amount of `tokenOut` to receive\\r\\n   * @param maxPoolAmountIn Maximum amount of pool tokens to burn\\r\\n   * @return poolAmountIn - Amount of pool tokens burned\\r\\n   */\\r\\n  function exitswapExternAmountOut(\\r\\n    address tokenOut,\\r\\n    uint256 tokenAmountOut,\\r\\n    uint256 maxPoolAmountIn\\r\\n  )\\r\\n    external\\r\\n    override\\r\\n    _lock_\\r\\n    returns (uint256/* poolAmountIn */)\\r\\n  {\\r\\n    Record memory outRecord = _getOutputToken(tokenOut);\\r\\n    require(\\r\\n      tokenAmountOut <= bmul(outRecord.balance, MAX_OUT_RATIO),\\r\\n      \\\"ERR_MAX_OUT_RATIO\\\"\\r\\n    );\\r\\n\\r\\n    uint256 poolAmountIn = calcPoolInGivenSingleOut(\\r\\n      outRecord.balance,\\r\\n      outRecord.denorm,\\r\\n      _totalSupply,\\r\\n      _totalWeight,\\r\\n      tokenAmountOut,\\r\\n      _swapFee\\r\\n    );\\r\\n\\r\\n    require(poolAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\r\\n    require(poolAmountIn <= maxPoolAmountIn, \\\"ERR_LIMIT_IN\\\");\\r\\n\\r\\n    _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\r\\n    _records[tokenOut].balance = bsub(outRecord.balance, tokenAmountOut);\\r\\n    _decreaseDenorm(outRecord, tokenOut);\\r\\n\\r\\n    uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\r\\n\\r\\n    emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOut);\\r\\n\\r\\n    _pullPoolShare(msg.sender, poolAmountIn);\\r\\n    _burnPoolShare(bsub(poolAmountIn, exitFee));\\r\\n    _pushPoolShare(_controller, exitFee);\\r\\n\\r\\n    return poolAmountIn;\\r\\n  }\\r\\n\\r\\n/* ==========  Other  ========== */\\r\\n\\r\\n  /**\\r\\n   * @dev Absorb any tokens that have been sent to the pool.\\r\\n   * If the token is not bound, it will be sent to the unbound\\r\\n   * token handler.\\r\\n   */\\r\\n  function gulp(address token) external override _lock_ {\\r\\n    Record storage record = _records[token];\\r\\n    uint256 balance = IERC20(token).balanceOf(address(this));\\r\\n    if (record.bound) {\\r\\n      if (!record.ready) {\\r\\n        uint256 minimumBalance = _minimumBalances[token];\\r\\n        if (balance >= minimumBalance) {\\r\\n          _minimumBalances[token] = 0;\\r\\n          record.ready = true;\\r\\n          emit LOG_TOKEN_READY(token);\\r\\n          uint256 additionalBalance = bsub(balance, minimumBalance);\\r\\n          uint256 balRatio = bdiv(additionalBalance, minimumBalance);\\r\\n          uint96 newDenorm = uint96(badd(MIN_WEIGHT, bmul(MIN_WEIGHT, balRatio)));\\r\\n          record.denorm = newDenorm;\\r\\n          record.lastDenormUpdate = uint40(now);\\r\\n          _totalWeight = badd(_totalWeight, newDenorm);\\r\\n          emit LOG_DENORM_UPDATED(token, record.denorm);\\r\\n        }\\r\\n      }\\r\\n      _records[token].balance = balance;\\r\\n    } else {\\r\\n      _pushUnderlying(token, address(_unbindHandler), balance);\\r\\n      _unbindHandler.handleUnbindToken(token, balance);\\r\\n    }\\r\\n  }\\r\\n\\r\\n/* ==========  Flash Loan  ========== */\\r\\n\\r\\n  /**\\r\\n   * @dev Execute a flash loan, transferring `amount` of `token` to `recipient`.\\r\\n   * `amount` must be repaid with `swapFee` interest by the end of the transaction.\\r\\n   *\\r\\n   * @param recipient Must implement the IFlashLoanRecipient interface\\r\\n   * @param token Token to borrow\\r\\n   * @param amount Amount to borrow\\r\\n   * @param data Data to send to the recipient in `receiveFlashLoan` call\\r\\n   */\\r\\n  function flashBorrow(\\r\\n    address recipient,\\r\\n    address token,\\r\\n    uint256 amount,\\r\\n    bytes calldata data\\r\\n  )\\r\\n    external\\r\\n    override\\r\\n    _lock_\\r\\n  {\\r\\n    Record storage record = _records[token];\\r\\n    require(record.bound, \\\"ERR_NOT_BOUND\\\");\\r\\n    uint256 balStart = IERC20(token).balanceOf(address(this));\\r\\n    require(balStart >= amount, \\\"ERR_INSUFFICIENT_BAL\\\");\\r\\n    _pushUnderlying(token, address(recipient), amount);\\r\\n    uint256 fee = bmul(balStart, _swapFee);\\r\\n    uint256 amountDue = badd(amount, fee);\\r\\n    IFlashLoanRecipient(recipient).receiveFlashLoan(token, amount, amountDue, data);\\r\\n    uint256 balEnd = IERC20(token).balanceOf(address(this));\\r\\n    require(\\r\\n      balEnd > balStart && balEnd >= amountDue,\\r\\n      \\\"ERR_INSUFFICIENT_PAYMENT\\\"\\r\\n    );\\r\\n    record.balance = balEnd;\\r\\n    // If the payment brings the token above its minimum balance,\\r\\n    // clear the minimum and mark the token as ready.\\r\\n    if (!record.ready) {\\r\\n      uint256 minimumBalance = _minimumBalances[token];\\r\\n      if (balEnd >= minimumBalance) {\\r\\n        _minimumBalances[token] = 0;\\r\\n        record.ready = true;\\r\\n        emit LOG_TOKEN_READY(token);\\r\\n        uint256 additionalBalance = bsub(balEnd, minimumBalance);\\r\\n        uint256 balRatio = bdiv(additionalBalance, minimumBalance);\\r\\n        uint96 newDenorm = uint96(badd(MIN_WEIGHT, bmul(MIN_WEIGHT, balRatio)));\\r\\n        record.denorm = newDenorm;\\r\\n        record.lastDenormUpdate = uint40(now);\\r\\n        _totalWeight = badd(_totalWeight, newDenorm);\\r\\n        emit LOG_DENORM_UPDATED(token, record.denorm);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n/* ==========  Token Swaps  ========== */\\r\\n\\r\\n  /**\\r\\n   * @dev Execute a token swap with a specified amount of input\\r\\n   * tokens and a minimum amount of output tokens.\\r\\n   *\\r\\n   * Note: Will revert if `tokenOut` is uninitialized.\\r\\n   *\\r\\n   * @param tokenIn Token to swap in\\r\\n   * @param tokenAmountIn Exact amount of `tokenIn` to swap in\\r\\n   * @param tokenOut Token to swap out\\r\\n   * @param minAmountOut Minimum amount of `tokenOut` to receive\\r\\n   * @param maxPrice Maximum ratio of input to output tokens\\r\\n   * @return (tokenAmountOut, spotPriceAfter)\\r\\n   */\\r\\n  function swapExactAmountIn(\\r\\n    address tokenIn,\\r\\n    uint256 tokenAmountIn,\\r\\n    address tokenOut,\\r\\n    uint256 minAmountOut,\\r\\n    uint256 maxPrice\\r\\n  )\\r\\n    external\\r\\n    override\\r\\n    _lock_\\r\\n    _public_\\r\\n    returns (uint256/* tokenAmountOut */, uint256/* spotPriceAfter */)\\r\\n  {\\r\\n    (Record memory inRecord, uint256 realInBalance) = _getInputToken(tokenIn);\\r\\n    Record memory outRecord = _getOutputToken(tokenOut);\\r\\n\\r\\n    require(\\r\\n      tokenAmountIn <= bmul(inRecord.balance, MAX_IN_RATIO),\\r\\n      \\\"ERR_MAX_IN_RATIO\\\"\\r\\n    );\\r\\n\\r\\n    uint256 spotPriceBefore = calcSpotPrice(\\r\\n      inRecord.balance,\\r\\n      inRecord.denorm,\\r\\n      outRecord.balance,\\r\\n      outRecord.denorm,\\r\\n      _swapFee\\r\\n    );\\r\\n    require(spotPriceBefore <= maxPrice, \\\"ERR_BAD_LIMIT_PRICE\\\");\\r\\n\\r\\n    uint256 tokenAmountOut = calcOutGivenIn(\\r\\n      inRecord.balance,\\r\\n      inRecord.denorm,\\r\\n      outRecord.balance,\\r\\n      outRecord.denorm,\\r\\n      tokenAmountIn,\\r\\n      _swapFee\\r\\n    );\\r\\n\\r\\n    require(tokenAmountOut >= minAmountOut, \\\"ERR_LIMIT_OUT\\\");\\r\\n\\r\\n    _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\r\\n    _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\r\\n\\r\\n    realInBalance = badd(realInBalance, tokenAmountIn);\\r\\n    _updateInputToken(tokenIn, inRecord, realInBalance);\\r\\n    if (inRecord.ready) {\\r\\n      inRecord.balance = realInBalance;\\r\\n    }\\r\\n    // Update the in-memory record for the spotPriceAfter calculation,\\r\\n    // then update the storage record with the local balance.\\r\\n    outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\r\\n    _records[tokenOut].balance = outRecord.balance;\\r\\n    // If needed, update the output token's weight.\\r\\n    _decreaseDenorm(outRecord, tokenOut);\\r\\n\\r\\n    uint256 spotPriceAfter = calcSpotPrice(\\r\\n      inRecord.balance,\\r\\n      inRecord.denorm,\\r\\n      outRecord.balance,\\r\\n      outRecord.denorm,\\r\\n      _swapFee\\r\\n    );\\r\\n\\r\\n    require(spotPriceAfter >= spotPriceBefore, \\\"ERR_MATH_APPROX_2\\\");\\r\\n    require(spotPriceAfter <= maxPrice, \\\"ERR_LIMIT_PRICE\\\");\\r\\n    require(\\r\\n      spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut),\\r\\n      \\\"ERR_MATH_APPROX\\\"\\r\\n    );\\r\\n\\r\\n    emit LOG_SWAP(msg.sender, tokenIn, tokenOut, tokenAmountIn, tokenAmountOut);\\r\\n\\r\\n    return (tokenAmountOut, spotPriceAfter);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Trades at most `maxAmountIn` of `tokenIn` for exactly `tokenAmountOut`\\r\\n   * of `tokenOut`.\\r\\n   *\\r\\n   * Returns the actual input amount and the new spot price after the swap,\\r\\n   * which can not exceed `maxPrice`.\\r\\n   *\\r\\n   * @param tokenIn Token to swap in\\r\\n   * @param maxAmountIn Maximum amount of `tokenIn` to pay\\r\\n   * @param tokenOut Token to swap out\\r\\n   * @param tokenAmountOut Exact amount of `tokenOut` to receive\\r\\n   * @param maxPrice Maximum ratio of input to output tokens\\r\\n   * @return (tokenAmountIn, spotPriceAfter)\\r\\n   */\\r\\n  function swapExactAmountOut(\\r\\n    address tokenIn,\\r\\n    uint256 maxAmountIn,\\r\\n    address tokenOut,\\r\\n    uint256 tokenAmountOut,\\r\\n    uint256 maxPrice\\r\\n  )\\r\\n    external\\r\\n    override\\r\\n    _lock_\\r\\n    _public_\\r\\n    returns (uint256 /* tokenAmountIn */, uint256 /* spotPriceAfter */)\\r\\n  {\\r\\n    (Record memory inRecord, uint256 realInBalance) = _getInputToken(tokenIn);\\r\\n    Record memory outRecord = _getOutputToken(tokenOut);\\r\\n\\r\\n    require(\\r\\n      tokenAmountOut <= bmul(outRecord.balance, MAX_OUT_RATIO),\\r\\n      \\\"ERR_MAX_OUT_RATIO\\\"\\r\\n    );\\r\\n\\r\\n    uint256 spotPriceBefore = calcSpotPrice(\\r\\n      inRecord.balance,\\r\\n      inRecord.denorm,\\r\\n      outRecord.balance,\\r\\n      outRecord.denorm,\\r\\n      _swapFee\\r\\n    );\\r\\n    require(spotPriceBefore <= maxPrice, \\\"ERR_BAD_LIMIT_PRICE\\\");\\r\\n\\r\\n    uint256 tokenAmountIn = calcInGivenOut(\\r\\n      inRecord.balance,\\r\\n      inRecord.denorm,\\r\\n      outRecord.balance,\\r\\n      outRecord.denorm,\\r\\n      tokenAmountOut,\\r\\n      _swapFee\\r\\n    );\\r\\n\\r\\n    require(tokenAmountIn <= maxAmountIn, \\\"ERR_LIMIT_IN\\\");\\r\\n\\r\\n    _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\r\\n    _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\r\\n\\r\\n    // Update the balance and (if necessary) weight of the input token.\\r\\n    realInBalance = badd(realInBalance, tokenAmountIn);\\r\\n    _updateInputToken(tokenIn, inRecord, realInBalance);\\r\\n    if (inRecord.ready) {\\r\\n      inRecord.balance = realInBalance;\\r\\n    }\\r\\n    // Update the in-memory record for the spotPriceAfter calculation,\\r\\n    // then update the storage record with the local balance.\\r\\n    outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\r\\n    _records[tokenOut].balance = outRecord.balance;\\r\\n    // If needed, update the output token's weight.\\r\\n    _decreaseDenorm(outRecord, tokenOut);\\r\\n\\r\\n    uint256 spotPriceAfter = calcSpotPrice(\\r\\n      inRecord.balance,\\r\\n      inRecord.denorm,\\r\\n      outRecord.balance,\\r\\n      outRecord.denorm,\\r\\n      _swapFee\\r\\n    );\\r\\n\\r\\n    require(spotPriceAfter >= spotPriceBefore, \\\"ERR_MATH_APPROX\\\");\\r\\n    require(spotPriceAfter <= maxPrice, \\\"ERR_LIMIT_PRICE\\\");\\r\\n    require(\\r\\n      spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut),\\r\\n      \\\"ERR_MATH_APPROX\\\"\\r\\n    );\\r\\n\\r\\n    emit LOG_SWAP(msg.sender, tokenIn, tokenOut, tokenAmountIn, tokenAmountOut);\\r\\n\\r\\n    return (tokenAmountIn, spotPriceAfter);\\r\\n  }\\r\\n\\r\\n/* ==========  Config Queries  ========== */\\r\\n  /**\\r\\n   * @dev Check if swapping tokens and joining the pool is allowed.\\r\\n   */\\r\\n  function isPublicSwap() external view override returns (bool) {\\r\\n    return _publicSwap;\\r\\n  }\\r\\n\\r\\n  function getSwapFee() external view override _viewlock_ returns (uint256/* swapFee */) {\\r\\n    return _swapFee;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the controller address.\\r\\n   */\\r\\n  function getController() external view override returns (address)\\r\\n  {\\r\\n    return _controller;\\r\\n  }\\r\\n\\r\\n/* ==========  Token Queries  ========== */\\r\\n  function getMaxPoolTokens() external view override returns (uint256) {\\r\\n    return _maxPoolTokens;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Check if a token is bound to the pool.\\r\\n   */\\r\\n  function isBound(address t) external view override returns (bool) {\\r\\n    return _records[t].bound;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Get the number of tokens bound to the pool.\\r\\n   */\\r\\n  function getNumTokens() external view override returns (uint256) {\\r\\n    return _tokens.length;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Get all bound tokens.\\r\\n   */\\r\\n  function getCurrentTokens()\\r\\n    external\\r\\n    view\\r\\n    override\\r\\n    _viewlock_\\r\\n    returns (address[] memory tokens)\\r\\n  {\\r\\n    tokens = _tokens;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the list of tokens which have a desired weight above 0.\\r\\n   * Tokens with a desired weight of 0 are set to be phased out of the pool.\\r\\n   */\\r\\n  function getCurrentDesiredTokens()\\r\\n    external\\r\\n    view\\r\\n    override\\r\\n    _viewlock_\\r\\n    returns (address[] memory tokens)\\r\\n  {\\r\\n    address[] memory tempTokens = _tokens;\\r\\n    tokens = new address[](tempTokens.length);\\r\\n    uint256 usedIndex = 0;\\r\\n    for (uint256 i = 0; i < tokens.length; i++) {\\r\\n      address token = tempTokens[i];\\r\\n      if (_records[token].desiredDenorm > 0) {\\r\\n        tokens[usedIndex++] = token;\\r\\n      }\\r\\n    }\\r\\n    assembly { mstore(tokens, usedIndex) }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the denormalized weight of a bound token.\\r\\n   */\\r\\n  function getDenormalizedWeight(address token)\\r\\n    external\\r\\n    view\\r\\n    override\\r\\n    _viewlock_\\r\\n    returns (uint256/* denorm */)\\r\\n  {\\r\\n    require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n    return _records[token].denorm;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the record for a token bound to the pool.\\r\\n   */\\r\\n  function getTokenRecord(address token)\\r\\n    external\\r\\n    view\\r\\n    override\\r\\n    _viewlock_\\r\\n    returns (Record memory record)\\r\\n  {\\r\\n    record = _records[token];\\r\\n    require(record.bound, \\\"ERR_NOT_BOUND\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Finds the first token which is both initialized and has a\\r\\n   * desired weight above 0, then returns the address of that token\\r\\n   * and the extrapolated value of the pool in terms of that token.\\r\\n   *\\r\\n   * The value is extrapolated by multiplying the token's\\r\\n   * balance by the reciprocal of its normalized weight.\\r\\n   * @return (token, extrapolatedValue)\\r\\n   */\\r\\n  function extrapolatePoolValueFromToken()\\r\\n    external\\r\\n    view\\r\\n    override\\r\\n    _viewlock_\\r\\n    returns (address/* token */, uint256/* extrapolatedValue */)\\r\\n  {\\r\\n    address token;\\r\\n    uint256 extrapolatedValue;\\r\\n    uint256 len = _tokens.length;\\r\\n    for (uint256 i = 0; i < len; i++) {\\r\\n      token = _tokens[i];\\r\\n      Record storage record = _records[token];\\r\\n      if (record.ready && record.desiredDenorm > 0) {\\r\\n        extrapolatedValue = bmul(\\r\\n          record.balance,\\r\\n          bdiv(_totalWeight, record.denorm)\\r\\n        );\\r\\n        break;\\r\\n      }\\r\\n    }\\r\\n    require(extrapolatedValue > 0, \\\"ERR_NONE_READY\\\");\\r\\n    return (token, extrapolatedValue);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Get the total denormalized weight of the pool.\\r\\n   */\\r\\n  function getTotalDenormalizedWeight()\\r\\n    external\\r\\n    view\\r\\n    override\\r\\n    _viewlock_\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return _totalWeight;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the stored balance of a bound token.\\r\\n   */\\r\\n  function getBalance(address token) external view override _viewlock_ returns (uint256) {\\r\\n    Record storage record = _records[token];\\r\\n    require(record.bound, \\\"ERR_NOT_BOUND\\\");\\r\\n    return record.balance;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Get the minimum balance of an uninitialized token.\\r\\n   * Note: Throws if the token is initialized.\\r\\n   */\\r\\n  function getMinimumBalance(address token) external view override _viewlock_ returns (uint256) {\\r\\n    Record memory record = _records[token];\\r\\n    require(record.bound, \\\"ERR_NOT_BOUND\\\");\\r\\n    require(!record.ready, \\\"ERR_READY\\\");\\r\\n    return _minimumBalances[token];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the balance of a token which is used in price\\r\\n   * calculations. If the token is initialized, this is the\\r\\n   * stored balance; if not, this is the minimum balance.\\r\\n   */\\r\\n  function getUsedBalance(address token) external view override _viewlock_ returns (uint256) {\\r\\n    Record memory record = _records[token];\\r\\n    require(record.bound, \\\"ERR_NOT_BOUND\\\");\\r\\n    if (!record.ready) {\\r\\n      return _minimumBalances[token];\\r\\n    }\\r\\n    return record.balance;\\r\\n  }\\r\\n\\r\\n/* ==========  Price Queries  ========== */\\r\\n  /**\\r\\n   * @dev Returns the spot price for `tokenOut` in terms of `tokenIn`.\\r\\n   */\\r\\n  function getSpotPrice(address tokenIn, address tokenOut)\\r\\n    external\\r\\n    view\\r\\n    override\\r\\n    _viewlock_\\r\\n    returns (uint256)\\r\\n  {\\r\\n    (Record memory inRecord,) = _getInputToken(tokenIn);\\r\\n    Record memory outRecord = _getOutputToken(tokenOut);\\r\\n    return\\r\\n      calcSpotPrice(\\r\\n        inRecord.balance,\\r\\n        inRecord.denorm,\\r\\n        outRecord.balance,\\r\\n        outRecord.denorm,\\r\\n        _swapFee\\r\\n      );\\r\\n  }\\r\\n\\r\\n/* ==========  Pool Share Internal Functions  ========== */\\r\\n\\r\\n  function _pullPoolShare(address from, uint256 amount) internal {\\r\\n    _pull(from, amount);\\r\\n  }\\r\\n\\r\\n  function _pushPoolShare(address to, uint256 amount) internal {\\r\\n    _push(to, amount);\\r\\n  }\\r\\n\\r\\n  function _mintPoolShare(uint256 amount) internal {\\r\\n    _mint(amount);\\r\\n  }\\r\\n\\r\\n  function _burnPoolShare(uint256 amount) internal {\\r\\n    _burn(amount);\\r\\n  }\\r\\n\\r\\n/* ==========  Underlying Token Internal Functions  ========== */\\r\\n  // 'Underlying' token-manipulation functions make external calls but are NOT locked\\r\\n  // You must `_lock_` or otherwise ensure reentry-safety\\r\\n\\r\\n  function _pullUnderlying(\\r\\n    address erc20,\\r\\n    address from,\\r\\n    uint256 amount\\r\\n  ) internal {\\r\\n    (bool success, bytes memory data) = erc20.call(\\r\\n      abi.encodeWithSelector(\\r\\n        IERC20.transferFrom.selector,\\r\\n        from,\\r\\n        address(this),\\r\\n        amount\\r\\n      )\\r\\n    );\\r\\n    require(\\r\\n      success && (data.length == 0 || abi.decode(data, (bool))),\\r\\n      \\\"ERR_ERC20_FALSE\\\"\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function _pushUnderlying(\\r\\n    address erc20,\\r\\n    address to,\\r\\n    uint256 amount\\r\\n  ) internal {\\r\\n    (bool success, bytes memory data) = erc20.call(\\r\\n      abi.encodeWithSelector(\\r\\n        IERC20.transfer.selector,\\r\\n        to,\\r\\n        amount\\r\\n      )\\r\\n    );\\r\\n    require(\\r\\n      success && (data.length == 0 || abi.decode(data, (bool))),\\r\\n      \\\"ERR_ERC20_FALSE\\\"\\r\\n    );\\r\\n  }\\r\\n\\r\\n/* ==========  Token Management Internal Functions  ========== */\\r\\n\\r\\n  /**\\r\\n   * @dev Bind a token by address without actually depositing a balance.\\r\\n   * The token will be unable to be swapped out until it reaches the minimum balance.\\r\\n   * Note: Token must not already be bound.\\r\\n   * Note: `minimumBalance` should represent an amount of the token which is worth\\r\\n   * the portion of the current pool value represented by the minimum weight.\\r\\n   * @param token Address of the token to bind\\r\\n   * @param minimumBalance minimum balance to reach before the token can be swapped out\\r\\n   * @param desiredDenorm Desired weight for the token.\\r\\n   */\\r\\n  function _bind(\\r\\n    address token,\\r\\n    uint256 minimumBalance,\\r\\n    uint96 desiredDenorm\\r\\n  ) internal {\\r\\n    require(!_records[token].bound, \\\"ERR_IS_BOUND\\\");\\r\\n\\r\\n    require(desiredDenorm >= MIN_WEIGHT, \\\"ERR_MIN_WEIGHT\\\");\\r\\n    require(desiredDenorm <= MAX_WEIGHT, \\\"ERR_MAX_WEIGHT\\\");\\r\\n    require(minimumBalance >= MIN_BALANCE, \\\"ERR_MIN_BALANCE\\\");\\r\\n\\r\\n    _records[token] = Record({\\r\\n      bound: true,\\r\\n      ready: false,\\r\\n      lastDenormUpdate: 0,\\r\\n      denorm: 0,\\r\\n      desiredDenorm: desiredDenorm,\\r\\n      index: uint8(_tokens.length),\\r\\n      balance: 0\\r\\n    });\\r\\n    _tokens.push(token);\\r\\n    _minimumBalances[token] = minimumBalance;\\r\\n    emit LOG_TOKEN_ADDED(token, desiredDenorm, minimumBalance);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Remove a token from the pool.\\r\\n   * Replaces the address in the tokens array with the last address,\\r\\n   * then removes it from the array.\\r\\n   * Note: This should only be called after the total weight has been adjusted.\\r\\n   * Note: Must be called in a function with:\\r\\n   * - _lock_ modifier to prevent reentrance\\r\\n   * - requirement that the token is bound\\r\\n   */\\r\\n  function _unbind(address token) internal {\\r\\n    Record memory record = _records[token];\\r\\n    uint256 tokenBalance = record.balance;\\r\\n\\r\\n    // Swap the token-to-unbind with the last token,\\r\\n    // then delete the last token\\r\\n    uint256 index = record.index;\\r\\n    uint256 last = _tokens.length - 1;\\r\\n    // Only swap the token with the last token if it is not\\r\\n    // already at the end of the array.\\r\\n    if (index != last) {\\r\\n      _tokens[index] = _tokens[last];\\r\\n      _records[_tokens[index]].index = uint8(index);\\r\\n    }\\r\\n    _tokens.pop();\\r\\n    _records[token] = Record({\\r\\n      bound: false,\\r\\n      ready: false,\\r\\n      lastDenormUpdate: 0,\\r\\n      denorm: 0,\\r\\n      desiredDenorm: 0,\\r\\n      index: 0,\\r\\n      balance: 0\\r\\n    });\\r\\n    // transfer any remaining tokens out\\r\\n    _pushUnderlying(token, address(_unbindHandler), tokenBalance);\\r\\n    _unbindHandler.handleUnbindToken(token, tokenBalance);\\r\\n    emit LOG_TOKEN_REMOVED(token);\\r\\n  }\\r\\n\\r\\n  function _setDesiredDenorm(address token, uint96 desiredDenorm) internal {\\r\\n    Record storage record = _records[token];\\r\\n    require(record.bound, \\\"ERR_NOT_BOUND\\\");\\r\\n    // If the desired weight is 0, this will trigger a gradual unbinding of the token.\\r\\n    // Therefore the weight only needs to be above the minimum weight if it isn't 0.\\r\\n    require(\\r\\n      desiredDenorm >= MIN_WEIGHT || desiredDenorm == 0,\\r\\n      \\\"ERR_MIN_WEIGHT\\\"\\r\\n    );\\r\\n    require(desiredDenorm <= MAX_WEIGHT, \\\"ERR_MAX_WEIGHT\\\");\\r\\n    record.desiredDenorm = desiredDenorm;\\r\\n    emit LOG_DESIRED_DENORM_SET(token, desiredDenorm);\\r\\n  }\\r\\n\\r\\n  function _increaseDenorm(Record memory record, address token) internal {\\r\\n    // If the weight does not need to increase or the token is not\\r\\n    // initialized, don't do anything.\\r\\n    if (\\r\\n      record.denorm >= record.desiredDenorm ||\\r\\n      !record.ready ||\\r\\n      now - record.lastDenormUpdate < WEIGHT_UPDATE_DELAY\\r\\n    ) return;\\r\\n    uint96 oldWeight = record.denorm;\\r\\n    uint96 denorm = record.desiredDenorm;\\r\\n    uint256 maxDiff = bmul(oldWeight, WEIGHT_CHANGE_PCT);\\r\\n    uint256 diff = bsub(denorm, oldWeight);\\r\\n    if (diff > maxDiff) {\\r\\n      denorm = uint96(badd(oldWeight, maxDiff));\\r\\n      diff = maxDiff;\\r\\n    }\\r\\n    _totalWeight = badd(_totalWeight, diff);\\r\\n    require(_totalWeight <= MAX_TOTAL_WEIGHT, \\\"ERR_MAX_TOTAL_WEIGHT\\\");\\r\\n    // Update the in-memory denorm value for spot-price computations.\\r\\n    record.denorm = denorm;\\r\\n    // Update the storage record\\r\\n    _records[token].denorm = denorm;\\r\\n    _records[token].lastDenormUpdate = uint40(now);\\r\\n    emit LOG_DENORM_UPDATED(token, denorm);\\r\\n  }\\r\\n\\r\\n  function _decreaseDenorm(Record memory record, address token) internal {\\r\\n    // If the weight does not need to decrease, don't do anything.\\r\\n    if (\\r\\n      record.denorm <= record.desiredDenorm ||\\r\\n      !record.ready ||\\r\\n      now - record.lastDenormUpdate < WEIGHT_UPDATE_DELAY\\r\\n    ) return;\\r\\n    uint96 oldWeight = record.denorm;\\r\\n    uint96 denorm = record.desiredDenorm;\\r\\n    uint256 maxDiff = bmul(oldWeight, WEIGHT_CHANGE_PCT);\\r\\n    uint256 diff = bsub(oldWeight, denorm);\\r\\n    if (diff > maxDiff) {\\r\\n      denorm = uint96(bsub(oldWeight, maxDiff));\\r\\n      diff = maxDiff;\\r\\n    }\\r\\n    if (denorm <= MIN_WEIGHT) {\\r\\n      denorm = 0;\\r\\n      _totalWeight = bsub(_totalWeight, denorm);\\r\\n      // Because this is removing the token from the pool, the\\r\\n      // in-memory denorm value is irrelevant, as it is only used\\r\\n      // to calculate the new spot price, but the spot price calc\\r\\n      // will throw if it is passed 0 for the denorm.\\r\\n      _unbind(token);\\r\\n    } else {\\r\\n      _totalWeight = bsub(_totalWeight, diff);\\r\\n      // Update the in-memory denorm value for spot-price computations.\\r\\n      record.denorm = denorm;\\r\\n      // Update the stored denorm value\\r\\n      _records[token].denorm = denorm;\\r\\n      _records[token].lastDenormUpdate = uint40(now);\\r\\n      emit LOG_DENORM_UPDATED(token, denorm);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Handles weight changes and initialization of an\\r\\n   * input token.\\r\\n   *\\r\\n   * If the token is not initialized and the new balance is\\r\\n   * still below the minimum, this will not do anything.\\r\\n   *\\r\\n   * If the token is not initialized but the new balance will\\r\\n   * bring the token above the minimum balance, this will\\r\\n   * mark the token as initialized, remove the minimum\\r\\n   * balance and set the weight to the minimum weight plus\\r\\n   * 1%.\\r\\n   *\\r\\n   *\\r\\n   * @param token Address of the input token\\r\\n   * @param record Token record with minimums applied to the balance\\r\\n   * and weight if the token was uninitialized.\\r\\n   */\\r\\n  function _updateInputToken(\\r\\n    address token,\\r\\n    Record memory record,\\r\\n    uint256 realBalance\\r\\n  )\\r\\n    internal\\r\\n  {\\r\\n    if (!record.ready) {\\r\\n      // Check if the minimum balance has been reached\\r\\n      if (realBalance >= record.balance) {\\r\\n        // Remove the minimum balance record\\r\\n        _minimumBalances[token] = 0;\\r\\n        // Mark the token as initialized\\r\\n        _records[token].ready = true;\\r\\n        record.ready = true;\\r\\n        emit LOG_TOKEN_READY(token);\\r\\n        // Set the initial denorm value to the minimum weight times one plus\\r\\n        // the ratio of the increase in balance over the minimum to the minimum\\r\\n        // balance.\\r\\n        // weight = (1 + ((bal - min_bal) / min_bal)) * min_weight\\r\\n        uint256 additionalBalance = bsub(realBalance, record.balance);\\r\\n        uint256 balRatio = bdiv(additionalBalance, record.balance);\\r\\n        record.denorm = uint96(badd(MIN_WEIGHT, bmul(MIN_WEIGHT, balRatio)));\\r\\n        _records[token].denorm = record.denorm;\\r\\n        _records[token].lastDenormUpdate = uint40(now);\\r\\n        _totalWeight = badd(_totalWeight, record.denorm);\\r\\n        emit LOG_DENORM_UPDATED(token, record.denorm);\\r\\n      } else {\\r\\n        uint256 realToMinRatio = bdiv(\\r\\n          bsub(record.balance, realBalance),\\r\\n          record.balance\\r\\n        );\\r\\n        uint256 weightPremium = bmul(MIN_WEIGHT / 10, realToMinRatio);\\r\\n        record.denorm = uint96(badd(MIN_WEIGHT, weightPremium));\\r\\n      }\\r\\n      // If the token is still not ready, do not adjust the weight.\\r\\n    } else {\\r\\n      // If the token is already initialized, update the weight (if any adjustment\\r\\n      // is needed).\\r\\n      _increaseDenorm(record, token);\\r\\n    }\\r\\n    // Regardless of whether the token is initialized, store the actual new balance.\\r\\n    _records[token].balance = realBalance;\\r\\n  }\\r\\n\\r\\n/* ==========  Token Query Internal Functions  ========== */\\r\\n\\r\\n  /**\\r\\n   * @dev Get the record for a token which is being swapped in.\\r\\n   * The token must be bound to the pool. If the token is not\\r\\n   * initialized (meaning it does not have the minimum balance)\\r\\n   * this function will return the actual balance of the token\\r\\n   * which the pool holds, but set the record's balance and weight\\r\\n   * to the token's minimum balance and the pool's minimum weight.\\r\\n   * This allows the token swap to be priced correctly even if the\\r\\n   * pool does not own any of the tokens.\\r\\n   */\\r\\n  function _getInputToken(address token)\\r\\n    internal\\r\\n    view\\r\\n    returns (Record memory record, uint256 realBalance)\\r\\n  {\\r\\n    record = _records[token];\\r\\n    require(record.bound, \\\"ERR_NOT_BOUND\\\");\\r\\n\\r\\n    realBalance = record.balance;\\r\\n    // If the input token is not initialized, we use the minimum\\r\\n    // initial weight and minimum initial balance instead of the\\r\\n    // real values for price and output calculations.\\r\\n    if (!record.ready) {\\r\\n      record.balance = _minimumBalances[token];\\r\\n      uint256 realToMinRatio = bdiv(\\r\\n        bsub(record.balance, realBalance),\\r\\n        record.balance\\r\\n      );\\r\\n      uint256 weightPremium = bmul(MIN_WEIGHT / 10, realToMinRatio);\\r\\n      record.denorm = uint96(badd(MIN_WEIGHT, weightPremium));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _getOutputToken(address token)\\r\\n    internal\\r\\n    view\\r\\n    returns (Record memory record)\\r\\n  {\\r\\n    record = _records[token];\\r\\n    require(record.bound, \\\"ERR_NOT_BOUND\\\");\\r\\n    // Tokens which have not reached their minimum balance can not be\\r\\n    // swapped out.\\r\\n    require(record.ready, \\\"ERR_OUT_NOT_READY\\\");\\r\\n  }\\r\\n}\\r\\n\\r\\n\\r\\ninterface TokenUnbindHandler {\\r\\n  /**\\r\\n   * @dev Receive `amount` of `token` from the pool.\\r\\n   */\\r\\n  function handleUnbindToken(address token, uint256 amount) external;\\r\\n}\"\n    },\n    \"temp-contracts/interfaces/IFlashLoanRecipient.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\ninterface IFlashLoanRecipient {\\r\\n  function receiveFlashLoan(\\r\\n    address tokenBorrowed,\\r\\n    uint256 amountBorrowed,\\r\\n    uint256 amountDue,\\r\\n    bytes calldata data\\r\\n  ) external;\\r\\n}\"\n    },\n    \"temp-contracts/interfaces/IIndexPool.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.6.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n\\r\\ninterface IIndexPool {\\r\\n  /**\\r\\n   * @dev Token record data structure\\r\\n   * @param bound is token bound to pool\\r\\n   * @param ready has token been initialized\\r\\n   * @param lastDenormUpdate timestamp of last denorm change\\r\\n   * @param denorm denormalized weight\\r\\n   * @param desiredDenorm desired denormalized weight (used for incremental changes)\\r\\n   * @param index index of address in tokens array\\r\\n   * @param balance token balance\\r\\n   */\\r\\n  struct Record {\\r\\n    bool bound;\\r\\n    bool ready;\\r\\n    uint40 lastDenormUpdate;\\r\\n    uint96 denorm;\\r\\n    uint96 desiredDenorm;\\r\\n    uint8 index;\\r\\n    uint256 balance;\\r\\n  }\\r\\n\\r\\n  event LOG_SWAP(\\r\\n    address indexed caller,\\r\\n    address indexed tokenIn,\\r\\n    address indexed tokenOut,\\r\\n    uint256 tokenAmountIn,\\r\\n    uint256 tokenAmountOut\\r\\n  );\\r\\n\\r\\n  event LOG_JOIN(\\r\\n    address indexed caller,\\r\\n    address indexed tokenIn,\\r\\n    uint256 tokenAmountIn\\r\\n  );\\r\\n\\r\\n  event LOG_EXIT(\\r\\n    address indexed caller,\\r\\n    address indexed tokenOut,\\r\\n    uint256 tokenAmountOut\\r\\n  );\\r\\n\\r\\n  event LOG_DENORM_UPDATED(address indexed token, uint256 newDenorm);\\r\\n\\r\\n  event LOG_DESIRED_DENORM_SET(address indexed token, uint256 desiredDenorm);\\r\\n\\r\\n  event LOG_TOKEN_REMOVED(address token);\\r\\n\\r\\n  event LOG_TOKEN_ADDED(\\r\\n    address indexed token,\\r\\n    uint256 desiredDenorm,\\r\\n    uint256 minimumBalance\\r\\n  );\\r\\n\\r\\n  event LOG_MINIMUM_BALANCE_UPDATED(address token, uint256 minimumBalance);\\r\\n\\r\\n  event LOG_TOKEN_READY(address indexed token);\\r\\n\\r\\n  event LOG_PUBLIC_SWAP_ENABLED();\\r\\n\\r\\n  event LOG_MAX_TOKENS_UPDATED(uint256 maxPoolTokens);\\r\\n\\r\\n  event LOG_SWAP_FEE_UPDATED(uint256 swapFee);\\r\\n\\r\\n  function configure(\\r\\n    address controller,\\r\\n    string calldata name,\\r\\n    string calldata symbol\\r\\n  ) external;\\r\\n\\r\\n  function initialize(\\r\\n    address[] calldata tokens,\\r\\n    uint256[] calldata balances,\\r\\n    uint96[] calldata denorms,\\r\\n    address tokenProvider,\\r\\n    address unbindHandler\\r\\n  ) external;\\r\\n\\r\\n  function setMaxPoolTokens(uint256 maxPoolTokens) external;\\r\\n\\r\\n  function setSwapFee(uint256 swapFee) external;\\r\\n\\r\\n  function delegateCompLikeToken(address token, address delegatee) external;\\r\\n\\r\\n  function reweighTokens(\\r\\n    address[] calldata tokens,\\r\\n    uint96[] calldata desiredDenorms\\r\\n  ) external;\\r\\n\\r\\n  function reindexTokens(\\r\\n    address[] calldata tokens,\\r\\n    uint96[] calldata desiredDenorms,\\r\\n    uint256[] calldata minimumBalances\\r\\n  ) external;\\r\\n\\r\\n  function setMinimumBalance(address token, uint256 minimumBalance) external;\\r\\n\\r\\n  function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn) external;\\r\\n\\r\\n  function joinswapExternAmountIn(\\r\\n    address tokenIn,\\r\\n    uint256 tokenAmountIn,\\r\\n    uint256 minPoolAmountOut\\r\\n  ) external returns (uint256/* poolAmountOut */);\\r\\n\\r\\n  function joinswapPoolAmountOut(\\r\\n    address tokenIn,\\r\\n    uint256 poolAmountOut,\\r\\n    uint256 maxAmountIn\\r\\n  ) external returns (uint256/* tokenAmountIn */);\\r\\n\\r\\n  function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut) external;\\r\\n\\r\\n  function exitswapPoolAmountIn(\\r\\n    address tokenOut,\\r\\n    uint256 poolAmountIn,\\r\\n    uint256 minAmountOut\\r\\n  )\\r\\n    external returns (uint256/* tokenAmountOut */);\\r\\n\\r\\n  function exitswapExternAmountOut(\\r\\n    address tokenOut,\\r\\n    uint256 tokenAmountOut,\\r\\n    uint256 maxPoolAmountIn\\r\\n  ) external returns (uint256/* poolAmountIn */);\\r\\n\\r\\n  function gulp(address token) external;\\r\\n\\r\\n  function flashBorrow(\\r\\n    address recipient,\\r\\n    address token,\\r\\n    uint256 amount,\\r\\n    bytes calldata data\\r\\n  ) external;\\r\\n\\r\\n  function swapExactAmountIn(\\r\\n    address tokenIn,\\r\\n    uint256 tokenAmountIn,\\r\\n    address tokenOut,\\r\\n    uint256 minAmountOut,\\r\\n    uint256 maxPrice\\r\\n  ) external returns (uint256/* tokenAmountOut */, uint256/* spotPriceAfter */);\\r\\n\\r\\n  function swapExactAmountOut(\\r\\n    address tokenIn,\\r\\n    uint256 maxAmountIn,\\r\\n    address tokenOut,\\r\\n    uint256 tokenAmountOut,\\r\\n    uint256 maxPrice\\r\\n  ) external returns (uint256 /* tokenAmountIn */, uint256 /* spotPriceAfter */);\\r\\n\\r\\n  function isPublicSwap() external view returns (bool);\\r\\n\\r\\n  function getSwapFee() external view returns (uint256/* swapFee */);\\r\\n\\r\\n  function getController() external view returns (address);\\r\\n\\r\\n  function getMaxPoolTokens() external view returns (uint256);\\r\\n\\r\\n  function isBound(address t) external view returns (bool);\\r\\n\\r\\n  function getNumTokens() external view returns (uint256);\\r\\n\\r\\n  function getCurrentTokens() external view returns (address[] memory tokens);\\r\\n\\r\\n  function getCurrentDesiredTokens() external view returns (address[] memory tokens);\\r\\n\\r\\n  function getDenormalizedWeight(address token) external view returns (uint256/* denorm */);\\r\\n\\r\\n  function getTokenRecord(address token) external view returns (Record memory record);\\r\\n\\r\\n  function extrapolatePoolValueFromToken() external view returns (address/* token */, uint256/* extrapolatedValue */);\\r\\n\\r\\n  function getTotalDenormalizedWeight() external view returns (uint256);\\r\\n\\r\\n  function getBalance(address token) external view returns (uint256);\\r\\n\\r\\n  function getMinimumBalance(address token) external view returns (uint256);\\r\\n\\r\\n  function getUsedBalance(address token) external view returns (uint256);\\r\\n\\r\\n  function getSpotPrice(address tokenIn, address tokenOut) external view returns (uint256);\\r\\n}\"\n    },\n    \"temp-contracts/interfaces/ICompLikeToken.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\n\\r\\ninterface ICompLikeToken {\\r\\n  function delegate(address delegatee) external;\\r\\n}\"\n    }\n  },\n  \"settings\": {\n    \"metadata\": {\n      \"useLiteralContent\": false\n    },\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 200\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"id\",\n          \"ast\"\n        ]\n      }\n    }\n  }\n}",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDenorm\",\"type\":\"uint256\"}],\"name\":\"LOG_DENORM_UPDATED\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"desiredDenorm\",\"type\":\"uint256\"}],\"name\":\"LOG_DESIRED_DENORM_SET\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmountOut\",\"type\":\"uint256\"}],\"name\":\"LOG_EXIT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmountIn\",\"type\":\"uint256\"}],\"name\":\"LOG_JOIN\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPoolTokens\",\"type\":\"uint256\"}],\"name\":\"LOG_MAX_TOKENS_UPDATED\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumBalance\",\"type\":\"uint256\"}],\"name\":\"LOG_MINIMUM_BALANCE_UPDATED\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LOG_PUBLIC_SWAP_ENABLED\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmountOut\",\"type\":\"uint256\"}],\"name\":\"LOG_SWAP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"}],\"name\":\"LOG_SWAP_FEE_UPDATED\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"desiredDenorm\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumBalance\",\"type\":\"uint256\"}],\"name\":\"LOG_TOKEN_ADDED\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"LOG_TOKEN_READY\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"LOG_TOKEN_REMOVED\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION_NUMBER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"whom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"configure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegateCompLikeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"}],\"name\":\"exitPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPoolAmountIn\",\"type\":\"uint256\"}],\"name\":\"exitswapExternAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"exitswapPoolAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extrapolatePoolValueFromToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flashBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentDesiredTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getDenormalizedWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxPoolTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getMinimumBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"getSpotPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenRecord\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"bound\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"ready\",\"type\":\"bool\"},{\"internalType\":\"uint40\",\"name\":\"lastDenormUpdate\",\"type\":\"uint40\"},{\"internalType\":\"uint96\",\"name\":\"denorm\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"desiredDenorm\",\"type\":\"uint96\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IIndexPool.Record\",\"name\":\"record\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDenormalizedWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getUsedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"gulp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint96[]\",\"name\":\"denorms\",\"type\":\"uint96[]\"},{\"internalType\":\"address\",\"name\":\"tokenProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"unbindHandler\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"}],\"name\":\"isBound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublicSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"}],\"name\":\"joinPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPoolAmountOut\",\"type\":\"uint256\"}],\"name\":\"joinswapExternAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountIn\",\"type\":\"uint256\"}],\"name\":\"joinswapPoolAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint96[]\",\"name\":\"desiredDenorms\",\"type\":\"uint96[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minimumBalances\",\"type\":\"uint256[]\"}],\"name\":\"reindexTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint96[]\",\"name\":\"desiredDenorms\",\"type\":\"uint96[]\"}],\"name\":\"reweighTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxPoolTokens\",\"type\":\"uint256\"}],\"name\":\"setMaxPoolTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumBalance\",\"type\":\"uint256\"}],\"name\":\"setMinimumBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"}],\"name\":\"setSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"name\":\"swapExactAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"name\":\"swapExactAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"LOG_DENORM_UPDATED(address,uint256)\":{\"details\":\"Emitted when a token's weight updates. \"},\"LOG_DESIRED_DENORM_SET(address,uint256)\":{\"details\":\"Emitted when a token's desired weight is set. \"},\"LOG_EXIT(address,address,uint256)\":{\"details\":\"Emitted when pool tokens are burned for underlying. \"},\"LOG_JOIN(address,address,uint256)\":{\"details\":\"Emitted when underlying tokens are deposited for pool tokens. \"},\"LOG_MAX_TOKENS_UPDATED(uint256)\":{\"details\":\"Emitted when the maximum tokens value is updated. \"},\"LOG_MINIMUM_BALANCE_UPDATED(address,uint256)\":{\"details\":\"Emitted when a token's minimum balance is updated. \"},\"LOG_PUBLIC_SWAP_ENABLED()\":{\"details\":\"Emitted when public trades are enabled. \"},\"LOG_SWAP(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when tokens are swapped. \"},\"LOG_SWAP_FEE_UPDATED(uint256)\":{\"details\":\"Emitted when the swap fee is updated. \"},\"LOG_TOKEN_ADDED(address,uint256,uint256)\":{\"details\":\"Emitted when a token is unbound from the pool. \"},\"LOG_TOKEN_READY(address)\":{\"details\":\"Emitted when a token reaches its minimum balance. \"},\"LOG_TOKEN_REMOVED(address)\":{\"details\":\"Emitted when a token is unbound from the pool. \"}},\"kind\":\"dev\",\"methods\":{\"configure(address,string,string)\":{\"details\":\"Sets the controller address and the token name & symbol. Note: This saves on storage costs for multi-step pool deployment.\",\"params\":{\"controller\":\"Controller of the pool\",\"name\":\"Name of the pool token\",\"symbol\":\"Symbol of the pool token\"}},\"delegateCompLikeToken(address,address)\":{\"details\":\"Delegate a comp-like governance token to an address specified by the controller.\"},\"exitPool(uint256,uint256[])\":{\"details\":\"Burns `poolAmountIn` pool tokens in exchange for the amounts of each underlying token's balance proportional to the ratio of tokens burned to total pool supply. The amount of each token transferred to the caller must be greater than or equal to the associated minimum output amount from the `minAmountsOut` array.\",\"params\":{\"minAmountsOut\":\"Minimum amount of each token to receive, in the same order as the pool's _tokens list.\",\"poolAmountIn\":\"Exact amount of pool tokens to burn\"}},\"exitswapExternAmountOut(address,uint256,uint256)\":{\"details\":\"Burn up to `maxPoolAmountIn` for exactly `tokenAmountOut` of `tokenOut`. Returns the number of pool tokens burned. The pool implicitly burns the tokens for all underlying tokens and swaps them to the desired output token. A swap fee is charged against the output tokens.\",\"params\":{\"maxPoolAmountIn\":\"Maximum amount of pool tokens to burn\",\"tokenAmountOut\":\"Exact amount of `tokenOut` to receive\",\"tokenOut\":\"Token to receive\"},\"returns\":{\"_0\":\"poolAmountIn - Amount of pool tokens burned\"}},\"exitswapPoolAmountIn(address,uint256,uint256)\":{\"details\":\"Burns `poolAmountIn` pool tokens in exchange for at least `minAmountOut` of `tokenOut`. Returns the number of tokens sent to the caller. The pool implicitly burns the tokens for all underlying tokens and swaps them to the desired output token. A swap fee is charged against the output tokens.\",\"params\":{\"minAmountOut\":\"Minimum amount of `tokenOut` to receive\",\"poolAmountIn\":\"Exact amount of pool tokens to burn\",\"tokenOut\":\"Token to receive\"},\"returns\":{\"_0\":\"tokenAmountOut - Amount of `tokenOut` received\"}},\"extrapolatePoolValueFromToken()\":{\"details\":\"Finds the first token which is both initialized and has a desired weight above 0, then returns the address of that token and the extrapolated value of the pool in terms of that token. The value is extrapolated by multiplying the token's balance by the reciprocal of its normalized weight.\",\"returns\":{\"_0\":\"(token, extrapolatedValue)\"}},\"flashBorrow(address,address,uint256,bytes)\":{\"details\":\"Execute a flash loan, transferring `amount` of `token` to `recipient`. `amount` must be repaid with `swapFee` interest by the end of the transaction.\",\"params\":{\"amount\":\"Amount to borrow\",\"data\":\"Data to send to the recipient in `receiveFlashLoan` call\",\"recipient\":\"Must implement the IFlashLoanRecipient interface\",\"token\":\"Token to borrow\"}},\"getBalance(address)\":{\"details\":\"Returns the stored balance of a bound token.\"},\"getController()\":{\"details\":\"Returns the controller address.\"},\"getCurrentDesiredTokens()\":{\"details\":\"Returns the list of tokens which have a desired weight above 0. Tokens with a desired weight of 0 are set to be phased out of the pool.\"},\"getCurrentTokens()\":{\"details\":\"Get all bound tokens.\"},\"getDenormalizedWeight(address)\":{\"details\":\"Returns the denormalized weight of a bound token.\"},\"getMinimumBalance(address)\":{\"details\":\"Get the minimum balance of an uninitialized token. Note: Throws if the token is initialized.\"},\"getNumTokens()\":{\"details\":\"Get the number of tokens bound to the pool.\"},\"getSpotPrice(address,address)\":{\"details\":\"Returns the spot price for `tokenOut` in terms of `tokenIn`.\"},\"getTokenRecord(address)\":{\"details\":\"Returns the record for a token bound to the pool.\"},\"getTotalDenormalizedWeight()\":{\"details\":\"Get the total denormalized weight of the pool.\"},\"getUsedBalance(address)\":{\"details\":\"Returns the balance of a token which is used in price calculations. If the token is initialized, this is the stored balance; if not, this is the minimum balance.\"},\"gulp(address)\":{\"details\":\"Absorb any tokens that have been sent to the pool. If the token is not bound, it will be sent to the unbound token handler.\"},\"initialize(address[],uint256[],uint96[],address,address)\":{\"details\":\"Sets up the initial assets for the pool. Note: `tokenProvider` must have approved the pool to transfer the corresponding `balances` of `tokens`.\",\"params\":{\"balances\":\"Initial balances to transfer\",\"denorms\":\"Initial denormalized weights for the tokens\",\"tokenProvider\":\"Address to transfer the balances from\",\"tokens\":\"Underlying tokens to initialize the pool with\"}},\"isBound(address)\":{\"details\":\"Check if a token is bound to the pool.\"},\"isPublicSwap()\":{\"details\":\"Check if swapping tokens and joining the pool is allowed.\"},\"joinPool(uint256,uint256[])\":{\"details\":\"Mint new pool tokens by providing the proportional amount of each underlying token's balance relative to the proportion of pool tokens minted. For any underlying tokens which are not initialized, the caller must provide the proportional share of the minimum balance for the token rather than the actual balance.\",\"params\":{\"maxAmountsIn\":\"Maximum amount of each token to pay in the same order as the pool's _tokens list.\",\"poolAmountOut\":\"Amount of pool tokens to mint\"}},\"joinswapExternAmountIn(address,uint256,uint256)\":{\"details\":\"Pay `tokenAmountIn` of `tokenIn` to mint at least `minPoolAmountOut` pool tokens. The pool implicitly swaps `(1- weightTokenIn) * tokenAmountIn` to the other underlying tokens. Thus a swap fee is charged against the input tokens.\",\"params\":{\"minPoolAmountOut\":\"Minimum amount of pool tokens to mint\",\"tokenAmountIn\":\"Exact amount of `tokenIn` to pay\",\"tokenIn\":\"Token to send the pool\"},\"returns\":{\"_0\":\"poolAmountOut - Amount of pool tokens minted\"}},\"joinswapPoolAmountOut(address,uint256,uint256)\":{\"details\":\"Pay up to `maxAmountIn` of `tokenIn` to mint exactly `poolAmountOut`. The pool implicitly swaps `(1- weightTokenIn) * tokenAmountIn` to the other underlying tokens. Thus a swap fee is charged against the input tokens.\",\"params\":{\"maxAmountIn\":\"Maximum amount of `tokenIn` to pay\",\"poolAmountOut\":\"Exact amount of pool tokens to mint\",\"tokenIn\":\"Token to send the pool\"},\"returns\":{\"_0\":\"tokenAmountIn - Amount of `tokenIn` paid\"}},\"reindexTokens(address[],uint96[],uint256[])\":{\"details\":\"Update the underlying assets held by the pool and their associated weights. Tokens which are not currently bound will be gradually added as they are swapped in to reach the provided minimum balances, which must be an amount of tokens worth the minimum weight of the total pool value. If a currently bound token is not received in this call, the token's desired weight will be set to 0.\"},\"reweighTokens(address[],uint96[])\":{\"details\":\"Sets the desired weights for the pool tokens, which will be adjusted over time as they are swapped. Note: This does not check for duplicate tokens or that the total of the desired weights is equal to the target total weight (25). Those assumptions should be met in the controller. Further, the provided tokens should only include the tokens which are not set for removal.\"},\"setMaxPoolTokens(uint256)\":{\"details\":\"Sets the maximum number of pool tokens that can be minted. This value will be used in the alpha to limit the maximum damage that can be caused by a catastrophic error. It can be gradually increased as the pool continues to not be exploited. If it is set to 0, the limit will be removed.\"},\"setMinimumBalance(address,uint256)\":{\"details\":\"Updates the minimum balance for an uninitialized token. This becomes useful if a token's external price significantly rises after being bound, since the pool can not send a token out until it reaches the minimum balance.\"},\"setSwapFee(uint256)\":{\"details\":\"Set the swap fee. Note: Swap fee must be between 0.0001% and 10%\"},\"swapExactAmountIn(address,uint256,address,uint256,uint256)\":{\"details\":\"Execute a token swap with a specified amount of input tokens and a minimum amount of output tokens. Note: Will revert if `tokenOut` is uninitialized.\",\"params\":{\"maxPrice\":\"Maximum ratio of input to output tokens\",\"minAmountOut\":\"Minimum amount of `tokenOut` to receive\",\"tokenAmountIn\":\"Exact amount of `tokenIn` to swap in\",\"tokenIn\":\"Token to swap in\",\"tokenOut\":\"Token to swap out\"},\"returns\":{\"_0\":\"(tokenAmountOut, spotPriceAfter)\"}},\"swapExactAmountOut(address,uint256,address,uint256,uint256)\":{\"details\":\"Trades at most `maxAmountIn` of `tokenIn` for exactly `tokenAmountOut` of `tokenOut`. Returns the actual input amount and the new spot price after the swap, which can not exceed `maxPrice`.\",\"params\":{\"maxAmountIn\":\"Maximum amount of `tokenIn` to pay\",\"maxPrice\":\"Maximum ratio of input to output tokens\",\"tokenAmountOut\":\"Exact amount of `tokenOut` to receive\",\"tokenIn\":\"Token to swap in\",\"tokenOut\":\"Token to swap out\"},\"returns\":{\"_0\":\"(tokenAmountIn, spotPriceAfter)\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"temp-contracts/balancer/IndexPool.sol\":\"IndexPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"temp-contracts/balancer/BConst.sol\":{\"keccak256\":\"0x348f76a798b40adff2c95f5e08f066276ba04ab3d691dba796e2b1de448cc300\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://9f304ba0ba555a52a551d57b5757f4b893befef3a709bc8e3801c02ec401cf52\",\"dweb:/ipfs/QmZnkrs5qVNSNVhMV4bLx6R2U68guvsqizgRqyBz4DFWyR\"]},\"temp-contracts/balancer/BMath.sol\":{\"keccak256\":\"0xf540a61bcc786727a0a2c27f9d618fab77978a7ec68e59c017ac571149546105\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://ea106c344c8977e1102f728d870dc07f16e2eaffe1a0c420d2abea174c68d600\",\"dweb:/ipfs/QmaJvB4ZRoq6eXoBsfuH2YBpFxe3Ngieu3H5Anp6aj2peJ\"]},\"temp-contracts/balancer/BNum.sol\":{\"keccak256\":\"0xcde598922f0f7994c628bfb121ece7a31bce93d0d1c2f7cb06019923da515ebf\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://632530394618a7497edb0b3b027e7efd74b1f52190b363cfa4612cf9926ed031\",\"dweb:/ipfs/QmV8EC1UgAJVvCfAbwhRTvmERKJ5AD2eG2jqfJpEuSHdq8\"]},\"temp-contracts/balancer/BToken.sol\":{\"keccak256\":\"0x83fe68b34b23197d0439405610b0efb2854e307bb1b81770f9e0d1cb555fb32a\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://4f29c44a93e21c9e7005b28cf98580a63f3f6b342d1d623247c82e14b88ab0f2\",\"dweb:/ipfs/QmeoMUAtmyG6h3Epy5WoJa79oSGRfrtxBQZKnca6QgGiZb\"]},\"temp-contracts/balancer/IndexPool.sol\":{\"keccak256\":\"0x4f9af919f7569c310b26685a4d71dc80160fab07584382875863a0c1829384a7\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://14d96cb39283be27abd4fdc1afb1f9a1b009cf722eae8e7d20b446fd6f00ebc3\",\"dweb:/ipfs/Qme8AfpVUXthDo1RRjzY8Va7hmvgpUEu4LsRDB7Ao4b3kG\"]},\"temp-contracts/interfaces/ICompLikeToken.sol\":{\"keccak256\":\"0xe8506f0ceb79a5ddda801ed0a1cf9325124abbe963f783d99a3dad0693e02b5b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://387eca48180c8d3702bb6780d8135f03c6636d746f12390c074793e7c8a9e853\",\"dweb:/ipfs/QmXfBriKih3yFzYBM821hWjQutpLWxpy6om6rXMzpX1aH1\"]},\"temp-contracts/interfaces/IFlashLoanRecipient.sol\":{\"keccak256\":\"0xb9c841301d9fda62a078ba792ecf8970ffe107d46f0135552b2cec396aa881dc\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://8952c2bb08ded58edb88b207f4848a115e852b310ca3a6f5cf7f5016a3545942\",\"dweb:/ipfs/QmPU74SaiCsjGzCQFcM28KbCTdaSiJi2r2KCZPyB4iApM2\"]},\"temp-contracts/interfaces/IIndexPool.sol\":{\"keccak256\":\"0xc05d367934012bfd35c1bb80b9c2b4c725a1ce25543922f5b217c742091648fb\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://8e3ad8d721b1b8eed9dd9906ba7bf3fc70556c3bbe4f0dd4baf2a07b3887b307\",\"dweb:/ipfs/QmTsN4zLfbeq18BPbXKLc4EoD5DcFN9aeNusUnVujmudnR\"]}},\"version\":1}",
      "bytecode": "0x608060405234801561001057600080fd5b50615ffa80620000216000396000f3fe608060405234801561001057600080fd5b506004361061028a5760003560e01c806370a082311161015c578063a49c44d7116100ce578063d4cadf6811610087578063d4cadf6814610585578063d73dd6231461058d578063dd62ed3e146105a0578063f8b2cb4f146105b3578063f8b5db09146105c6578063fde924f7146105d95761028a565b8063a49c44d714610529578063a9059cbb1461053c578063b02f0b731461054f578063c3f4681014610562578063cc77828d14610575578063cd2ed8fb1461057d5761028a565b806391bfa2bf1161012057806391bfa2bf146104ca578063936c3477146104dd578063948d8ce6146104e557806395d89b41146104f857806398836f0814610500578063a20cfa75146105165761028a565b806370a08231146104685780637c5e9ea41461047b5780638025e3031461049c5780638201aa3f146104a45780638c28cbe8146104b75761028a565b8063313ce56711610200578063534d4f3d116101b9578063534d4f3d146103e95780635d5e8ce7146103fc5780635db342771461040f57806364c7d6611461042257806366188463146104425780636d06dfa0146104555761028a565b8063313ce5671461038057806334e199071461039557806346ab38f1146103a857806346ecfbd6146103bb5780634aa4e0b5146103c35780634f69c0d4146103d65761028a565b806318160ddd1161025257806318160ddd1461031557806319f0f8491461031d57806323b872dd146103325780632f37b624146103455780633018205f146103585780633043ffc91461036d5761028a565b806302c967481461028f578063039209af146102b857806306fdde03146102cd578063095ea7b3146102e257806315e84af914610302575b600080fd5b6102a261029d3660046153da565b6105e1565b6040516102af9190615eed565b60405180910390f35b6102c06107bc565b6040516102af9190615742565b6102d5610923565b6040516102af919061579a565b6102f56102f0366004615361565b6109b9565b6040516102af919061578f565b6102a261031036600461520f565b610a12565b6102a2610a99565b61033061032b3660046152f2565b610a9f565b005b6102f5610340366004615243565b610b9a565b6102f56103533660046151f4565b610ccb565b610360610ced565b6040516102af91906156a5565b61033061037b366004615283565b610d01565b6103886110bf565b6040516102af9190615f04565b6103306103a33660046155e8565b6110c4565b6102a26103b63660046153da565b61116c565b6102a26112e4565b6102a26103d13660046151f4565b6112ea565b6103306103e4366004615618565b6113f7565b6103306103f73660046155e8565b611623565b61033061040a3660046154c9565b611687565b6102a261041d3660046153da565b611774565b6104356104303660046151f4565b611952565b6040516102af9190615e82565b6102f5610450366004615361565b611a29565b6102a26104633660046153da565b611af2565b6102a26104763660046151f4565b611cc5565b61048e61048936600461538b565b611ce0565b6040516102af929190615ef6565b6102a2611fd7565b61048e6104b236600461538b565b611fdc565b6103306104c53660046151f4565b6122af565b6102a26104d83660046151f4565b61256e565b6102a2612687565b6102a26104f33660046151f4565b6126b4565b6102d561273e565b61050861279f565b6040516102af9291906156dd565b61033061052436600461540d565b6128a3565b610330610537366004615361565b612cf6565b6102f561054a366004615361565b612dde565b61033061055d366004615618565b612df4565b610330610570366004615532565b6130be565b6102c0613441565b6102a26134c6565b6102a26134cc565b6102f561059b366004615361565b6134f9565b6102a26105ae36600461520f565b61356d565b6102a26105c13660046151f4565b613598565b6103306105d436600461520f565b613601565b6102f5613692565b60055460009060ff16156106105760405162461bcd60e51b815260040161060790615a99565b60405180910390fd5b6005805460ff1916600117905561062561508c565b61062e856136a2565b90506106538160c001516003670de0b6b3a76400008161064a57fe5b04600101613777565b8411156106725760405162461bcd60e51b815260040161060790615af5565b60006106998260c0015183606001516001600160601b0316600254600a54896007546137f0565b9050806106b85760405162461bcd60e51b8152600401610607906158c4565b838111156106d85760405162461bcd60e51b815260040161060790615a43565b6106e38633876138b4565b6106f18260c00151866139a3565b6001600160a01b03871660009081526009602052604090206001015561071782876139dc565b6000610724826000613777565b9050866001600160a01b0316336001600160a01b03167fe74c91552b64c2e2e7bd255639e004e693bd3e1d01cc33e65610b86afcc1ffed886040516107699190615eed565b60405180910390a361077b3383613b6e565b61078d61078883836139a3565b613b78565b6005546107a89061010090046001600160a01b031682613b84565b506005805460ff1916905595945050505050565b60055460609060ff16156107e25760405162461bcd60e51b815260040161060790615a99565b6060600880548060200260200160405190810160405280929190818152602001828054801561083a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161081c575b50505050509050805167ffffffffffffffff8111801561085957600080fd5b50604051908082528060200260200182016040528015610883578160200160208202803683370190505b5091506000805b835181101561091c5760008382815181106108a157fe5b6020908102919091018101516001600160a01b03811660009081526009909252604090912054909150600160981b90046001600160601b03161561091357808584806001019550815181106108f257fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b5060010161088a565b5082525090565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156109af5780601f10610984576101008083540402835291602001916109af565b820191906000526020600020905b81548152906001019060200180831161099257829003601f168201915b5050505050905090565b3360008181526001602090815260408083206001600160a01b03871680855292528083208590555191929091600080516020615fa583398151915290610a00908690615eed565b60405180910390a35060015b92915050565b60055460009060ff1615610a385760405162461bcd60e51b815260040161060790615a99565b610a4061508c565b610a4984613b8e565b509050610a5461508c565b610a5d846136a2565b9050610a908260c0015183606001516001600160601b03168360c0015184606001516001600160601b0316600754613cdc565b95945050505050565b60025490565b60055461010090046001600160a01b031615610acd5760405162461bcd60e51b815260040161060790615c8a565b6001600160a01b038516610af35760405162461bcd60e51b815260040161060790615d85565b60058054610100600160a81b0319166101006001600160a01b038816021790556028670de0b6b3a764000004600755604080516020601f8601819004810282018101909252848152610b9391869086908190840183828082843760009201919091525050604080516020601f88018190048102820181019092528681529250869150859081908401838280828437600092019190915250613d4192505050565b5050505050565b6000336001600160a01b0385161480610bd657506001600160a01b03841660009081526001602090815260408083203384529091529020548211155b610bf25760405162461bcd60e51b815260040161060790615a14565b610bfd848484613db8565b336001600160a01b03851614801590610c3b57506001600160a01b038416600090815260016020908152604080832033845290915290205460001914155b15610cc1576001600160a01b0384166000908152600160209081526040808320338452909152902054610c6e90836139a3565b6001600160a01b038581166000908152600160209081526040808320338085529252918290208490559051918616929091600080516020615fa583398151915291610cb891615eed565b60405180910390a35b5060019392505050565b6001600160a01b03811660009081526009602052604090205460ff165b919050565b60055461010090046001600160a01b031690565b60055460ff1615610d245760405162461bcd60e51b815260040161060790615a99565b6005805460ff191660011790556001600160a01b0384166000908152600960205260409020805460ff16610d6a5760405162461bcd60e51b815260040161060790615b20565b6040516370a0823160e01b81526000906001600160a01b038716906370a0823190610d999030906004016156a5565b60206040518083038186803b158015610db157600080fd5b505afa158015610dc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de99190615600565b905084811015610e0b5760405162461bcd60e51b815260040161060790615993565b610e168688876138b4565b6000610e2482600754613777565b90506000610e328783613ea1565b604051630ed1000360e31b81529091506001600160a01b038a1690637688001890610e69908b908b9086908c908c906004016156f6565b600060405180830381600087803b158015610e8357600080fd5b505af1158015610e97573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b038b1691506370a0823190610eca9030906004016156a5565b60206040518083038186803b158015610ee257600080fd5b505afa158015610ef6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1a9190615600565b90508381118015610f2b5750818110155b610f475760405162461bcd60e51b815260040161060790615abe565b600185018190558454610100900460ff166110a9576001600160a01b0389166000908152600b60205260409020548082106110a7576001600160a01b038a166000818152600b6020526040808220829055885461ff001916610100178955517ff7bb8e57ffdfd9a31e7580ee84f68757f44fb4a8a913f44520d22f2da1c955e59190a26000610fd683836139a3565b90506000610fe48284613ecd565b9050600061100f6004670de0b6b3a76400005b0461100a6703782dace9d9000085613777565b613ea1565b8954600160381b600160981b031916600160381b6001600160601b0383169081029190911766ffffffffff00001916620100004264ffffffffff1602178b55600a5491925061105e9190613ea1565b600a5588546040516001600160a01b038f1691600080516020615f858339815191529161109b91600160381b90046001600160601b031690615f12565b60405180910390a25050505b505b50506005805460ff191690555050505050505050565b601290565b60055461010090046001600160a01b031633146110f35760405162461bcd60e51b8152600401610607906157cd565b64e8d4a510008110801590611110575067016345785d8a00008111155b61112c5760405162461bcd60e51b815260040161060790615ddc565b60078190556040517fccfe595973efc7c1f6c29e31974d380470b9431d7770290185b7129419c7e63e90611161908390615eed565b60405180910390a150565b60055460009060ff16156111925760405162461bcd60e51b815260040161060790615a99565b6005805460ff191660011790556111a761508c565b6111b0856136a2565b905060006111d98260c0015183606001516001600160601b0316600254600a5489600754613f61565b9050838110156111fb5760405162461bcd60e51b815260040161060790615943565b6112158260c001516003670de0b6b3a76400008161064a57fe5b8111156112345760405162461bcd60e51b815260040161060790615af5565b61123f8633836138b4565b61124d8260c00151826139a3565b6001600160a01b03871660009081526009602052604090206001015561127382876139dc565b6000611280866000613777565b9050866001600160a01b0316336001600160a01b03167fe74c91552b64c2e2e7bd255639e004e693bd3e1d01cc33e65610b86afcc1ffed846040516112c59190615eed565b60405180910390a36112d73387613b6e565b61078d61078887836139a3565b600c5490565b60055460009060ff16156113105760405162461bcd60e51b815260040161060790615a99565b61131861508c565b506001600160a01b038216600090815260096020908152604091829020825160e081018452815460ff80821615158084526101008304821615159584019590955264ffffffffff62010000830416958301959095526001600160601b03600160381b820481166060840152600160981b8204166080830152600160f81b900490931660a08401526001015460c08301526113c45760405162461bcd60e51b815260040161060790615b20565b80602001516113ed5750506001600160a01b0381166000908152600b6020526040902054610ce8565b60c0015192915050565b60055460ff161561141a5760405162461bcd60e51b815260040161060790615a99565b6005805460ff19166001179055600654600160a01b900460ff166114505760405162461bcd60e51b815260040161060790615b72565b600061145a610a99565b905060006114688583613ecd565b9050806114875760405162461bcd60e51b8152600401610607906158c4565b60085483146114a85760405162461bcd60e51b815260040161060790615c19565b600c5480156114da57806114bc8488613ea1565b11156114da5760405162461bcd60e51b815260040161060790615daf565b60005b848110156115fd576000600882815481106114f457fe5b6000918252602090912001546001600160a01b0316905061151361508c565b600061151e83613b8e565b915091506000611532878460c00151613777565b9050806115515760405162461bcd60e51b8152600401610607906158c4565b89898681811061155d57fe5b905060200201358111156115835760405162461bcd60e51b815260040161060790615a43565b61159784846115928585613ea1565b61402a565b836001600160a01b0316336001600160a01b03167f63982df10efd8dfaaaa0fcc7f50b2d93b7cba26ccc48adee2873220d485dc39a836040516115da9190615eed565b60405180910390a36115ed84338361420a565b5050600190920191506114dd9050565b5061160786614235565b6116113387613b84565b50506005805460ff1916905550505050565b60055461010090046001600160a01b031633146116525760405162461bcd60e51b8152600401610607906157cd565b600c8190556040517f65492266ae9a1f46497efddd24b6946862569680a511c543590d4587ca800d0590611161908390615eed565b60055460ff16156116aa5760405162461bcd60e51b815260040161060790615a99565b60058054600160ff19909116179081905561010090046001600160a01b031633146116e75760405162461bcd60e51b8152600401610607906157cd565b8083146117065760405162461bcd60e51b815260040161060790615c19565b60005b838110156117635761175b85858381811061172057fe5b905060200201602081019061173591906151f4565b84848481811061174157fe5b90506020020160208101906117569190615662565b61423e565b600101611709565b50506005805460ff19169055505050565b60055460009060ff161561179a5760405162461bcd60e51b815260040161060790615a99565b6005805460ff19166001179055600654600160a01b900460ff166117d05760405162461bcd60e51b815260040161060790615b72565b6117d861508c565b60006117e386613b8e565b9150915084600014156118085760405162461bcd60e51b815260040161060790615e5d565b6118288260c001516002670de0b6b3a76400008161182257fe5b04613777565b8511156118475760405162461bcd60e51b81526004016106079061586f565b600061186e8360c0015184606001516001600160601b0316600254600a548a60075461435b565b600c5490915080156118a5578061188760025484613ea1565b11156118a55760405162461bcd60e51b815260040161060790615daf565b858210156118c55760405162461bcd60e51b815260040161060790615943565b6118d48885611592868b613ea1565b876001600160a01b0316336001600160a01b03167f63982df10efd8dfaaaa0fcc7f50b2d93b7cba26ccc48adee2873220d485dc39a896040516119179190615eed565b60405180910390a361192882614235565b6119323383613b84565b61193d88338961420a565b506005805460ff191690559695505050505050565b61195a61508c565b60055460ff161561197d5760405162461bcd60e51b815260040161060790615a99565b506001600160a01b038116600090815260096020908152604091829020825160e081018452815460ff80821615158084526101008304821615159584019590955264ffffffffff62010000830416958301959095526001600160601b03600160381b820481166060840152600160981b8204166080830152600160f81b900490931660a08401526001015460c0830152610ce85760405162461bcd60e51b815260040161060790615b20565b3360009081526001602090815260408083206001600160a01b038616845290915281205480831115611a7e573360009081526001602090815260408083206001600160a01b0388168452909152812055611aad565b611a8881846139a3565b3360009081526001602090815260408083206001600160a01b03891684529091529020555b3360008181526001602090815260408083206001600160a01b038916808552925291829020549151909291600080516020615fa583398151915291610cb89190615eed565b60055460009060ff1615611b185760405162461bcd60e51b815260040161060790615a99565b6005805460ff19166001179055600654600160a01b900460ff16611b4e5760405162461bcd60e51b815260040161060790615b72565b600c548015611b825780611b6460025486613ea1565b1115611b825760405162461bcd60e51b815260040161060790615daf565b611b8a61508c565b6000611b9587613b8e565b915091506000611bc08360c0015184606001516001600160601b0316600254600a548b6007546143f7565b905080611bdf5760405162461bcd60e51b8152600401610607906158c4565b85811115611bff5760405162461bcd60e51b815260040161060790615a43565b611c198360c001516002670de0b6b3a76400008161182257fe5b811115611c385760405162461bcd60e51b81526004016106079061586f565b611c4788846115928585613ea1565b876001600160a01b0316336001600160a01b03167f63982df10efd8dfaaaa0fcc7f50b2d93b7cba26ccc48adee2873220d485dc39a83604051611c8a9190615eed565b60405180910390a3611c9b87614235565b611ca53388613b84565b611cb088338361420a565b6005805460ff19169055979650505050505050565b6001600160a01b031660009081526020819052604090205490565b600554600090819060ff1615611d085760405162461bcd60e51b815260040161060790615a99565b6005805460ff19166001179055600654600160a01b900460ff16611d3e5760405162461bcd60e51b815260040161060790615b72565b611d4661508c565b6000611d5189613b8e565b91509150611d5d61508c565b611d66886136a2565b9050611d828160c001516003670de0b6b3a76400008161064a57fe5b871115611da15760405162461bcd60e51b815260040161060790615af5565b6000611dd48460c0015185606001516001600160601b03168460c0015185606001516001600160601b0316600754613cdc565b905086811115611df65760405162461bcd60e51b815260040161060790615b9a565b6000611e2a8560c0015186606001516001600160601b03168560c0015186606001516001600160601b03168d600754614491565b90508a811115611e4c5760405162461bcd60e51b815260040161060790615a43565b611e578c338361420a565b611e628a338b6138b4565b611e6c8482613ea1565b9350611e798c868661402a565b846020015115611e8b5760c085018490525b611e998360c001518a6139a3565b60c084018190526001600160a01b038b16600090815260096020526040902060010155611ec6838b6139dc565b6000611ef98660c0015187606001516001600160601b03168660c0015187606001516001600160601b0316600754613cdc565b905082811015611f1b5760405162461bcd60e51b8152600401610607906158c4565b88811115611f3b5760405162461bcd60e51b815260040161060790615c61565b611f45828b613ecd565b831115611f645760405162461bcd60e51b8152600401610607906158c4565b8a6001600160a01b03168d6001600160a01b0316336001600160a01b03167f908fb5ee8f16c6bc9bc3690973819f32a4d4b10188134543c88706e0e1d43378858e604051611fb3929190615ef6565b60405180910390a46005805460ff19169055909c909b509950505050505050505050565b600181565b600554600090819060ff16156120045760405162461bcd60e51b815260040161060790615a99565b6005805460ff19166001179055600654600160a01b900460ff1661203a5760405162461bcd60e51b815260040161060790615b72565b61204261508c565b600061204d89613b8e565b9150915061205961508c565b612062886136a2565b905061207e8360c001516002670de0b6b3a76400008161182257fe5b89111561209d5760405162461bcd60e51b81526004016106079061586f565b60006120d08460c0015185606001516001600160601b03168460c0015185606001516001600160601b0316600754613cdc565b9050868111156120f25760405162461bcd60e51b815260040161060790615b9a565b60006121268560c0015186606001516001600160601b03168560c0015186606001516001600160601b03168f600754614514565b9050888110156121485760405162461bcd60e51b815260040161060790615943565b6121538c338d61420a565b61215e8a33836138b4565b612168848c613ea1565b93506121758c868661402a565b8460200151156121875760c085018490525b6121958360c00151826139a3565b60c084018190526001600160a01b038b166000908152600960205260409020600101556121c2838b6139dc565b60006121f58660c0015187606001516001600160601b03168660c0015187606001516001600160601b0316600754613cdc565b9050828110156122175760405162461bcd60e51b815260040161060790615899565b888111156122375760405162461bcd60e51b815260040161060790615c61565b6122418c83613ecd565b8311156122605760405162461bcd60e51b8152600401610607906158c4565b8a6001600160a01b03168d6001600160a01b0316336001600160a01b03167f908fb5ee8f16c6bc9bc3690973819f32a4d4b10188134543c88706e0e1d433788f86604051611fb3929190615ef6565b60055460ff16156122d25760405162461bcd60e51b815260040161060790615a99565b6005805460ff191660011790556001600160a01b03811660008181526009602052604080822090516370a0823160e01b81529092906370a082319061231b9030906004016156a5565b60206040518083038186803b15801561233357600080fd5b505afa158015612347573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236b9190615600565b825490915060ff16156124e2578154610100900460ff166124bf576001600160a01b0383166000908152600b60205260409020548082106124bd576001600160a01b0384166000818152600b6020526040808220829055855461ff001916610100178655517ff7bb8e57ffdfd9a31e7580ee84f68757f44fb4a8a913f44520d22f2da1c955e59190a2600061240083836139a3565b9050600061240e8284613ecd565b905060006124256004670de0b6b3a7640000610ff7565b8654600160381b600160981b031916600160381b6001600160601b0383169081029190911766ffffffffff00001916620100004264ffffffffff1602178855600a549192506124749190613ea1565b600a5585546040516001600160a01b03891691600080516020615f85833981519152916124b191600160381b90046001600160601b031690615f12565b60405180910390a25050505b505b6001600160a01b038316600090815260096020526040902060010181905561255f565b6006546124fa9084906001600160a01b0316836138b4565b6006546040516360b8257960e11b81526001600160a01b039091169063c1704af29061252c90869085906004016156dd565b600060405180830381600087803b15801561254657600080fd5b505af115801561255a573d6000803e3d6000fd5b505050505b50506005805460ff1916905550565b60055460009060ff16156125945760405162461bcd60e51b815260040161060790615a99565b61259c61508c565b506001600160a01b038216600090815260096020908152604091829020825160e081018452815460ff80821615158084526101008304821615159584019590955264ffffffffff62010000830416958301959095526001600160601b03600160381b820481166060840152600160981b8204166080830152600160f81b900490931660a08401526001015460c08301526126485760405162461bcd60e51b815260040161060790615b20565b80602001511561266a5760405162461bcd60e51b815260040161060790615c3e565b50506001600160a01b03166000908152600b602052604090205490565b60055460009060ff16156126ad5760405162461bcd60e51b815260040161060790615a99565b50600a5490565b60055460009060ff16156126da5760405162461bcd60e51b815260040161060790615a99565b6001600160a01b03821660009081526009602052604090205460ff166127125760405162461bcd60e51b815260040161060790615b20565b506001600160a01b0316600090815260096020526040902054600160381b90046001600160601b031690565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156109af5780601f10610984576101008083540402835291602001916109af565b600554600090819060ff16156127c75760405162461bcd60e51b815260040161060790615a99565b6008546000908190815b8181101561287857600881815481106127e657fe5b60009182526020808320909101546001600160a01b03168083526009909152604090912080549195509060ff61010090910416801561283557508054600160981b90046001600160601b031615155b1561286f576001810154600a548254612867929161286291600160381b90046001600160601b0316613ecd565b613777565b935050612878565b506001016127d1565b50600082116128995760405162461bcd60e51b8152600401610607906157f9565b5090925090509091565b60055461010090046001600160a01b031633146128d25760405162461bcd60e51b8152600401610607906157cd565b600854156128f25760405162461bcd60e51b8152600401610607906159c1565b8660028110156129145760405162461bcd60e51b815260040161060790615e05565b600a8111156129355760405162461bcd60e51b815260040161060790615847565b858114801561294357508381145b61295f5760405162461bcd60e51b815260040161060790615c19565b6000805b82811015612c3b5760008b8b8381811061297957fe5b905060200201602081019061298e91906151f4565b9050600088888481811061299e57fe5b90506020020160208101906129b39190615662565b905060008b8b858181106129c357fe5b9050602002013590506004670de0b6b3a7640000816129de57fe5b04826001600160601b03161015612a075760405162461bcd60e51b815260040161060790615bc7565b68015af1d78b58c400006001600160601b0383161115612a395760405162461bcd60e51b8152600401610607906158ed565b620f4240811015612a5c5760405162461bcd60e51b81526004016106079061596a565b6040518060e001604052806001151581526020016001151581526020014264ffffffffff168152602001836001600160601b03168152602001836001600160601b031681526020018560ff1681526020018281525060096000856001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690831515021790555060408201518160000160026101000a81548164ffffffffff021916908364ffffffffff16021790555060608201518160000160076101000a8154816001600160601b0302191690836001600160601b0316021790555060808201518160000160136101000a8154816001600160601b0302191690836001600160601b0316021790555060a082015181600001601f6101000a81548160ff021916908360ff16021790555060c082015181600101559050506008839080600181540180825580915050600190039060005260206000200160009091909190916101000a8154816001600160a01b0302191690836001600160a01b03160217905550612c2385836001600160601b0316613ea1565b9450612c3083898361420a565b505050600101612963565b50680168d28e3f00280000811115612c655760405162461bcd60e51b815260040161060790615915565b600a8190556006805460ff60a01b1916600160a01b1790556040517f183bed17d33ee5be9a47bb997aee6a152d84a34309cdb66f76301de0a40a138990600090a1612cb868056bc75e2d63100000614235565b612ccb8468056bc75e2d63100000613b84565b5050600680546001600160a01b0319166001600160a01b039290921691909117905550505050505050565b60055461010090046001600160a01b03163314612d255760405162461bcd60e51b8152600401610607906157cd565b6001600160a01b0382166000908152600960205260409020805460ff16612d5e5760405162461bcd60e51b815260040161060790615b20565b8054610100900460ff1615612d855760405162461bcd60e51b815260040161060790615c3e565b6001600160a01b0383166000908152600b602052604090819020839055517e0c7a55677231b335e6dea005fa240ac2aeafbd62f188372a7d66892b722c5290612dd190859085906156dd565b60405180910390a1505050565b6000612deb338484613db8565b50600192915050565b60055460ff1615612e175760405162461bcd60e51b815260040161060790615a99565b6005805460ff191660011790556008548114612e455760405162461bcd60e51b815260040161060790615c19565b6000612e4f610a99565b90506000612e5e856000613777565b90506000612e6c86836139a3565b90506000612e7a8285613ecd565b905080612e995760405162461bcd60e51b8152600401610607906158c4565b612ea33388613b6e565b600554612ebe9061010090046001600160a01b031684613b84565b612ec782613b78565b60005b858110156130aa57600060088281548110612ee157fe5b6000918252602090912001546001600160a01b03169050612f0061508c565b506001600160a01b038116600090815260096020908152604091829020825160e081018452815460ff80821615158352610100820481161580159584019590955264ffffffffff62010000830416958301959095526001600160601b03600160381b820481166060840152600160981b8204166080830152600160f81b900490931660a08401526001015460c083015261306e576000612fa4858360c00151613777565b905080612fc35760405162461bcd60e51b8152600401610607906158c4565b898985818110612fcf57fe5b90506020020135811015612ff55760405162461bcd60e51b815260040161060790615943565b6130038260c00151826139a3565b6001600160a01b0384166000818152600960205260409081902060010192909255905133907fe74c91552b64c2e2e7bd255639e004e693bd3e1d01cc33e65610b86afcc1ffed90613055908590615eed565b60405180910390a36130688333836138b4565b506130a0565b88888481811061307a57fe5b905060200201356000146130a05760405162461bcd60e51b815260040161060790615b47565b5050600101612eca565b50506005805460ff19169055505050505050565b60055460ff16156130e15760405162461bcd60e51b815260040161060790615a99565b60058054600160ff19909116179081905561010090046001600160a01b0316331461311e5760405162461bcd60e51b8152600401610607906157cd565b828514801561312c57508085145b6131485760405162461bcd60e51b815260040161060790615c19565b60085460608167ffffffffffffffff8111801561316457600080fd5b5060405190808252806020026020018201604052801561318e578160200160208202803683370190505b50905060608767ffffffffffffffff811180156131aa57600080fd5b506040519080825280602002602001820160405280156131e457816020015b6131d161508c565b8152602001906001900390816131c95790505b50905060005b8881101561331f57600960008b8b8481811061320257fe5b905060200201602081019061321791906151f4565b6001600160a01b031681526020808201929092526040908101600020815160e081018352815460ff808216151583526101008204811615159583019590955264ffffffffff62010000820416938201939093526001600160601b03600160381b840481166060830152600160981b8404166080820152600160f81b90920490921660a082015260019091015460c082015282518390839081106132b657fe5b60200260200101819052508181815181106132cd57fe5b60200260200101516000015115613317576001838383815181106132ed57fe5b602002602001015160a0015160ff168151811061330657fe5b911515602092830291909101909101525b6001016131ea565b5060005b838110156133755782818151811061333757fe5b602002602001015161336d5761336d6008828154811061335357fe5b60009182526020822001546001600160a01b03169061423e565b600101613323565b5060005b888110156110a95760008a8a8381811061338f57fe5b90506020020160208101906133a491906151f4565b905060008989848181106133b457fe5b90506020020160208101906133c99190615662565b90506703782dace9d900006001600160601b03821610156133ef57506703782dace9d900005b8383815181106133fb57fe5b60200260200101516000015161342d576134288289898681811061341b57fe5b9050602002013583614595565b613437565b613437828261423e565b5050600101613379565b60055460609060ff16156134675760405162461bcd60e51b815260040161060790615a99565b60088054806020026020016040519081016040528092919081815260200182805480156109af57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161349f575050505050905090565b60085490565b60055460009060ff16156134f25760405162461bcd60e51b815260040161060790615a99565b5060075490565b3360009081526001602090815260408083206001600160a01b03861684529091528120546135279083613ea1565b3360008181526001602090815260408083206001600160a01b03891680855292529182902084905590519092600080516020615fa583398151915291610a009190615eed565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60055460009060ff16156135be5760405162461bcd60e51b815260040161060790615a99565b6001600160a01b0382166000908152600960205260409020805460ff166135f75760405162461bcd60e51b815260040161060790615b20565b6001015492915050565b60055461010090046001600160a01b031633146136305760405162461bcd60e51b8152600401610607906157cd565b6040516317066a5760e21b81526001600160a01b03831690635c19a95c9061365c9084906004016156a5565b600060405180830381600087803b15801561367657600080fd5b505af115801561368a573d6000803e3d6000fd5b505050505050565b600654600160a01b900460ff1690565b6136aa61508c565b506001600160a01b038116600090815260096020908152604091829020825160e081018452815460ff80821615158084526101008304821615159584019590955264ffffffffff62010000830416958301959095526001600160601b03600160381b820481166060840152600160981b8204166080830152600160f81b900490931660a08401526001015460c08301526137565760405162461bcd60e51b815260040161060790615b20565b8060200151610ce85760405162461bcd60e51b815260040161060790615b47565b600082820283158061379157508284828161378e57fe5b04145b6137ad5760405162461bcd60e51b815260040161060790615bef565b6706f05b59d3b200008101818110156137d85760405162461bcd60e51b815260040161060790615bef565b6000670de0b6b3a7640000825b049695505050505050565b6000806137fd8786613ecd565b90506000613813670de0b6b3a7640000836139a3565b905060006138218286613777565b905060006138408761383b670de0b6b3a7640000856139a3565b613ecd565b9050600061384e8c836139a3565b9050600061385c828e613ecd565b9050600061386a8288614875565b90506000613878828e613777565b905060006138868e836139a3565b905061389f8161383b670de0b6b3a764000060006139a3565b99505050505050505050509695505050505050565b60006060846001600160a01b031663a9059cbb60e01b85856040516024016138dd9291906156dd565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161391b9190615689565b6000604051808303816000865af19150503d8060008114613958576040519150601f19603f3d011682016040523d82523d6000602084013e61395d565b606091505b509150915081801561398757508051158061398757508080602001905181019061398791906155c8565b610b935760405162461bcd60e51b815260040161060790615d07565b60008060006139b28585614928565b9150915080156139d45760405162461bcd60e51b815260040161060790615d30565b509392505050565b81608001516001600160601b031682606001516001600160601b0316111580613a0757508160200151155b80613a205750610e10826040015164ffffffffff164203105b15613a2a57613b6a565b606082015160808301516000613a536001600160601b0384166064670de0b6b3a7640000611822565b90506000613a73846001600160601b0316846001600160601b03166139a3565b905081811115613a9657613a90846001600160601b0316836139a3565b92508190505b6703782dace9d900006001600160601b03841611613ad057600a5460009350613abf90846139a3565b600a55613acb8561494d565b61368a565b613adc600a54826139a3565b600a556001600160601b038316606087018190526001600160a01b038616600081815260096020526040908190208054600160381b600160981b031916600160381b9094029390931766ffffffffff00001916620100004264ffffffffff1602179092559051600080516020615f8583398151915290613b5d908690615f12565b60405180910390a2505050505b5050565b613b6a8282614c8f565b613b8181614c9a565b50565b613b6a8282614d43565b613b9661508c565b506001600160a01b0381166000908152600960209081526040808320815160e081018352815460ff80821615158084526101008304821615159684019690965264ffffffffff62010000830416948301949094526001600160601b03600160381b820481166060840152600160981b8204166080830152600160f81b900490921660a08301526001015460c08201529190613c435760405162461bcd60e51b815260040161060790615b20565b5060c08101516020820151613cd7576001600160a01b0383166000908152600b602052604081205460c08401819052613c8a90613c8090846139a3565b8460c00151613ecd565b90506000613cae600a6004670de0b6b3a76400005b0481613ca757fe5b0483613777565b9050613cc66004670de0b6b3a76400005b0482613ea1565b6001600160601b0316606085015250505b915091565b600080613ce98787613ecd565b90506000613cf78686613ecd565b90506000613d058383613ecd565b90506000613d27670de0b6b3a764000061383b670de0b6b3a7640000896139a3565b9050613d338282613777565b9a9950505050505050505050565b60035460026000196101006001841615020190911604158015613d645750815115155b8015613d705750805115155b613d8c5760405162461bcd60e51b815260040161060790615a69565b8151613d9f9060039060208501906150c8565b508051613db39060049060208401906150c8565b505050565b6001600160a01b038316600090815260208190526040902054811115613df05760405162461bcd60e51b815260040161060790615993565b6001600160a01b038316600090815260208190526040902054613e1390826139a3565b6001600160a01b038085166000908152602081905260408082209390935590841681522054613e429082613ea1565b6001600160a01b0380841660008181526020819052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90613e94908590615eed565b60405180910390a3505050565b600082820183811015613ec65760405162461bcd60e51b815260040161060790615d5b565b9392505050565b600081613eec5760405162461bcd60e51b815260040161060790615cb2565b670de0b6b3a76400008302831580613f145750670de0b6b3a7640000848281613f1157fe5b04145b613f305760405162461bcd60e51b8152600401610607906159ea565b60028304810181811015613f565760405162461bcd60e51b8152600401610607906159ea565b60008482816137e557fe5b600080613f6e8786613ecd565b90506000613f8985612862670de0b6b3a764000060006139a3565b90506000613f9788836139a3565b90506000613fa5828a613ecd565b90506000613fc482613fbf670de0b6b3a764000088613ecd565b614875565b90506000613fd2828e613777565b90506000613fe08e836139a3565b90506000613fff613ff9670de0b6b3a76400008a6139a3565b8b613777565b905061401782612862670de0b6b3a7640000846139a3565b9f9e505050505050505050505050505050565b81602001516141dd578160c001518110614186576001600160a01b0383166000818152600b6020908152604080832083905560098252808320805461ff001916610100179055600191860191909152517ff7bb8e57ffdfd9a31e7580ee84f68757f44fb4a8a913f44520d22f2da1c955e59190a260006140ae828460c001516139a3565b905060006140c0828560c00151613ecd565b90506140d86703782dace9d9000061100a8184613777565b6001600160601b03908116606086018181526001600160a01b03881660009081526009602052604090208054600160381b600160981b031916600160381b9093029290921766ffffffffff00001916620100004264ffffffffff160217909155600a5490516141479216613ea1565b600a5560608401516040516001600160a01b03871691600080516020615f85833981519152916141779190615f12565b60405180910390a250506141d8565b6000614199613c808460c00151846139a3565b905060006141b2600a6004670de0b6b3a7640000613c9f565b90506141c76004670de0b6b3a7640000613cbf565b6001600160601b0316606085015250505b6141e7565b6141e78284614d4e565b6001600160a01b0390921660009081526009602052604090206001019190915550565b60006060846001600160a01b03166323b872dd60e01b8530866040516024016138dd939291906156b9565b613b8181614ebf565b6001600160a01b0382166000908152600960205260409020805460ff166142775760405162461bcd60e51b815260040161060790615b20565b6703782dace9d900006001600160601b03831610158061429e57506001600160601b038216155b6142ba5760405162461bcd60e51b815260040161060790615bc7565b68015af1d78b58c400006001600160601b03831611156142ec5760405162461bcd60e51b8152600401610607906158ed565b80546bffffffffffffffffffffffff60981b1916600160981b6001600160601b038416021781556040516001600160a01b038416907fc7ea88f3376e27ce6ebc2025310023327f743a8377d438258c36b166dd8b29839061434e908590615f12565b60405180910390a2505050565b6000806143688786613ecd565b90506000614387614381670de0b6b3a7640000846139a3565b85613777565b905060006143a186612862670de0b6b3a7640000856139a3565b905060006143af8b83613ea1565b905060006143bd828d613ecd565b905060006143cb8287614875565b905060006143d9828d613777565b90506143e5818d6139a3565b9e9d5050505050505050505050505050565b6000806144048786613ecd565b905060006144128786613ea1565b905060006144208289613ecd565b90506000614436670de0b6b3a764000085613ecd565b905060006144448383614875565b90506000614452828e613777565b90506000614460828f6139a3565b90506000614479613ff9670de0b6b3a76400008a6139a3565b90506140178261383b670de0b6b3a7640000846139a3565b60008061449e8588613ecd565b905060006144ac87866139a3565b905060006144ba8883613ecd565b905060006144c88285614875565b90506144dc81670de0b6b3a76400006139a3565b90506144f0670de0b6b3a7640000876139a3565b94506145056144ff8c83613777565b86613ecd565b9b9a5050505050505050505050565b6000806145218786613ecd565b90506000614537670de0b6b3a7640000856139a3565b90506145438582613777565b905060006145558a61383b8c85613ea1565b905060006145638285614875565b90506000614579670de0b6b3a7640000836139a3565b90506145858a82613777565b9c9b505050505050505050505050565b6001600160a01b03831660009081526009602052604090205460ff16156145ce5760405162461bcd60e51b815260040161060790615821565b6703782dace9d900006001600160601b03821610156145ff5760405162461bcd60e51b815260040161060790615bc7565b68015af1d78b58c400006001600160601b03821611156146315760405162461bcd60e51b8152600401610607906158ed565b620f42408210156146545760405162461bcd60e51b81526004016106079061596a565b6040518060e00160405280600115158152602001600015158152602001600064ffffffffff16815260200160006001600160601b03168152602001826001600160601b0316815260200160088054905060ff168152602001600081525060096000856001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690831515021790555060408201518160000160026101000a81548164ffffffffff021916908364ffffffffff16021790555060608201518160000160076101000a8154816001600160601b0302191690836001600160601b0316021790555060808201518160000160136101000a8154816001600160601b0302191690836001600160601b0316021790555060a082015181600001601f6101000a81548160ff021916908360ff16021790555060c082015181600101559050506008839080600181540180825580915050600190039060005260206000200160009091909190916101000a8154816001600160a01b0302191690836001600160a01b0316021790555081600b6000856001600160a01b03166001600160a01b0316815260200190815260200160002081905550826001600160a01b03167fb2daf560899f6307b318aecfb57eb2812c488da4a4c1cad2019b482fa63294ed828460405161434e929190615f26565b600060018310156148985760405162461bcd60e51b815260040161060790615cd8565b671bc16d674ec7ffff8311156148c05760405162461bcd60e51b815260040161060790615e2d565b60006148cb83614f2e565b905060006148d984836139a3565b905060006148ef866148ea85614f49565b614f57565b905081614900579250610a0c915050565b600061491187846305f5e100614fae565b905061491d8282613777565b979650505050505050565b60008082841061493e5750508082036000614946565b505081810360015b9250929050565b61495561508c565b506001600160a01b038116600090815260096020908152604091829020825160e081018452815460ff808216151583526101008204811615159483019490945264ffffffffff62010000820416948201949094526001600160601b03600160381b850481166060830152600160981b8504166080820152600160f81b90930490911660a0830181905260019091015460c0830181905260085490919060001901808214614ab35760088181548110614a0957fe5b600091825260209091200154600880546001600160a01b039092169184908110614a2f57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550816009600060088581548110614a6f57fe5b60009182526020808320909101546001600160a01b031683528201929092526040019020805460ff92909216600160f81b026001600160f81b039092169190911790555b6008805480614abe57fe5b60008281526020808220600019908401810180546001600160a01b03191690559092019092556040805160e081018252838152808301848152818301858152606083018681526080840187815260a0850188815260c086018981526001600160a01b038f81168b52600990995296909820945185549451935192519151985160ff199095169015151761ff001916610100931515939093029290921766ffffffffff000019166201000064ffffffffff9092169190910217600160381b600160981b031916600160381b6001600160601b0392831602176bffffffffffffffffffffffff60981b1916600160981b9190961602949094176001600160f81b0316600160f81b60ff909516949094029390931783555160019290920191909155600654614bed91879116856138b4565b6006546040516360b8257960e11b81526001600160a01b039091169063c1704af290614c1f90889087906004016156dd565b600060405180830381600087803b158015614c3957600080fd5b505af1158015614c4d573d6000803e3d6000fd5b505050507f12a8262eb28ee8a8c11e6cf411b3af6ce5bea42abb36e051bf0a65ae602d52ec85604051614c8091906156a5565b60405180910390a15050505050565b613b6a823083613db8565b30600090815260208190526040902054811115614cc95760405162461bcd60e51b815260040161060790615993565b30600090815260208190526040902054614ce390826139a3565b30600090815260208190526040902055600254614d0090826139a3565b60025560405160009030907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90614d38908590615eed565b60405180910390a350565b613b6a308383613db8565b81608001516001600160601b031682606001516001600160601b0316101580614d7957508160200151155b80614d925750610e10826040015164ffffffffff164203105b15614d9c57613b6a565b606082015160808301516000614dc56001600160601b0384166064670de0b6b3a7640000611822565b90506000614de5836001600160601b0316856001600160601b03166139a3565b905081811115614e0857614e02846001600160601b031683613ea1565b92508190505b614e14600a5482613ea1565b600a819055680168d28e3f002800001015614e415760405162461bcd60e51b815260040161060790615915565b6001600160601b038316606087018190526001600160a01b038616600081815260096020526040908190208054600160381b600160981b031916600160381b9094029390931766ffffffffff00001916620100004264ffffffffff1602179092559051600080516020615f8583398151915290613b5d908690615f12565b30600090815260208190526040902054614ed99082613ea1565b30600090815260208190526040902055600254614ef69082613ea1565b60025560405130906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90614d38908590615eed565b6000670de0b6b3a7640000614f4283614f49565b0292915050565b670de0b6b3a7640000900490565b60008060028306614f7057670de0b6b3a7640000614f72565b835b90506002830492505b8215613ec657614f8b8485613777565b93506002830615614fa357614fa08185613777565b90505b600283049250614f7b565b6000828180614fc587670de0b6b3a7640000614928565b9092509050670de0b6b3a764000080600060015b88841061507d576000670de0b6b3a76400008202905060008061500d8a61500885670de0b6b3a76400006139a3565b614928565b9150915061501f87612862848c613777565b965061502b8784613ecd565b96508661503a5750505061507d565b8715615044579315935b801561504e579315935b84156150655761505e86886139a3565b9550615072565b61506f8688613ea1565b95505b505050600101614fd9565b50909998505050505050505050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061510957805160ff1916838001178555615136565b82800160010185558215615136579182015b8281111561513657825182559160200191906001019061511b565b50615142929150615146565b5090565b5b808211156151425760008155600101615147565b80356001600160a01b0381168114610a0c57600080fd5b60008083601f840112615183578182fd5b50813567ffffffffffffffff81111561519a578182fd5b602083019150836020808302850101111561494657600080fd5b60008083601f8401126151c5578182fd5b50813567ffffffffffffffff8111156151dc578182fd5b60208301915083602082850101111561494657600080fd5b600060208284031215615205578081fd5b613ec6838361515b565b60008060408385031215615221578081fd5b61522b848461515b565b915061523a846020850161515b565b90509250929050565b600080600060608486031215615257578081fd5b833561526281615f6f565b9250602084013561527281615f6f565b929592945050506040919091013590565b60008060008060006080868803121561529a578081fd5b6152a4878761515b565b94506152b3876020880161515b565b935060408601359250606086013567ffffffffffffffff8111156152d5578182fd5b6152e1888289016151b4565b969995985093965092949392505050565b600080600080600060608688031215615309578081fd5b853561531481615f6f565b9450602086013567ffffffffffffffff80821115615330578283fd5b61533c89838a016151b4565b90965094506040880135915080821115615354578283fd5b506152e1888289016151b4565b60008060408385031215615373578182fd5b61537d848461515b565b946020939093013593505050565b600080600080600060a086880312156153a2578081fd5b6153ac878761515b565b9450602086013593506153c2876040880161515b565b94979396509394606081013594506080013592915050565b6000806000606084860312156153ee578283fd5b6153f8858561515b565b95602085013595506040909401359392505050565b60008060008060008060008060a0898b031215615428578283fd5b883567ffffffffffffffff8082111561543f578485fd5b61544b8c838d01615172565b909a50985060208b0135915080821115615463578485fd5b61546f8c838d01615172565b909850965060408b0135915080821115615487578485fd5b506154948b828c01615172565b90955093505060608901356154a881615f6f565b915060808901356154b881615f6f565b809150509295985092959890939650565b600080600080604085870312156154de578182fd5b843567ffffffffffffffff808211156154f5578384fd5b61550188838901615172565b90965094506020870135915080821115615519578384fd5b5061552687828801615172565b95989497509550505050565b6000806000806000806060878903121561554a578384fd5b863567ffffffffffffffff80821115615561578586fd5b61556d8a838b01615172565b90985096506020890135915080821115615585578586fd5b6155918a838b01615172565b909650945060408901359150808211156155a9578384fd5b506155b689828a01615172565b979a9699509497509295939492505050565b6000602082840312156155d9578081fd5b81518015158114613ec6578182fd5b6000602082840312156155f9578081fd5b5035919050565b600060208284031215615611578081fd5b5051919050565b60008060006040848603121561562c578081fd5b83359250602084013567ffffffffffffffff811115615649578182fd5b61565586828701615172565b9497909650939450505050565b600060208284031215615673578081fd5b81356001600160601b0381168114613ec6578182fd5b6000825161569b818460208701615f3f565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b600060018060a01b038716825285602083015284604083015260806060830152826080830152828460a084013781830160a090810191909152601f909201601f19160101949350505050565b6020808252825182820181905260009190848201906040850190845b818110156157835783516001600160a01b03168352928401929184019160010161575e565b50909695505050505050565b901515815260200190565b60006020825282518060208401526157b9816040850160208701615f3f565b601f01601f19169190910160400192915050565b60208082526012908201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604082015260600190565b6020808252600e908201526d4552525f4e4f4e455f524541445960901b604082015260600190565b6020808252600c908201526b11549497d254d7d093d5539160a21b604082015260600190565b6020808252600e908201526d4552525f4d41585f544f4b454e5360901b604082015260600190565b60208082526010908201526f4552525f4d41585f494e5f524154494f60801b604082015260600190565b60208082526011908201527022a9292fa6a0aa242fa0a8282927ac2f9960791b604082015260600190565b6020808252600f908201526e08aa4a4be9a82a890be82a0a0a49eb608b1b604082015260600190565b6020808252600e908201526d11549497d3505617d5d15251d21560921b604082015260600190565b60208082526014908201527311549497d3505617d513d5105317d5d15251d21560621b604082015260600190565b6020808252600d908201526c11549497d31253525517d3d555609a1b604082015260600190565b6020808252600f908201526e4552525f4d494e5f42414c414e434560881b604082015260600190565b60208082526014908201527311549497d25394d551919250d251539517d0905360621b604082015260600190565b6020808252600f908201526e11549497d253925512505312569151608a1b604082015260600190565b60208082526010908201526f11549497d1125597d25395115493905360821b604082015260600190565b60208082526015908201527422a9292fa12a27a5a2a72fa120a22fa1a0a62622a960591b604082015260600190565b6020808252600c908201526b22a9292fa624a6a4aa2fa4a760a11b604082015260600190565b60208082526016908201527511549497d09513d2d15397d25392551250531256915160521b604082015260600190565b6020808252600b908201526a4552525f5245454e54525960a81b604082015260600190565b60208082526018908201527f4552525f494e53554646494349454e545f5041594d454e540000000000000000604082015260600190565b6020808252601190820152704552525f4d41585f4f55545f524154494f60781b604082015260600190565b6020808252600d908201526c11549497d393d517d093d55391609a1b604082015260600190565b6020808252601190820152704552525f4f55545f4e4f545f524541445960781b604082015260600190565b6020808252600e908201526d4552525f4e4f545f5055424c494360901b604082015260600190565b6020808252601390820152724552525f4241445f4c494d49545f505249434560681b604082015260600190565b6020808252600e908201526d11549497d3525397d5d15251d21560921b604082015260600190565b60208082526010908201526f4552525f4d554c5f4f564552464c4f5760801b604082015260600190565b6020808252600b908201526a22a9292fa0a9292fa622a760a91b604082015260600190565b6020808252600990820152684552525f524541445960b81b604082015260600190565b6020808252600f908201526e4552525f4c494d49545f505249434560881b604082015260600190565b6020808252600e908201526d11549497d0d3d3919251d554915160921b604082015260600190565b6020808252600c908201526b4552525f4449565f5a45524f60a01b604082015260600190565b6020808252601590820152744552525f42504f575f424153455f544f4f5f4c4f5760581b604082015260600190565b6020808252600f908201526e4552525f45524332305f46414c534560881b604082015260600190565b6020808252601190820152704552525f5355425f554e444552464c4f5760781b604082015260600190565b60208082526010908201526f4552525f4144445f4f564552464c4f5760801b604082015260600190565b60208082526010908201526f4552525f4e554c4c5f4144445245535360801b604082015260600190565b6020808252601390820152724552525f4d41585f504f4f4c5f544f4b454e5360681b604082015260600190565b6020808252600f908201526e4552525f494e56414c49445f46454560881b604082015260600190565b6020808252600e908201526d4552525f4d494e5f544f4b454e5360901b604082015260600190565b60208082526016908201527508aa4a4be84a09eaebe8482a68abea89e9ebe90928e960531b604082015260600190565b6020808252600b908201526a22a9292fad22a927afa4a760a91b604082015260600190565b600060e08201905082511515825260208301511515602083015264ffffffffff604084015116604083015260608301516001600160601b038082166060850152806080860151166080850152505060ff60a08401511660a083015260c083015160c083015292915050565b90815260200190565b918252602082015260400190565b60ff91909116815260200190565b6001600160601b0391909116815260200190565b6001600160601b03929092168252602082015260400190565b60005b83811015615f5a578181015183820152602001615f42565b83811115615f69576000848401525b50505050565b6001600160a01b0381168114613b8157600080fdfe21b12aed5d425f5675450ffeeae01039085e5323974c3099e1828155d9b51e778c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a264697066735822122086dfc7f00db3307780c9ea65c3c17ec36e609e7603a619408e81e237acf577bb64736f6c634300060c0033",
      "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061028a5760003560e01c806370a082311161015c578063a49c44d7116100ce578063d4cadf6811610087578063d4cadf6814610585578063d73dd6231461058d578063dd62ed3e146105a0578063f8b2cb4f146105b3578063f8b5db09146105c6578063fde924f7146105d95761028a565b8063a49c44d714610529578063a9059cbb1461053c578063b02f0b731461054f578063c3f4681014610562578063cc77828d14610575578063cd2ed8fb1461057d5761028a565b806391bfa2bf1161012057806391bfa2bf146104ca578063936c3477146104dd578063948d8ce6146104e557806395d89b41146104f857806398836f0814610500578063a20cfa75146105165761028a565b806370a08231146104685780637c5e9ea41461047b5780638025e3031461049c5780638201aa3f146104a45780638c28cbe8146104b75761028a565b8063313ce56711610200578063534d4f3d116101b9578063534d4f3d146103e95780635d5e8ce7146103fc5780635db342771461040f57806364c7d6611461042257806366188463146104425780636d06dfa0146104555761028a565b8063313ce5671461038057806334e199071461039557806346ab38f1146103a857806346ecfbd6146103bb5780634aa4e0b5146103c35780634f69c0d4146103d65761028a565b806318160ddd1161025257806318160ddd1461031557806319f0f8491461031d57806323b872dd146103325780632f37b624146103455780633018205f146103585780633043ffc91461036d5761028a565b806302c967481461028f578063039209af146102b857806306fdde03146102cd578063095ea7b3146102e257806315e84af914610302575b600080fd5b6102a261029d3660046153da565b6105e1565b6040516102af9190615eed565b60405180910390f35b6102c06107bc565b6040516102af9190615742565b6102d5610923565b6040516102af919061579a565b6102f56102f0366004615361565b6109b9565b6040516102af919061578f565b6102a261031036600461520f565b610a12565b6102a2610a99565b61033061032b3660046152f2565b610a9f565b005b6102f5610340366004615243565b610b9a565b6102f56103533660046151f4565b610ccb565b610360610ced565b6040516102af91906156a5565b61033061037b366004615283565b610d01565b6103886110bf565b6040516102af9190615f04565b6103306103a33660046155e8565b6110c4565b6102a26103b63660046153da565b61116c565b6102a26112e4565b6102a26103d13660046151f4565b6112ea565b6103306103e4366004615618565b6113f7565b6103306103f73660046155e8565b611623565b61033061040a3660046154c9565b611687565b6102a261041d3660046153da565b611774565b6104356104303660046151f4565b611952565b6040516102af9190615e82565b6102f5610450366004615361565b611a29565b6102a26104633660046153da565b611af2565b6102a26104763660046151f4565b611cc5565b61048e61048936600461538b565b611ce0565b6040516102af929190615ef6565b6102a2611fd7565b61048e6104b236600461538b565b611fdc565b6103306104c53660046151f4565b6122af565b6102a26104d83660046151f4565b61256e565b6102a2612687565b6102a26104f33660046151f4565b6126b4565b6102d561273e565b61050861279f565b6040516102af9291906156dd565b61033061052436600461540d565b6128a3565b610330610537366004615361565b612cf6565b6102f561054a366004615361565b612dde565b61033061055d366004615618565b612df4565b610330610570366004615532565b6130be565b6102c0613441565b6102a26134c6565b6102a26134cc565b6102f561059b366004615361565b6134f9565b6102a26105ae36600461520f565b61356d565b6102a26105c13660046151f4565b613598565b6103306105d436600461520f565b613601565b6102f5613692565b60055460009060ff16156106105760405162461bcd60e51b815260040161060790615a99565b60405180910390fd5b6005805460ff1916600117905561062561508c565b61062e856136a2565b90506106538160c001516003670de0b6b3a76400008161064a57fe5b04600101613777565b8411156106725760405162461bcd60e51b815260040161060790615af5565b60006106998260c0015183606001516001600160601b0316600254600a54896007546137f0565b9050806106b85760405162461bcd60e51b8152600401610607906158c4565b838111156106d85760405162461bcd60e51b815260040161060790615a43565b6106e38633876138b4565b6106f18260c00151866139a3565b6001600160a01b03871660009081526009602052604090206001015561071782876139dc565b6000610724826000613777565b9050866001600160a01b0316336001600160a01b03167fe74c91552b64c2e2e7bd255639e004e693bd3e1d01cc33e65610b86afcc1ffed886040516107699190615eed565b60405180910390a361077b3383613b6e565b61078d61078883836139a3565b613b78565b6005546107a89061010090046001600160a01b031682613b84565b506005805460ff1916905595945050505050565b60055460609060ff16156107e25760405162461bcd60e51b815260040161060790615a99565b6060600880548060200260200160405190810160405280929190818152602001828054801561083a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161081c575b50505050509050805167ffffffffffffffff8111801561085957600080fd5b50604051908082528060200260200182016040528015610883578160200160208202803683370190505b5091506000805b835181101561091c5760008382815181106108a157fe5b6020908102919091018101516001600160a01b03811660009081526009909252604090912054909150600160981b90046001600160601b03161561091357808584806001019550815181106108f257fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b5060010161088a565b5082525090565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156109af5780601f10610984576101008083540402835291602001916109af565b820191906000526020600020905b81548152906001019060200180831161099257829003601f168201915b5050505050905090565b3360008181526001602090815260408083206001600160a01b03871680855292528083208590555191929091600080516020615fa583398151915290610a00908690615eed565b60405180910390a35060015b92915050565b60055460009060ff1615610a385760405162461bcd60e51b815260040161060790615a99565b610a4061508c565b610a4984613b8e565b509050610a5461508c565b610a5d846136a2565b9050610a908260c0015183606001516001600160601b03168360c0015184606001516001600160601b0316600754613cdc565b95945050505050565b60025490565b60055461010090046001600160a01b031615610acd5760405162461bcd60e51b815260040161060790615c8a565b6001600160a01b038516610af35760405162461bcd60e51b815260040161060790615d85565b60058054610100600160a81b0319166101006001600160a01b038816021790556028670de0b6b3a764000004600755604080516020601f8601819004810282018101909252848152610b9391869086908190840183828082843760009201919091525050604080516020601f88018190048102820181019092528681529250869150859081908401838280828437600092019190915250613d4192505050565b5050505050565b6000336001600160a01b0385161480610bd657506001600160a01b03841660009081526001602090815260408083203384529091529020548211155b610bf25760405162461bcd60e51b815260040161060790615a14565b610bfd848484613db8565b336001600160a01b03851614801590610c3b57506001600160a01b038416600090815260016020908152604080832033845290915290205460001914155b15610cc1576001600160a01b0384166000908152600160209081526040808320338452909152902054610c6e90836139a3565b6001600160a01b038581166000908152600160209081526040808320338085529252918290208490559051918616929091600080516020615fa583398151915291610cb891615eed565b60405180910390a35b5060019392505050565b6001600160a01b03811660009081526009602052604090205460ff165b919050565b60055461010090046001600160a01b031690565b60055460ff1615610d245760405162461bcd60e51b815260040161060790615a99565b6005805460ff191660011790556001600160a01b0384166000908152600960205260409020805460ff16610d6a5760405162461bcd60e51b815260040161060790615b20565b6040516370a0823160e01b81526000906001600160a01b038716906370a0823190610d999030906004016156a5565b60206040518083038186803b158015610db157600080fd5b505afa158015610dc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de99190615600565b905084811015610e0b5760405162461bcd60e51b815260040161060790615993565b610e168688876138b4565b6000610e2482600754613777565b90506000610e328783613ea1565b604051630ed1000360e31b81529091506001600160a01b038a1690637688001890610e69908b908b9086908c908c906004016156f6565b600060405180830381600087803b158015610e8357600080fd5b505af1158015610e97573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b038b1691506370a0823190610eca9030906004016156a5565b60206040518083038186803b158015610ee257600080fd5b505afa158015610ef6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1a9190615600565b90508381118015610f2b5750818110155b610f475760405162461bcd60e51b815260040161060790615abe565b600185018190558454610100900460ff166110a9576001600160a01b0389166000908152600b60205260409020548082106110a7576001600160a01b038a166000818152600b6020526040808220829055885461ff001916610100178955517ff7bb8e57ffdfd9a31e7580ee84f68757f44fb4a8a913f44520d22f2da1c955e59190a26000610fd683836139a3565b90506000610fe48284613ecd565b9050600061100f6004670de0b6b3a76400005b0461100a6703782dace9d9000085613777565b613ea1565b8954600160381b600160981b031916600160381b6001600160601b0383169081029190911766ffffffffff00001916620100004264ffffffffff1602178b55600a5491925061105e9190613ea1565b600a5588546040516001600160a01b038f1691600080516020615f858339815191529161109b91600160381b90046001600160601b031690615f12565b60405180910390a25050505b505b50506005805460ff191690555050505050505050565b601290565b60055461010090046001600160a01b031633146110f35760405162461bcd60e51b8152600401610607906157cd565b64e8d4a510008110801590611110575067016345785d8a00008111155b61112c5760405162461bcd60e51b815260040161060790615ddc565b60078190556040517fccfe595973efc7c1f6c29e31974d380470b9431d7770290185b7129419c7e63e90611161908390615eed565b60405180910390a150565b60055460009060ff16156111925760405162461bcd60e51b815260040161060790615a99565b6005805460ff191660011790556111a761508c565b6111b0856136a2565b905060006111d98260c0015183606001516001600160601b0316600254600a5489600754613f61565b9050838110156111fb5760405162461bcd60e51b815260040161060790615943565b6112158260c001516003670de0b6b3a76400008161064a57fe5b8111156112345760405162461bcd60e51b815260040161060790615af5565b61123f8633836138b4565b61124d8260c00151826139a3565b6001600160a01b03871660009081526009602052604090206001015561127382876139dc565b6000611280866000613777565b9050866001600160a01b0316336001600160a01b03167fe74c91552b64c2e2e7bd255639e004e693bd3e1d01cc33e65610b86afcc1ffed846040516112c59190615eed565b60405180910390a36112d73387613b6e565b61078d61078887836139a3565b600c5490565b60055460009060ff16156113105760405162461bcd60e51b815260040161060790615a99565b61131861508c565b506001600160a01b038216600090815260096020908152604091829020825160e081018452815460ff80821615158084526101008304821615159584019590955264ffffffffff62010000830416958301959095526001600160601b03600160381b820481166060840152600160981b8204166080830152600160f81b900490931660a08401526001015460c08301526113c45760405162461bcd60e51b815260040161060790615b20565b80602001516113ed5750506001600160a01b0381166000908152600b6020526040902054610ce8565b60c0015192915050565b60055460ff161561141a5760405162461bcd60e51b815260040161060790615a99565b6005805460ff19166001179055600654600160a01b900460ff166114505760405162461bcd60e51b815260040161060790615b72565b600061145a610a99565b905060006114688583613ecd565b9050806114875760405162461bcd60e51b8152600401610607906158c4565b60085483146114a85760405162461bcd60e51b815260040161060790615c19565b600c5480156114da57806114bc8488613ea1565b11156114da5760405162461bcd60e51b815260040161060790615daf565b60005b848110156115fd576000600882815481106114f457fe5b6000918252602090912001546001600160a01b0316905061151361508c565b600061151e83613b8e565b915091506000611532878460c00151613777565b9050806115515760405162461bcd60e51b8152600401610607906158c4565b89898681811061155d57fe5b905060200201358111156115835760405162461bcd60e51b815260040161060790615a43565b61159784846115928585613ea1565b61402a565b836001600160a01b0316336001600160a01b03167f63982df10efd8dfaaaa0fcc7f50b2d93b7cba26ccc48adee2873220d485dc39a836040516115da9190615eed565b60405180910390a36115ed84338361420a565b5050600190920191506114dd9050565b5061160786614235565b6116113387613b84565b50506005805460ff1916905550505050565b60055461010090046001600160a01b031633146116525760405162461bcd60e51b8152600401610607906157cd565b600c8190556040517f65492266ae9a1f46497efddd24b6946862569680a511c543590d4587ca800d0590611161908390615eed565b60055460ff16156116aa5760405162461bcd60e51b815260040161060790615a99565b60058054600160ff19909116179081905561010090046001600160a01b031633146116e75760405162461bcd60e51b8152600401610607906157cd565b8083146117065760405162461bcd60e51b815260040161060790615c19565b60005b838110156117635761175b85858381811061172057fe5b905060200201602081019061173591906151f4565b84848481811061174157fe5b90506020020160208101906117569190615662565b61423e565b600101611709565b50506005805460ff19169055505050565b60055460009060ff161561179a5760405162461bcd60e51b815260040161060790615a99565b6005805460ff19166001179055600654600160a01b900460ff166117d05760405162461bcd60e51b815260040161060790615b72565b6117d861508c565b60006117e386613b8e565b9150915084600014156118085760405162461bcd60e51b815260040161060790615e5d565b6118288260c001516002670de0b6b3a76400008161182257fe5b04613777565b8511156118475760405162461bcd60e51b81526004016106079061586f565b600061186e8360c0015184606001516001600160601b0316600254600a548a60075461435b565b600c5490915080156118a5578061188760025484613ea1565b11156118a55760405162461bcd60e51b815260040161060790615daf565b858210156118c55760405162461bcd60e51b815260040161060790615943565b6118d48885611592868b613ea1565b876001600160a01b0316336001600160a01b03167f63982df10efd8dfaaaa0fcc7f50b2d93b7cba26ccc48adee2873220d485dc39a896040516119179190615eed565b60405180910390a361192882614235565b6119323383613b84565b61193d88338961420a565b506005805460ff191690559695505050505050565b61195a61508c565b60055460ff161561197d5760405162461bcd60e51b815260040161060790615a99565b506001600160a01b038116600090815260096020908152604091829020825160e081018452815460ff80821615158084526101008304821615159584019590955264ffffffffff62010000830416958301959095526001600160601b03600160381b820481166060840152600160981b8204166080830152600160f81b900490931660a08401526001015460c0830152610ce85760405162461bcd60e51b815260040161060790615b20565b3360009081526001602090815260408083206001600160a01b038616845290915281205480831115611a7e573360009081526001602090815260408083206001600160a01b0388168452909152812055611aad565b611a8881846139a3565b3360009081526001602090815260408083206001600160a01b03891684529091529020555b3360008181526001602090815260408083206001600160a01b038916808552925291829020549151909291600080516020615fa583398151915291610cb89190615eed565b60055460009060ff1615611b185760405162461bcd60e51b815260040161060790615a99565b6005805460ff19166001179055600654600160a01b900460ff16611b4e5760405162461bcd60e51b815260040161060790615b72565b600c548015611b825780611b6460025486613ea1565b1115611b825760405162461bcd60e51b815260040161060790615daf565b611b8a61508c565b6000611b9587613b8e565b915091506000611bc08360c0015184606001516001600160601b0316600254600a548b6007546143f7565b905080611bdf5760405162461bcd60e51b8152600401610607906158c4565b85811115611bff5760405162461bcd60e51b815260040161060790615a43565b611c198360c001516002670de0b6b3a76400008161182257fe5b811115611c385760405162461bcd60e51b81526004016106079061586f565b611c4788846115928585613ea1565b876001600160a01b0316336001600160a01b03167f63982df10efd8dfaaaa0fcc7f50b2d93b7cba26ccc48adee2873220d485dc39a83604051611c8a9190615eed565b60405180910390a3611c9b87614235565b611ca53388613b84565b611cb088338361420a565b6005805460ff19169055979650505050505050565b6001600160a01b031660009081526020819052604090205490565b600554600090819060ff1615611d085760405162461bcd60e51b815260040161060790615a99565b6005805460ff19166001179055600654600160a01b900460ff16611d3e5760405162461bcd60e51b815260040161060790615b72565b611d4661508c565b6000611d5189613b8e565b91509150611d5d61508c565b611d66886136a2565b9050611d828160c001516003670de0b6b3a76400008161064a57fe5b871115611da15760405162461bcd60e51b815260040161060790615af5565b6000611dd48460c0015185606001516001600160601b03168460c0015185606001516001600160601b0316600754613cdc565b905086811115611df65760405162461bcd60e51b815260040161060790615b9a565b6000611e2a8560c0015186606001516001600160601b03168560c0015186606001516001600160601b03168d600754614491565b90508a811115611e4c5760405162461bcd60e51b815260040161060790615a43565b611e578c338361420a565b611e628a338b6138b4565b611e6c8482613ea1565b9350611e798c868661402a565b846020015115611e8b5760c085018490525b611e998360c001518a6139a3565b60c084018190526001600160a01b038b16600090815260096020526040902060010155611ec6838b6139dc565b6000611ef98660c0015187606001516001600160601b03168660c0015187606001516001600160601b0316600754613cdc565b905082811015611f1b5760405162461bcd60e51b8152600401610607906158c4565b88811115611f3b5760405162461bcd60e51b815260040161060790615c61565b611f45828b613ecd565b831115611f645760405162461bcd60e51b8152600401610607906158c4565b8a6001600160a01b03168d6001600160a01b0316336001600160a01b03167f908fb5ee8f16c6bc9bc3690973819f32a4d4b10188134543c88706e0e1d43378858e604051611fb3929190615ef6565b60405180910390a46005805460ff19169055909c909b509950505050505050505050565b600181565b600554600090819060ff16156120045760405162461bcd60e51b815260040161060790615a99565b6005805460ff19166001179055600654600160a01b900460ff1661203a5760405162461bcd60e51b815260040161060790615b72565b61204261508c565b600061204d89613b8e565b9150915061205961508c565b612062886136a2565b905061207e8360c001516002670de0b6b3a76400008161182257fe5b89111561209d5760405162461bcd60e51b81526004016106079061586f565b60006120d08460c0015185606001516001600160601b03168460c0015185606001516001600160601b0316600754613cdc565b9050868111156120f25760405162461bcd60e51b815260040161060790615b9a565b60006121268560c0015186606001516001600160601b03168560c0015186606001516001600160601b03168f600754614514565b9050888110156121485760405162461bcd60e51b815260040161060790615943565b6121538c338d61420a565b61215e8a33836138b4565b612168848c613ea1565b93506121758c868661402a565b8460200151156121875760c085018490525b6121958360c00151826139a3565b60c084018190526001600160a01b038b166000908152600960205260409020600101556121c2838b6139dc565b60006121f58660c0015187606001516001600160601b03168660c0015187606001516001600160601b0316600754613cdc565b9050828110156122175760405162461bcd60e51b815260040161060790615899565b888111156122375760405162461bcd60e51b815260040161060790615c61565b6122418c83613ecd565b8311156122605760405162461bcd60e51b8152600401610607906158c4565b8a6001600160a01b03168d6001600160a01b0316336001600160a01b03167f908fb5ee8f16c6bc9bc3690973819f32a4d4b10188134543c88706e0e1d433788f86604051611fb3929190615ef6565b60055460ff16156122d25760405162461bcd60e51b815260040161060790615a99565b6005805460ff191660011790556001600160a01b03811660008181526009602052604080822090516370a0823160e01b81529092906370a082319061231b9030906004016156a5565b60206040518083038186803b15801561233357600080fd5b505afa158015612347573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236b9190615600565b825490915060ff16156124e2578154610100900460ff166124bf576001600160a01b0383166000908152600b60205260409020548082106124bd576001600160a01b0384166000818152600b6020526040808220829055855461ff001916610100178655517ff7bb8e57ffdfd9a31e7580ee84f68757f44fb4a8a913f44520d22f2da1c955e59190a2600061240083836139a3565b9050600061240e8284613ecd565b905060006124256004670de0b6b3a7640000610ff7565b8654600160381b600160981b031916600160381b6001600160601b0383169081029190911766ffffffffff00001916620100004264ffffffffff1602178855600a549192506124749190613ea1565b600a5585546040516001600160a01b03891691600080516020615f85833981519152916124b191600160381b90046001600160601b031690615f12565b60405180910390a25050505b505b6001600160a01b038316600090815260096020526040902060010181905561255f565b6006546124fa9084906001600160a01b0316836138b4565b6006546040516360b8257960e11b81526001600160a01b039091169063c1704af29061252c90869085906004016156dd565b600060405180830381600087803b15801561254657600080fd5b505af115801561255a573d6000803e3d6000fd5b505050505b50506005805460ff1916905550565b60055460009060ff16156125945760405162461bcd60e51b815260040161060790615a99565b61259c61508c565b506001600160a01b038216600090815260096020908152604091829020825160e081018452815460ff80821615158084526101008304821615159584019590955264ffffffffff62010000830416958301959095526001600160601b03600160381b820481166060840152600160981b8204166080830152600160f81b900490931660a08401526001015460c08301526126485760405162461bcd60e51b815260040161060790615b20565b80602001511561266a5760405162461bcd60e51b815260040161060790615c3e565b50506001600160a01b03166000908152600b602052604090205490565b60055460009060ff16156126ad5760405162461bcd60e51b815260040161060790615a99565b50600a5490565b60055460009060ff16156126da5760405162461bcd60e51b815260040161060790615a99565b6001600160a01b03821660009081526009602052604090205460ff166127125760405162461bcd60e51b815260040161060790615b20565b506001600160a01b0316600090815260096020526040902054600160381b90046001600160601b031690565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156109af5780601f10610984576101008083540402835291602001916109af565b600554600090819060ff16156127c75760405162461bcd60e51b815260040161060790615a99565b6008546000908190815b8181101561287857600881815481106127e657fe5b60009182526020808320909101546001600160a01b03168083526009909152604090912080549195509060ff61010090910416801561283557508054600160981b90046001600160601b031615155b1561286f576001810154600a548254612867929161286291600160381b90046001600160601b0316613ecd565b613777565b935050612878565b506001016127d1565b50600082116128995760405162461bcd60e51b8152600401610607906157f9565b5090925090509091565b60055461010090046001600160a01b031633146128d25760405162461bcd60e51b8152600401610607906157cd565b600854156128f25760405162461bcd60e51b8152600401610607906159c1565b8660028110156129145760405162461bcd60e51b815260040161060790615e05565b600a8111156129355760405162461bcd60e51b815260040161060790615847565b858114801561294357508381145b61295f5760405162461bcd60e51b815260040161060790615c19565b6000805b82811015612c3b5760008b8b8381811061297957fe5b905060200201602081019061298e91906151f4565b9050600088888481811061299e57fe5b90506020020160208101906129b39190615662565b905060008b8b858181106129c357fe5b9050602002013590506004670de0b6b3a7640000816129de57fe5b04826001600160601b03161015612a075760405162461bcd60e51b815260040161060790615bc7565b68015af1d78b58c400006001600160601b0383161115612a395760405162461bcd60e51b8152600401610607906158ed565b620f4240811015612a5c5760405162461bcd60e51b81526004016106079061596a565b6040518060e001604052806001151581526020016001151581526020014264ffffffffff168152602001836001600160601b03168152602001836001600160601b031681526020018560ff1681526020018281525060096000856001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690831515021790555060408201518160000160026101000a81548164ffffffffff021916908364ffffffffff16021790555060608201518160000160076101000a8154816001600160601b0302191690836001600160601b0316021790555060808201518160000160136101000a8154816001600160601b0302191690836001600160601b0316021790555060a082015181600001601f6101000a81548160ff021916908360ff16021790555060c082015181600101559050506008839080600181540180825580915050600190039060005260206000200160009091909190916101000a8154816001600160a01b0302191690836001600160a01b03160217905550612c2385836001600160601b0316613ea1565b9450612c3083898361420a565b505050600101612963565b50680168d28e3f00280000811115612c655760405162461bcd60e51b815260040161060790615915565b600a8190556006805460ff60a01b1916600160a01b1790556040517f183bed17d33ee5be9a47bb997aee6a152d84a34309cdb66f76301de0a40a138990600090a1612cb868056bc75e2d63100000614235565b612ccb8468056bc75e2d63100000613b84565b5050600680546001600160a01b0319166001600160a01b039290921691909117905550505050505050565b60055461010090046001600160a01b03163314612d255760405162461bcd60e51b8152600401610607906157cd565b6001600160a01b0382166000908152600960205260409020805460ff16612d5e5760405162461bcd60e51b815260040161060790615b20565b8054610100900460ff1615612d855760405162461bcd60e51b815260040161060790615c3e565b6001600160a01b0383166000908152600b602052604090819020839055517e0c7a55677231b335e6dea005fa240ac2aeafbd62f188372a7d66892b722c5290612dd190859085906156dd565b60405180910390a1505050565b6000612deb338484613db8565b50600192915050565b60055460ff1615612e175760405162461bcd60e51b815260040161060790615a99565b6005805460ff191660011790556008548114612e455760405162461bcd60e51b815260040161060790615c19565b6000612e4f610a99565b90506000612e5e856000613777565b90506000612e6c86836139a3565b90506000612e7a8285613ecd565b905080612e995760405162461bcd60e51b8152600401610607906158c4565b612ea33388613b6e565b600554612ebe9061010090046001600160a01b031684613b84565b612ec782613b78565b60005b858110156130aa57600060088281548110612ee157fe5b6000918252602090912001546001600160a01b03169050612f0061508c565b506001600160a01b038116600090815260096020908152604091829020825160e081018452815460ff80821615158352610100820481161580159584019590955264ffffffffff62010000830416958301959095526001600160601b03600160381b820481166060840152600160981b8204166080830152600160f81b900490931660a08401526001015460c083015261306e576000612fa4858360c00151613777565b905080612fc35760405162461bcd60e51b8152600401610607906158c4565b898985818110612fcf57fe5b90506020020135811015612ff55760405162461bcd60e51b815260040161060790615943565b6130038260c00151826139a3565b6001600160a01b0384166000818152600960205260409081902060010192909255905133907fe74c91552b64c2e2e7bd255639e004e693bd3e1d01cc33e65610b86afcc1ffed90613055908590615eed565b60405180910390a36130688333836138b4565b506130a0565b88888481811061307a57fe5b905060200201356000146130a05760405162461bcd60e51b815260040161060790615b47565b5050600101612eca565b50506005805460ff19169055505050505050565b60055460ff16156130e15760405162461bcd60e51b815260040161060790615a99565b60058054600160ff19909116179081905561010090046001600160a01b0316331461311e5760405162461bcd60e51b8152600401610607906157cd565b828514801561312c57508085145b6131485760405162461bcd60e51b815260040161060790615c19565b60085460608167ffffffffffffffff8111801561316457600080fd5b5060405190808252806020026020018201604052801561318e578160200160208202803683370190505b50905060608767ffffffffffffffff811180156131aa57600080fd5b506040519080825280602002602001820160405280156131e457816020015b6131d161508c565b8152602001906001900390816131c95790505b50905060005b8881101561331f57600960008b8b8481811061320257fe5b905060200201602081019061321791906151f4565b6001600160a01b031681526020808201929092526040908101600020815160e081018352815460ff808216151583526101008204811615159583019590955264ffffffffff62010000820416938201939093526001600160601b03600160381b840481166060830152600160981b8404166080820152600160f81b90920490921660a082015260019091015460c082015282518390839081106132b657fe5b60200260200101819052508181815181106132cd57fe5b60200260200101516000015115613317576001838383815181106132ed57fe5b602002602001015160a0015160ff168151811061330657fe5b911515602092830291909101909101525b6001016131ea565b5060005b838110156133755782818151811061333757fe5b602002602001015161336d5761336d6008828154811061335357fe5b60009182526020822001546001600160a01b03169061423e565b600101613323565b5060005b888110156110a95760008a8a8381811061338f57fe5b90506020020160208101906133a491906151f4565b905060008989848181106133b457fe5b90506020020160208101906133c99190615662565b90506703782dace9d900006001600160601b03821610156133ef57506703782dace9d900005b8383815181106133fb57fe5b60200260200101516000015161342d576134288289898681811061341b57fe5b9050602002013583614595565b613437565b613437828261423e565b5050600101613379565b60055460609060ff16156134675760405162461bcd60e51b815260040161060790615a99565b60088054806020026020016040519081016040528092919081815260200182805480156109af57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161349f575050505050905090565b60085490565b60055460009060ff16156134f25760405162461bcd60e51b815260040161060790615a99565b5060075490565b3360009081526001602090815260408083206001600160a01b03861684529091528120546135279083613ea1565b3360008181526001602090815260408083206001600160a01b03891680855292529182902084905590519092600080516020615fa583398151915291610a009190615eed565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60055460009060ff16156135be5760405162461bcd60e51b815260040161060790615a99565b6001600160a01b0382166000908152600960205260409020805460ff166135f75760405162461bcd60e51b815260040161060790615b20565b6001015492915050565b60055461010090046001600160a01b031633146136305760405162461bcd60e51b8152600401610607906157cd565b6040516317066a5760e21b81526001600160a01b03831690635c19a95c9061365c9084906004016156a5565b600060405180830381600087803b15801561367657600080fd5b505af115801561368a573d6000803e3d6000fd5b505050505050565b600654600160a01b900460ff1690565b6136aa61508c565b506001600160a01b038116600090815260096020908152604091829020825160e081018452815460ff80821615158084526101008304821615159584019590955264ffffffffff62010000830416958301959095526001600160601b03600160381b820481166060840152600160981b8204166080830152600160f81b900490931660a08401526001015460c08301526137565760405162461bcd60e51b815260040161060790615b20565b8060200151610ce85760405162461bcd60e51b815260040161060790615b47565b600082820283158061379157508284828161378e57fe5b04145b6137ad5760405162461bcd60e51b815260040161060790615bef565b6706f05b59d3b200008101818110156137d85760405162461bcd60e51b815260040161060790615bef565b6000670de0b6b3a7640000825b049695505050505050565b6000806137fd8786613ecd565b90506000613813670de0b6b3a7640000836139a3565b905060006138218286613777565b905060006138408761383b670de0b6b3a7640000856139a3565b613ecd565b9050600061384e8c836139a3565b9050600061385c828e613ecd565b9050600061386a8288614875565b90506000613878828e613777565b905060006138868e836139a3565b905061389f8161383b670de0b6b3a764000060006139a3565b99505050505050505050509695505050505050565b60006060846001600160a01b031663a9059cbb60e01b85856040516024016138dd9291906156dd565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161391b9190615689565b6000604051808303816000865af19150503d8060008114613958576040519150601f19603f3d011682016040523d82523d6000602084013e61395d565b606091505b509150915081801561398757508051158061398757508080602001905181019061398791906155c8565b610b935760405162461bcd60e51b815260040161060790615d07565b60008060006139b28585614928565b9150915080156139d45760405162461bcd60e51b815260040161060790615d30565b509392505050565b81608001516001600160601b031682606001516001600160601b0316111580613a0757508160200151155b80613a205750610e10826040015164ffffffffff164203105b15613a2a57613b6a565b606082015160808301516000613a536001600160601b0384166064670de0b6b3a7640000611822565b90506000613a73846001600160601b0316846001600160601b03166139a3565b905081811115613a9657613a90846001600160601b0316836139a3565b92508190505b6703782dace9d900006001600160601b03841611613ad057600a5460009350613abf90846139a3565b600a55613acb8561494d565b61368a565b613adc600a54826139a3565b600a556001600160601b038316606087018190526001600160a01b038616600081815260096020526040908190208054600160381b600160981b031916600160381b9094029390931766ffffffffff00001916620100004264ffffffffff1602179092559051600080516020615f8583398151915290613b5d908690615f12565b60405180910390a2505050505b5050565b613b6a8282614c8f565b613b8181614c9a565b50565b613b6a8282614d43565b613b9661508c565b506001600160a01b0381166000908152600960209081526040808320815160e081018352815460ff80821615158084526101008304821615159684019690965264ffffffffff62010000830416948301949094526001600160601b03600160381b820481166060840152600160981b8204166080830152600160f81b900490921660a08301526001015460c08201529190613c435760405162461bcd60e51b815260040161060790615b20565b5060c08101516020820151613cd7576001600160a01b0383166000908152600b602052604081205460c08401819052613c8a90613c8090846139a3565b8460c00151613ecd565b90506000613cae600a6004670de0b6b3a76400005b0481613ca757fe5b0483613777565b9050613cc66004670de0b6b3a76400005b0482613ea1565b6001600160601b0316606085015250505b915091565b600080613ce98787613ecd565b90506000613cf78686613ecd565b90506000613d058383613ecd565b90506000613d27670de0b6b3a764000061383b670de0b6b3a7640000896139a3565b9050613d338282613777565b9a9950505050505050505050565b60035460026000196101006001841615020190911604158015613d645750815115155b8015613d705750805115155b613d8c5760405162461bcd60e51b815260040161060790615a69565b8151613d9f9060039060208501906150c8565b508051613db39060049060208401906150c8565b505050565b6001600160a01b038316600090815260208190526040902054811115613df05760405162461bcd60e51b815260040161060790615993565b6001600160a01b038316600090815260208190526040902054613e1390826139a3565b6001600160a01b038085166000908152602081905260408082209390935590841681522054613e429082613ea1565b6001600160a01b0380841660008181526020819052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90613e94908590615eed565b60405180910390a3505050565b600082820183811015613ec65760405162461bcd60e51b815260040161060790615d5b565b9392505050565b600081613eec5760405162461bcd60e51b815260040161060790615cb2565b670de0b6b3a76400008302831580613f145750670de0b6b3a7640000848281613f1157fe5b04145b613f305760405162461bcd60e51b8152600401610607906159ea565b60028304810181811015613f565760405162461bcd60e51b8152600401610607906159ea565b60008482816137e557fe5b600080613f6e8786613ecd565b90506000613f8985612862670de0b6b3a764000060006139a3565b90506000613f9788836139a3565b90506000613fa5828a613ecd565b90506000613fc482613fbf670de0b6b3a764000088613ecd565b614875565b90506000613fd2828e613777565b90506000613fe08e836139a3565b90506000613fff613ff9670de0b6b3a76400008a6139a3565b8b613777565b905061401782612862670de0b6b3a7640000846139a3565b9f9e505050505050505050505050505050565b81602001516141dd578160c001518110614186576001600160a01b0383166000818152600b6020908152604080832083905560098252808320805461ff001916610100179055600191860191909152517ff7bb8e57ffdfd9a31e7580ee84f68757f44fb4a8a913f44520d22f2da1c955e59190a260006140ae828460c001516139a3565b905060006140c0828560c00151613ecd565b90506140d86703782dace9d9000061100a8184613777565b6001600160601b03908116606086018181526001600160a01b03881660009081526009602052604090208054600160381b600160981b031916600160381b9093029290921766ffffffffff00001916620100004264ffffffffff160217909155600a5490516141479216613ea1565b600a5560608401516040516001600160a01b03871691600080516020615f85833981519152916141779190615f12565b60405180910390a250506141d8565b6000614199613c808460c00151846139a3565b905060006141b2600a6004670de0b6b3a7640000613c9f565b90506141c76004670de0b6b3a7640000613cbf565b6001600160601b0316606085015250505b6141e7565b6141e78284614d4e565b6001600160a01b0390921660009081526009602052604090206001019190915550565b60006060846001600160a01b03166323b872dd60e01b8530866040516024016138dd939291906156b9565b613b8181614ebf565b6001600160a01b0382166000908152600960205260409020805460ff166142775760405162461bcd60e51b815260040161060790615b20565b6703782dace9d900006001600160601b03831610158061429e57506001600160601b038216155b6142ba5760405162461bcd60e51b815260040161060790615bc7565b68015af1d78b58c400006001600160601b03831611156142ec5760405162461bcd60e51b8152600401610607906158ed565b80546bffffffffffffffffffffffff60981b1916600160981b6001600160601b038416021781556040516001600160a01b038416907fc7ea88f3376e27ce6ebc2025310023327f743a8377d438258c36b166dd8b29839061434e908590615f12565b60405180910390a2505050565b6000806143688786613ecd565b90506000614387614381670de0b6b3a7640000846139a3565b85613777565b905060006143a186612862670de0b6b3a7640000856139a3565b905060006143af8b83613ea1565b905060006143bd828d613ecd565b905060006143cb8287614875565b905060006143d9828d613777565b90506143e5818d6139a3565b9e9d5050505050505050505050505050565b6000806144048786613ecd565b905060006144128786613ea1565b905060006144208289613ecd565b90506000614436670de0b6b3a764000085613ecd565b905060006144448383614875565b90506000614452828e613777565b90506000614460828f6139a3565b90506000614479613ff9670de0b6b3a76400008a6139a3565b90506140178261383b670de0b6b3a7640000846139a3565b60008061449e8588613ecd565b905060006144ac87866139a3565b905060006144ba8883613ecd565b905060006144c88285614875565b90506144dc81670de0b6b3a76400006139a3565b90506144f0670de0b6b3a7640000876139a3565b94506145056144ff8c83613777565b86613ecd565b9b9a5050505050505050505050565b6000806145218786613ecd565b90506000614537670de0b6b3a7640000856139a3565b90506145438582613777565b905060006145558a61383b8c85613ea1565b905060006145638285614875565b90506000614579670de0b6b3a7640000836139a3565b90506145858a82613777565b9c9b505050505050505050505050565b6001600160a01b03831660009081526009602052604090205460ff16156145ce5760405162461bcd60e51b815260040161060790615821565b6703782dace9d900006001600160601b03821610156145ff5760405162461bcd60e51b815260040161060790615bc7565b68015af1d78b58c400006001600160601b03821611156146315760405162461bcd60e51b8152600401610607906158ed565b620f42408210156146545760405162461bcd60e51b81526004016106079061596a565b6040518060e00160405280600115158152602001600015158152602001600064ffffffffff16815260200160006001600160601b03168152602001826001600160601b0316815260200160088054905060ff168152602001600081525060096000856001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690831515021790555060408201518160000160026101000a81548164ffffffffff021916908364ffffffffff16021790555060608201518160000160076101000a8154816001600160601b0302191690836001600160601b0316021790555060808201518160000160136101000a8154816001600160601b0302191690836001600160601b0316021790555060a082015181600001601f6101000a81548160ff021916908360ff16021790555060c082015181600101559050506008839080600181540180825580915050600190039060005260206000200160009091909190916101000a8154816001600160a01b0302191690836001600160a01b0316021790555081600b6000856001600160a01b03166001600160a01b0316815260200190815260200160002081905550826001600160a01b03167fb2daf560899f6307b318aecfb57eb2812c488da4a4c1cad2019b482fa63294ed828460405161434e929190615f26565b600060018310156148985760405162461bcd60e51b815260040161060790615cd8565b671bc16d674ec7ffff8311156148c05760405162461bcd60e51b815260040161060790615e2d565b60006148cb83614f2e565b905060006148d984836139a3565b905060006148ef866148ea85614f49565b614f57565b905081614900579250610a0c915050565b600061491187846305f5e100614fae565b905061491d8282613777565b979650505050505050565b60008082841061493e5750508082036000614946565b505081810360015b9250929050565b61495561508c565b506001600160a01b038116600090815260096020908152604091829020825160e081018452815460ff808216151583526101008204811615159483019490945264ffffffffff62010000820416948201949094526001600160601b03600160381b850481166060830152600160981b8504166080820152600160f81b90930490911660a0830181905260019091015460c0830181905260085490919060001901808214614ab35760088181548110614a0957fe5b600091825260209091200154600880546001600160a01b039092169184908110614a2f57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550816009600060088581548110614a6f57fe5b60009182526020808320909101546001600160a01b031683528201929092526040019020805460ff92909216600160f81b026001600160f81b039092169190911790555b6008805480614abe57fe5b60008281526020808220600019908401810180546001600160a01b03191690559092019092556040805160e081018252838152808301848152818301858152606083018681526080840187815260a0850188815260c086018981526001600160a01b038f81168b52600990995296909820945185549451935192519151985160ff199095169015151761ff001916610100931515939093029290921766ffffffffff000019166201000064ffffffffff9092169190910217600160381b600160981b031916600160381b6001600160601b0392831602176bffffffffffffffffffffffff60981b1916600160981b9190961602949094176001600160f81b0316600160f81b60ff909516949094029390931783555160019290920191909155600654614bed91879116856138b4565b6006546040516360b8257960e11b81526001600160a01b039091169063c1704af290614c1f90889087906004016156dd565b600060405180830381600087803b158015614c3957600080fd5b505af1158015614c4d573d6000803e3d6000fd5b505050507f12a8262eb28ee8a8c11e6cf411b3af6ce5bea42abb36e051bf0a65ae602d52ec85604051614c8091906156a5565b60405180910390a15050505050565b613b6a823083613db8565b30600090815260208190526040902054811115614cc95760405162461bcd60e51b815260040161060790615993565b30600090815260208190526040902054614ce390826139a3565b30600090815260208190526040902055600254614d0090826139a3565b60025560405160009030907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90614d38908590615eed565b60405180910390a350565b613b6a308383613db8565b81608001516001600160601b031682606001516001600160601b0316101580614d7957508160200151155b80614d925750610e10826040015164ffffffffff164203105b15614d9c57613b6a565b606082015160808301516000614dc56001600160601b0384166064670de0b6b3a7640000611822565b90506000614de5836001600160601b0316856001600160601b03166139a3565b905081811115614e0857614e02846001600160601b031683613ea1565b92508190505b614e14600a5482613ea1565b600a819055680168d28e3f002800001015614e415760405162461bcd60e51b815260040161060790615915565b6001600160601b038316606087018190526001600160a01b038616600081815260096020526040908190208054600160381b600160981b031916600160381b9094029390931766ffffffffff00001916620100004264ffffffffff1602179092559051600080516020615f8583398151915290613b5d908690615f12565b30600090815260208190526040902054614ed99082613ea1565b30600090815260208190526040902055600254614ef69082613ea1565b60025560405130906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90614d38908590615eed565b6000670de0b6b3a7640000614f4283614f49565b0292915050565b670de0b6b3a7640000900490565b60008060028306614f7057670de0b6b3a7640000614f72565b835b90506002830492505b8215613ec657614f8b8485613777565b93506002830615614fa357614fa08185613777565b90505b600283049250614f7b565b6000828180614fc587670de0b6b3a7640000614928565b9092509050670de0b6b3a764000080600060015b88841061507d576000670de0b6b3a76400008202905060008061500d8a61500885670de0b6b3a76400006139a3565b614928565b9150915061501f87612862848c613777565b965061502b8784613ecd565b96508661503a5750505061507d565b8715615044579315935b801561504e579315935b84156150655761505e86886139a3565b9550615072565b61506f8688613ea1565b95505b505050600101614fd9565b50909998505050505050505050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061510957805160ff1916838001178555615136565b82800160010185558215615136579182015b8281111561513657825182559160200191906001019061511b565b50615142929150615146565b5090565b5b808211156151425760008155600101615147565b80356001600160a01b0381168114610a0c57600080fd5b60008083601f840112615183578182fd5b50813567ffffffffffffffff81111561519a578182fd5b602083019150836020808302850101111561494657600080fd5b60008083601f8401126151c5578182fd5b50813567ffffffffffffffff8111156151dc578182fd5b60208301915083602082850101111561494657600080fd5b600060208284031215615205578081fd5b613ec6838361515b565b60008060408385031215615221578081fd5b61522b848461515b565b915061523a846020850161515b565b90509250929050565b600080600060608486031215615257578081fd5b833561526281615f6f565b9250602084013561527281615f6f565b929592945050506040919091013590565b60008060008060006080868803121561529a578081fd5b6152a4878761515b565b94506152b3876020880161515b565b935060408601359250606086013567ffffffffffffffff8111156152d5578182fd5b6152e1888289016151b4565b969995985093965092949392505050565b600080600080600060608688031215615309578081fd5b853561531481615f6f565b9450602086013567ffffffffffffffff80821115615330578283fd5b61533c89838a016151b4565b90965094506040880135915080821115615354578283fd5b506152e1888289016151b4565b60008060408385031215615373578182fd5b61537d848461515b565b946020939093013593505050565b600080600080600060a086880312156153a2578081fd5b6153ac878761515b565b9450602086013593506153c2876040880161515b565b94979396509394606081013594506080013592915050565b6000806000606084860312156153ee578283fd5b6153f8858561515b565b95602085013595506040909401359392505050565b60008060008060008060008060a0898b031215615428578283fd5b883567ffffffffffffffff8082111561543f578485fd5b61544b8c838d01615172565b909a50985060208b0135915080821115615463578485fd5b61546f8c838d01615172565b909850965060408b0135915080821115615487578485fd5b506154948b828c01615172565b90955093505060608901356154a881615f6f565b915060808901356154b881615f6f565b809150509295985092959890939650565b600080600080604085870312156154de578182fd5b843567ffffffffffffffff808211156154f5578384fd5b61550188838901615172565b90965094506020870135915080821115615519578384fd5b5061552687828801615172565b95989497509550505050565b6000806000806000806060878903121561554a578384fd5b863567ffffffffffffffff80821115615561578586fd5b61556d8a838b01615172565b90985096506020890135915080821115615585578586fd5b6155918a838b01615172565b909650945060408901359150808211156155a9578384fd5b506155b689828a01615172565b979a9699509497509295939492505050565b6000602082840312156155d9578081fd5b81518015158114613ec6578182fd5b6000602082840312156155f9578081fd5b5035919050565b600060208284031215615611578081fd5b5051919050565b60008060006040848603121561562c578081fd5b83359250602084013567ffffffffffffffff811115615649578182fd5b61565586828701615172565b9497909650939450505050565b600060208284031215615673578081fd5b81356001600160601b0381168114613ec6578182fd5b6000825161569b818460208701615f3f565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b600060018060a01b038716825285602083015284604083015260806060830152826080830152828460a084013781830160a090810191909152601f909201601f19160101949350505050565b6020808252825182820181905260009190848201906040850190845b818110156157835783516001600160a01b03168352928401929184019160010161575e565b50909695505050505050565b901515815260200190565b60006020825282518060208401526157b9816040850160208701615f3f565b601f01601f19169190910160400192915050565b60208082526012908201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604082015260600190565b6020808252600e908201526d4552525f4e4f4e455f524541445960901b604082015260600190565b6020808252600c908201526b11549497d254d7d093d5539160a21b604082015260600190565b6020808252600e908201526d4552525f4d41585f544f4b454e5360901b604082015260600190565b60208082526010908201526f4552525f4d41585f494e5f524154494f60801b604082015260600190565b60208082526011908201527022a9292fa6a0aa242fa0a8282927ac2f9960791b604082015260600190565b6020808252600f908201526e08aa4a4be9a82a890be82a0a0a49eb608b1b604082015260600190565b6020808252600e908201526d11549497d3505617d5d15251d21560921b604082015260600190565b60208082526014908201527311549497d3505617d513d5105317d5d15251d21560621b604082015260600190565b6020808252600d908201526c11549497d31253525517d3d555609a1b604082015260600190565b6020808252600f908201526e4552525f4d494e5f42414c414e434560881b604082015260600190565b60208082526014908201527311549497d25394d551919250d251539517d0905360621b604082015260600190565b6020808252600f908201526e11549497d253925512505312569151608a1b604082015260600190565b60208082526010908201526f11549497d1125597d25395115493905360821b604082015260600190565b60208082526015908201527422a9292fa12a27a5a2a72fa120a22fa1a0a62622a960591b604082015260600190565b6020808252600c908201526b22a9292fa624a6a4aa2fa4a760a11b604082015260600190565b60208082526016908201527511549497d09513d2d15397d25392551250531256915160521b604082015260600190565b6020808252600b908201526a4552525f5245454e54525960a81b604082015260600190565b60208082526018908201527f4552525f494e53554646494349454e545f5041594d454e540000000000000000604082015260600190565b6020808252601190820152704552525f4d41585f4f55545f524154494f60781b604082015260600190565b6020808252600d908201526c11549497d393d517d093d55391609a1b604082015260600190565b6020808252601190820152704552525f4f55545f4e4f545f524541445960781b604082015260600190565b6020808252600e908201526d4552525f4e4f545f5055424c494360901b604082015260600190565b6020808252601390820152724552525f4241445f4c494d49545f505249434560681b604082015260600190565b6020808252600e908201526d11549497d3525397d5d15251d21560921b604082015260600190565b60208082526010908201526f4552525f4d554c5f4f564552464c4f5760801b604082015260600190565b6020808252600b908201526a22a9292fa0a9292fa622a760a91b604082015260600190565b6020808252600990820152684552525f524541445960b81b604082015260600190565b6020808252600f908201526e4552525f4c494d49545f505249434560881b604082015260600190565b6020808252600e908201526d11549497d0d3d3919251d554915160921b604082015260600190565b6020808252600c908201526b4552525f4449565f5a45524f60a01b604082015260600190565b6020808252601590820152744552525f42504f575f424153455f544f4f5f4c4f5760581b604082015260600190565b6020808252600f908201526e4552525f45524332305f46414c534560881b604082015260600190565b6020808252601190820152704552525f5355425f554e444552464c4f5760781b604082015260600190565b60208082526010908201526f4552525f4144445f4f564552464c4f5760801b604082015260600190565b60208082526010908201526f4552525f4e554c4c5f4144445245535360801b604082015260600190565b6020808252601390820152724552525f4d41585f504f4f4c5f544f4b454e5360681b604082015260600190565b6020808252600f908201526e4552525f494e56414c49445f46454560881b604082015260600190565b6020808252600e908201526d4552525f4d494e5f544f4b454e5360901b604082015260600190565b60208082526016908201527508aa4a4be84a09eaebe8482a68abea89e9ebe90928e960531b604082015260600190565b6020808252600b908201526a22a9292fad22a927afa4a760a91b604082015260600190565b600060e08201905082511515825260208301511515602083015264ffffffffff604084015116604083015260608301516001600160601b038082166060850152806080860151166080850152505060ff60a08401511660a083015260c083015160c083015292915050565b90815260200190565b918252602082015260400190565b60ff91909116815260200190565b6001600160601b0391909116815260200190565b6001600160601b03929092168252602082015260400190565b60005b83811015615f5a578181015183820152602001615f42565b83811115615f69576000848401525b50505050565b6001600160a01b0381168114613b8157600080fdfe21b12aed5d425f5675450ffeeae01039085e5323974c3099e1828155d9b51e778c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a264697066735822122086dfc7f00db3307780c9ea65c3c17ec36e609e7603a619408e81e237acf577bb64736f6c634300060c0033",
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      },
      "devdoc": {
        "events": {
          "LOG_DENORM_UPDATED(address,uint256)": {
            "details": "Emitted when a token's weight updates. "
          },
          "LOG_DESIRED_DENORM_SET(address,uint256)": {
            "details": "Emitted when a token's desired weight is set. "
          },
          "LOG_EXIT(address,address,uint256)": {
            "details": "Emitted when pool tokens are burned for underlying. "
          },
          "LOG_JOIN(address,address,uint256)": {
            "details": "Emitted when underlying tokens are deposited for pool tokens. "
          },
          "LOG_MAX_TOKENS_UPDATED(uint256)": {
            "details": "Emitted when the maximum tokens value is updated. "
          },
          "LOG_MINIMUM_BALANCE_UPDATED(address,uint256)": {
            "details": "Emitted when a token's minimum balance is updated. "
          },
          "LOG_PUBLIC_SWAP_ENABLED()": {
            "details": "Emitted when public trades are enabled. "
          },
          "LOG_SWAP(address,address,address,uint256,uint256)": {
            "details": "Emitted when tokens are swapped. "
          },
          "LOG_SWAP_FEE_UPDATED(uint256)": {
            "details": "Emitted when the swap fee is updated. "
          },
          "LOG_TOKEN_ADDED(address,uint256,uint256)": {
            "details": "Emitted when a token is unbound from the pool. "
          },
          "LOG_TOKEN_READY(address)": {
            "details": "Emitted when a token reaches its minimum balance. "
          },
          "LOG_TOKEN_REMOVED(address)": {
            "details": "Emitted when a token is unbound from the pool. "
          }
        },
        "kind": "dev",
        "methods": {
          "configure(address,string,string)": {
            "details": "Sets the controller address and the token name & symbol. Note: This saves on storage costs for multi-step pool deployment.",
            "params": {
              "controller": "Controller of the pool",
              "name": "Name of the pool token",
              "symbol": "Symbol of the pool token"
            }
          },
          "delegateCompLikeToken(address,address)": {
            "details": "Delegate a comp-like governance token to an address specified by the controller."
          },
          "exitPool(uint256,uint256[])": {
            "details": "Burns `poolAmountIn` pool tokens in exchange for the amounts of each underlying token's balance proportional to the ratio of tokens burned to total pool supply. The amount of each token transferred to the caller must be greater than or equal to the associated minimum output amount from the `minAmountsOut` array.",
            "params": {
              "minAmountsOut": "Minimum amount of each token to receive, in the same order as the pool's _tokens list.",
              "poolAmountIn": "Exact amount of pool tokens to burn"
            }
          },
          "exitswapExternAmountOut(address,uint256,uint256)": {
            "details": "Burn up to `maxPoolAmountIn` for exactly `tokenAmountOut` of `tokenOut`. Returns the number of pool tokens burned. The pool implicitly burns the tokens for all underlying tokens and swaps them to the desired output token. A swap fee is charged against the output tokens.",
            "params": {
              "maxPoolAmountIn": "Maximum amount of pool tokens to burn",
              "tokenAmountOut": "Exact amount of `tokenOut` to receive",
              "tokenOut": "Token to receive"
            },
            "returns": {
              "_0": "poolAmountIn - Amount of pool tokens burned"
            }
          },
          "exitswapPoolAmountIn(address,uint256,uint256)": {
            "details": "Burns `poolAmountIn` pool tokens in exchange for at least `minAmountOut` of `tokenOut`. Returns the number of tokens sent to the caller. The pool implicitly burns the tokens for all underlying tokens and swaps them to the desired output token. A swap fee is charged against the output tokens.",
            "params": {
              "minAmountOut": "Minimum amount of `tokenOut` to receive",
              "poolAmountIn": "Exact amount of pool tokens to burn",
              "tokenOut": "Token to receive"
            },
            "returns": {
              "_0": "tokenAmountOut - Amount of `tokenOut` received"
            }
          },
          "extrapolatePoolValueFromToken()": {
            "details": "Finds the first token which is both initialized and has a desired weight above 0, then returns the address of that token and the extrapolated value of the pool in terms of that token. The value is extrapolated by multiplying the token's balance by the reciprocal of its normalized weight.",
            "returns": {
              "_0": "(token, extrapolatedValue)"
            }
          },
          "flashBorrow(address,address,uint256,bytes)": {
            "details": "Execute a flash loan, transferring `amount` of `token` to `recipient`. `amount` must be repaid with `swapFee` interest by the end of the transaction.",
            "params": {
              "amount": "Amount to borrow",
              "data": "Data to send to the recipient in `receiveFlashLoan` call",
              "recipient": "Must implement the IFlashLoanRecipient interface",
              "token": "Token to borrow"
            }
          },
          "getBalance(address)": {
            "details": "Returns the stored balance of a bound token."
          },
          "getController()": {
            "details": "Returns the controller address."
          },
          "getCurrentDesiredTokens()": {
            "details": "Returns the list of tokens which have a desired weight above 0. Tokens with a desired weight of 0 are set to be phased out of the pool."
          },
          "getCurrentTokens()": {
            "details": "Get all bound tokens."
          },
          "getDenormalizedWeight(address)": {
            "details": "Returns the denormalized weight of a bound token."
          },
          "getMinimumBalance(address)": {
            "details": "Get the minimum balance of an uninitialized token. Note: Throws if the token is initialized."
          },
          "getNumTokens()": {
            "details": "Get the number of tokens bound to the pool."
          },
          "getSpotPrice(address,address)": {
            "details": "Returns the spot price for `tokenOut` in terms of `tokenIn`."
          },
          "getTokenRecord(address)": {
            "details": "Returns the record for a token bound to the pool."
          },
          "getTotalDenormalizedWeight()": {
            "details": "Get the total denormalized weight of the pool."
          },
          "getUsedBalance(address)": {
            "details": "Returns the balance of a token which is used in price calculations. If the token is initialized, this is the stored balance; if not, this is the minimum balance."
          },
          "gulp(address)": {
            "details": "Absorb any tokens that have been sent to the pool. If the token is not bound, it will be sent to the unbound token handler."
          },
          "initialize(address[],uint256[],uint96[],address,address)": {
            "details": "Sets up the initial assets for the pool. Note: `tokenProvider` must have approved the pool to transfer the corresponding `balances` of `tokens`.",
            "params": {
              "balances": "Initial balances to transfer",
              "denorms": "Initial denormalized weights for the tokens",
              "tokenProvider": "Address to transfer the balances from",
              "tokens": "Underlying tokens to initialize the pool with"
            }
          },
          "isBound(address)": {
            "details": "Check if a token is bound to the pool."
          },
          "isPublicSwap()": {
            "details": "Check if swapping tokens and joining the pool is allowed."
          },
          "joinPool(uint256,uint256[])": {
            "details": "Mint new pool tokens by providing the proportional amount of each underlying token's balance relative to the proportion of pool tokens minted. For any underlying tokens which are not initialized, the caller must provide the proportional share of the minimum balance for the token rather than the actual balance.",
            "params": {
              "maxAmountsIn": "Maximum amount of each token to pay in the same order as the pool's _tokens list.",
              "poolAmountOut": "Amount of pool tokens to mint"
            }
          },
          "joinswapExternAmountIn(address,uint256,uint256)": {
            "details": "Pay `tokenAmountIn` of `tokenIn` to mint at least `minPoolAmountOut` pool tokens. The pool implicitly swaps `(1- weightTokenIn) * tokenAmountIn` to the other underlying tokens. Thus a swap fee is charged against the input tokens.",
            "params": {
              "minPoolAmountOut": "Minimum amount of pool tokens to mint",
              "tokenAmountIn": "Exact amount of `tokenIn` to pay",
              "tokenIn": "Token to send the pool"
            },
            "returns": {
              "_0": "poolAmountOut - Amount of pool tokens minted"
            }
          },
          "joinswapPoolAmountOut(address,uint256,uint256)": {
            "details": "Pay up to `maxAmountIn` of `tokenIn` to mint exactly `poolAmountOut`. The pool implicitly swaps `(1- weightTokenIn) * tokenAmountIn` to the other underlying tokens. Thus a swap fee is charged against the input tokens.",
            "params": {
              "maxAmountIn": "Maximum amount of `tokenIn` to pay",
              "poolAmountOut": "Exact amount of pool tokens to mint",
              "tokenIn": "Token to send the pool"
            },
            "returns": {
              "_0": "tokenAmountIn - Amount of `tokenIn` paid"
            }
          },
          "reindexTokens(address[],uint96[],uint256[])": {
            "details": "Update the underlying assets held by the pool and their associated weights. Tokens which are not currently bound will be gradually added as they are swapped in to reach the provided minimum balances, which must be an amount of tokens worth the minimum weight of the total pool value. If a currently bound token is not received in this call, the token's desired weight will be set to 0."
          },
          "reweighTokens(address[],uint96[])": {
            "details": "Sets the desired weights for the pool tokens, which will be adjusted over time as they are swapped. Note: This does not check for duplicate tokens or that the total of the desired weights is equal to the target total weight (25). Those assumptions should be met in the controller. Further, the provided tokens should only include the tokens which are not set for removal."
          },
          "setMaxPoolTokens(uint256)": {
            "details": "Sets the maximum number of pool tokens that can be minted. This value will be used in the alpha to limit the maximum damage that can be caused by a catastrophic error. It can be gradually increased as the pool continues to not be exploited. If it is set to 0, the limit will be removed."
          },
          "setMinimumBalance(address,uint256)": {
            "details": "Updates the minimum balance for an uninitialized token. This becomes useful if a token's external price significantly rises after being bound, since the pool can not send a token out until it reaches the minimum balance."
          },
          "setSwapFee(uint256)": {
            "details": "Set the swap fee. Note: Swap fee must be between 0.0001% and 10%"
          },
          "swapExactAmountIn(address,uint256,address,uint256,uint256)": {
            "details": "Execute a token swap with a specified amount of input tokens and a minimum amount of output tokens. Note: Will revert if `tokenOut` is uninitialized.",
            "params": {
              "maxPrice": "Maximum ratio of input to output tokens",
              "minAmountOut": "Minimum amount of `tokenOut` to receive",
              "tokenAmountIn": "Exact amount of `tokenIn` to swap in",
              "tokenIn": "Token to swap in",
              "tokenOut": "Token to swap out"
            },
            "returns": {
              "_0": "(tokenAmountOut, spotPriceAfter)"
            }
          },
          "swapExactAmountOut(address,uint256,address,uint256,uint256)": {
            "details": "Trades at most `maxAmountIn` of `tokenIn` for exactly `tokenAmountOut` of `tokenOut`. Returns the actual input amount and the new spot price after the swap, which can not exceed `maxPrice`.",
            "params": {
              "maxAmountIn": "Maximum amount of `tokenIn` to pay",
              "maxPrice": "Maximum ratio of input to output tokens",
              "tokenAmountOut": "Exact amount of `tokenOut` to receive",
              "tokenIn": "Token to swap in",
              "tokenOut": "Token to swap out"
            },
            "returns": {
              "_0": "(tokenAmountIn, spotPriceAfter)"
            }
          }
        },
        "version": 1
      },
      "storageLayout": {
        "storage": [
          {
            "astId": 1236,
            "contract": "temp-contracts/balancer/IndexPool.sol:IndexPool",
            "label": "_balance",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 1242,
            "contract": "temp-contracts/balancer/IndexPool.sol:IndexPool",
            "label": "_allowance",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
          },
          {
            "astId": 1244,
            "contract": "temp-contracts/balancer/IndexPool.sol:IndexPool",
            "label": "_totalSupply",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1447,
            "contract": "temp-contracts/balancer/IndexPool.sol:IndexPool",
            "label": "_name",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1449,
            "contract": "temp-contracts/balancer/IndexPool.sol:IndexPool",
            "label": "_symbol",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1944,
            "contract": "temp-contracts/balancer/IndexPool.sol:IndexPool",
            "label": "_mutex",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 1946,
            "contract": "temp-contracts/balancer/IndexPool.sol:IndexPool",
            "label": "_controller",
            "offset": 1,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 1948,
            "contract": "temp-contracts/balancer/IndexPool.sol:IndexPool",
            "label": "_unbindHandler",
            "offset": 0,
            "slot": "6",
            "type": "t_contract(TokenUnbindHandler)5333"
          },
          {
            "astId": 1950,
            "contract": "temp-contracts/balancer/IndexPool.sol:IndexPool",
            "label": "_publicSwap",
            "offset": 20,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 1952,
            "contract": "temp-contracts/balancer/IndexPool.sol:IndexPool",
            "label": "_swapFee",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 1955,
            "contract": "temp-contracts/balancer/IndexPool.sol:IndexPool",
            "label": "_tokens",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 1959,
            "contract": "temp-contracts/balancer/IndexPool.sol:IndexPool",
            "label": "_records",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_struct(Record)5373_storage)"
          },
          {
            "astId": 1961,
            "contract": "temp-contracts/balancer/IndexPool.sol:IndexPool",
            "label": "_totalWeight",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 1965,
            "contract": "temp-contracts/balancer/IndexPool.sol:IndexPool",
            "label": "_minimumBalances",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 1967,
            "contract": "temp-contracts/balancer/IndexPool.sol:IndexPool",
            "label": "_maxPoolTokens",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "base": "t_address",
            "encoding": "dynamic_array",
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(TokenUnbindHandler)5333": {
            "encoding": "inplace",
            "label": "contract TokenUnbindHandler",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32",
            "value": "t_mapping(t_address,t_uint256)"
          },
          "t_mapping(t_address,t_struct(Record)5373_storage)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => struct IIndexPool.Record)",
            "numberOfBytes": "32",
            "value": "t_struct(Record)5373_storage"
          },
          "t_mapping(t_address,t_uint256)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_string_storage": {
            "encoding": "bytes",
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Record)5373_storage": {
            "encoding": "inplace",
            "label": "struct IIndexPool.Record",
            "members": [
              {
                "astId": 5360,
                "contract": "temp-contracts/balancer/IndexPool.sol:IndexPool",
                "label": "bound",
                "offset": 0,
                "slot": "0",
                "type": "t_bool"
              },
              {
                "astId": 5362,
                "contract": "temp-contracts/balancer/IndexPool.sol:IndexPool",
                "label": "ready",
                "offset": 1,
                "slot": "0",
                "type": "t_bool"
              },
              {
                "astId": 5364,
                "contract": "temp-contracts/balancer/IndexPool.sol:IndexPool",
                "label": "lastDenormUpdate",
                "offset": 2,
                "slot": "0",
                "type": "t_uint40"
              },
              {
                "astId": 5366,
                "contract": "temp-contracts/balancer/IndexPool.sol:IndexPool",
                "label": "denorm",
                "offset": 7,
                "slot": "0",
                "type": "t_uint96"
              },
              {
                "astId": 5368,
                "contract": "temp-contracts/balancer/IndexPool.sol:IndexPool",
                "label": "desiredDenorm",
                "offset": 19,
                "slot": "0",
                "type": "t_uint96"
              },
              {
                "astId": 5370,
                "contract": "temp-contracts/balancer/IndexPool.sol:IndexPool",
                "label": "index",
                "offset": 31,
                "slot": "0",
                "type": "t_uint8"
              },
              {
                "astId": 5372,
                "contract": "temp-contracts/balancer/IndexPool.sol:IndexPool",
                "label": "balance",
                "offset": 0,
                "slot": "1",
                "type": "t_uint256"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint40": {
            "encoding": "inplace",
            "label": "uint40",
            "numberOfBytes": "5"
          },
          "t_uint8": {
            "encoding": "inplace",
            "label": "uint8",
            "numberOfBytes": "1"
          },
          "t_uint96": {
            "encoding": "inplace",
            "label": "uint96",
            "numberOfBytes": "12"
          }
        }
      },
      "gasEstimates": {
        "creation": {
          "codeDepositCost": "4914000",
          "executionCost": "5811",
          "totalCost": "4919811"
        },
        "external": {
          "VERSION_NUMBER()": "318",
          "allowance(address,address)": "infinite",
          "approve(address,uint256)": "infinite",
          "balanceOf(address)": "1324",
          "configure(address,string,string)": "infinite",
          "decimals()": "286",
          "decreaseApproval(address,uint256)": "infinite",
          "delegateCompLikeToken(address,address)": "infinite",
          "exitPool(uint256,uint256[])": "infinite",
          "exitswapExternAmountOut(address,uint256,uint256)": "infinite",
          "exitswapPoolAmountIn(address,uint256,uint256)": "infinite",
          "extrapolatePoolValueFromToken()": "infinite",
          "flashBorrow(address,address,uint256,bytes)": "infinite",
          "getBalance(address)": "3056",
          "getController()": "1215",
          "getCurrentDesiredTokens()": "infinite",
          "getCurrentTokens()": "infinite",
          "getDenormalizedWeight(address)": "3143",
          "getMaxPoolTokens()": "1140",
          "getMinimumBalance(address)": "4390",
          "getNumTokens()": "1183",
          "getSpotPrice(address,address)": "infinite",
          "getSwapFee()": "1906",
          "getTokenRecord(address)": "3777",
          "getTotalDenormalizedWeight()": "1929",
          "getUsedBalance(address)": "4495",
          "gulp(address)": "infinite",
          "increaseApproval(address,uint256)": "infinite",
          "initialize(address[],uint256[],uint96[],address,address)": "infinite",
          "isBound(address)": "1408",
          "isPublicSwap()": "1211",
          "joinPool(uint256,uint256[])": "infinite",
          "joinswapExternAmountIn(address,uint256,uint256)": "infinite",
          "joinswapPoolAmountOut(address,uint256,uint256)": "infinite",
          "name()": "infinite",
          "reindexTokens(address[],uint96[],uint256[])": "infinite",
          "reweighTokens(address[],uint96[])": "infinite",
          "setMaxPoolTokens(uint256)": "22221",
          "setMinimumBalance(address,uint256)": "24473",
          "setSwapFee(uint256)": "22304",
          "swapExactAmountIn(address,uint256,address,uint256,uint256)": "infinite",
          "swapExactAmountOut(address,uint256,address,uint256,uint256)": "infinite",
          "symbol()": "infinite",
          "totalSupply()": "1074",
          "transfer(address,uint256)": "45531",
          "transferFrom(address,address,uint256)": "infinite"
        },
        "internal": {
          "_bind(address,uint256,uint96)": "infinite",
          "_burnPoolShare(uint256)": "infinite",
          "_decreaseDenorm(struct IIndexPool.Record memory,address)": "infinite",
          "_getInputToken(address)": "infinite",
          "_getOutputToken(address)": "infinite",
          "_increaseDenorm(struct IIndexPool.Record memory,address)": "infinite",
          "_mintPoolShare(uint256)": "infinite",
          "_pullPoolShare(address,uint256)": "infinite",
          "_pullUnderlying(address,address,uint256)": "infinite",
          "_pushPoolShare(address,uint256)": "infinite",
          "_pushUnderlying(address,address,uint256)": "infinite",
          "_setDesiredDenorm(address,uint96)": "infinite",
          "_unbind(address)": "infinite",
          "_updateInputToken(address,struct IIndexPool.Record memory,uint256)": "infinite"
        }
      }
    },
    "decoded": {
      "from": "0xa84aAD9E9e1213Bc77AfEfe2EEBD08ccd2efDAdf",
      "gasPrice": "0xa84aAD9E9e1213Bc77AfEfe2EEBD08ccd2efDAdf",
      "gasLimit": "5358983",
      "to": null,
      "value": "0",
      "nonce": 12,
      "data": "0x608060405234801561001057600080fd5b50615ffa80620000216000396000f3fe608060405234801561001057600080fd5b506004361061028a5760003560e01c806370a082311161015c578063a49c44d7116100ce578063d4cadf6811610087578063d4cadf6814610585578063d73dd6231461058d578063dd62ed3e146105a0578063f8b2cb4f146105b3578063f8b5db09146105c6578063fde924f7146105d95761028a565b8063a49c44d714610529578063a9059cbb1461053c578063b02f0b731461054f578063c3f4681014610562578063cc77828d14610575578063cd2ed8fb1461057d5761028a565b806391bfa2bf1161012057806391bfa2bf146104ca578063936c3477146104dd578063948d8ce6146104e557806395d89b41146104f857806398836f0814610500578063a20cfa75146105165761028a565b806370a08231146104685780637c5e9ea41461047b5780638025e3031461049c5780638201aa3f146104a45780638c28cbe8146104b75761028a565b8063313ce56711610200578063534d4f3d116101b9578063534d4f3d146103e95780635d5e8ce7146103fc5780635db342771461040f57806364c7d6611461042257806366188463146104425780636d06dfa0146104555761028a565b8063313ce5671461038057806334e199071461039557806346ab38f1146103a857806346ecfbd6146103bb5780634aa4e0b5146103c35780634f69c0d4146103d65761028a565b806318160ddd1161025257806318160ddd1461031557806319f0f8491461031d57806323b872dd146103325780632f37b624146103455780633018205f146103585780633043ffc91461036d5761028a565b806302c967481461028f578063039209af146102b857806306fdde03146102cd578063095ea7b3146102e257806315e84af914610302575b600080fd5b6102a261029d3660046153da565b6105e1565b6040516102af9190615eed565b60405180910390f35b6102c06107bc565b6040516102af9190615742565b6102d5610923565b6040516102af919061579a565b6102f56102f0366004615361565b6109b9565b6040516102af919061578f565b6102a261031036600461520f565b610a12565b6102a2610a99565b61033061032b3660046152f2565b610a9f565b005b6102f5610340366004615243565b610b9a565b6102f56103533660046151f4565b610ccb565b610360610ced565b6040516102af91906156a5565b61033061037b366004615283565b610d01565b6103886110bf565b6040516102af9190615f04565b6103306103a33660046155e8565b6110c4565b6102a26103b63660046153da565b61116c565b6102a26112e4565b6102a26103d13660046151f4565b6112ea565b6103306103e4366004615618565b6113f7565b6103306103f73660046155e8565b611623565b61033061040a3660046154c9565b611687565b6102a261041d3660046153da565b611774565b6104356104303660046151f4565b611952565b6040516102af9190615e82565b6102f5610450366004615361565b611a29565b6102a26104633660046153da565b611af2565b6102a26104763660046151f4565b611cc5565b61048e61048936600461538b565b611ce0565b6040516102af929190615ef6565b6102a2611fd7565b61048e6104b236600461538b565b611fdc565b6103306104c53660046151f4565b6122af565b6102a26104d83660046151f4565b61256e565b6102a2612687565b6102a26104f33660046151f4565b6126b4565b6102d561273e565b61050861279f565b6040516102af9291906156dd565b61033061052436600461540d565b6128a3565b610330610537366004615361565b612cf6565b6102f561054a366004615361565b612dde565b61033061055d366004615618565b612df4565b610330610570366004615532565b6130be565b6102c0613441565b6102a26134c6565b6102a26134cc565b6102f561059b366004615361565b6134f9565b6102a26105ae36600461520f565b61356d565b6102a26105c13660046151f4565b613598565b6103306105d436600461520f565b613601565b6102f5613692565b60055460009060ff16156106105760405162461bcd60e51b815260040161060790615a99565b60405180910390fd5b6005805460ff1916600117905561062561508c565b61062e856136a2565b90506106538160c001516003670de0b6b3a76400008161064a57fe5b04600101613777565b8411156106725760405162461bcd60e51b815260040161060790615af5565b60006106998260c0015183606001516001600160601b0316600254600a54896007546137f0565b9050806106b85760405162461bcd60e51b8152600401610607906158c4565b838111156106d85760405162461bcd60e51b815260040161060790615a43565b6106e38633876138b4565b6106f18260c00151866139a3565b6001600160a01b03871660009081526009602052604090206001015561071782876139dc565b6000610724826000613777565b9050866001600160a01b0316336001600160a01b03167fe74c91552b64c2e2e7bd255639e004e693bd3e1d01cc33e65610b86afcc1ffed886040516107699190615eed565b60405180910390a361077b3383613b6e565b61078d61078883836139a3565b613b78565b6005546107a89061010090046001600160a01b031682613b84565b506005805460ff1916905595945050505050565b60055460609060ff16156107e25760405162461bcd60e51b815260040161060790615a99565b6060600880548060200260200160405190810160405280929190818152602001828054801561083a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161081c575b50505050509050805167ffffffffffffffff8111801561085957600080fd5b50604051908082528060200260200182016040528015610883578160200160208202803683370190505b5091506000805b835181101561091c5760008382815181106108a157fe5b6020908102919091018101516001600160a01b03811660009081526009909252604090912054909150600160981b90046001600160601b03161561091357808584806001019550815181106108f257fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b5060010161088a565b5082525090565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156109af5780601f10610984576101008083540402835291602001916109af565b820191906000526020600020905b81548152906001019060200180831161099257829003601f168201915b5050505050905090565b3360008181526001602090815260408083206001600160a01b03871680855292528083208590555191929091600080516020615fa583398151915290610a00908690615eed565b60405180910390a35060015b92915050565b60055460009060ff1615610a385760405162461bcd60e51b815260040161060790615a99565b610a4061508c565b610a4984613b8e565b509050610a5461508c565b610a5d846136a2565b9050610a908260c0015183606001516001600160601b03168360c0015184606001516001600160601b0316600754613cdc565b95945050505050565b60025490565b60055461010090046001600160a01b031615610acd5760405162461bcd60e51b815260040161060790615c8a565b6001600160a01b038516610af35760405162461bcd60e51b815260040161060790615d85565b60058054610100600160a81b0319166101006001600160a01b038816021790556028670de0b6b3a764000004600755604080516020601f8601819004810282018101909252848152610b9391869086908190840183828082843760009201919091525050604080516020601f88018190048102820181019092528681529250869150859081908401838280828437600092019190915250613d4192505050565b5050505050565b6000336001600160a01b0385161480610bd657506001600160a01b03841660009081526001602090815260408083203384529091529020548211155b610bf25760405162461bcd60e51b815260040161060790615a14565b610bfd848484613db8565b336001600160a01b03851614801590610c3b57506001600160a01b038416600090815260016020908152604080832033845290915290205460001914155b15610cc1576001600160a01b0384166000908152600160209081526040808320338452909152902054610c6e90836139a3565b6001600160a01b038581166000908152600160209081526040808320338085529252918290208490559051918616929091600080516020615fa583398151915291610cb891615eed565b60405180910390a35b5060019392505050565b6001600160a01b03811660009081526009602052604090205460ff165b919050565b60055461010090046001600160a01b031690565b60055460ff1615610d245760405162461bcd60e51b815260040161060790615a99565b6005805460ff191660011790556001600160a01b0384166000908152600960205260409020805460ff16610d6a5760405162461bcd60e51b815260040161060790615b20565b6040516370a0823160e01b81526000906001600160a01b038716906370a0823190610d999030906004016156a5565b60206040518083038186803b158015610db157600080fd5b505afa158015610dc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de99190615600565b905084811015610e0b5760405162461bcd60e51b815260040161060790615993565b610e168688876138b4565b6000610e2482600754613777565b90506000610e328783613ea1565b604051630ed1000360e31b81529091506001600160a01b038a1690637688001890610e69908b908b9086908c908c906004016156f6565b600060405180830381600087803b158015610e8357600080fd5b505af1158015610e97573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b038b1691506370a0823190610eca9030906004016156a5565b60206040518083038186803b158015610ee257600080fd5b505afa158015610ef6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1a9190615600565b90508381118015610f2b5750818110155b610f475760405162461bcd60e51b815260040161060790615abe565b600185018190558454610100900460ff166110a9576001600160a01b0389166000908152600b60205260409020548082106110a7576001600160a01b038a166000818152600b6020526040808220829055885461ff001916610100178955517ff7bb8e57ffdfd9a31e7580ee84f68757f44fb4a8a913f44520d22f2da1c955e59190a26000610fd683836139a3565b90506000610fe48284613ecd565b9050600061100f6004670de0b6b3a76400005b0461100a6703782dace9d9000085613777565b613ea1565b8954600160381b600160981b031916600160381b6001600160601b0383169081029190911766ffffffffff00001916620100004264ffffffffff1602178b55600a5491925061105e9190613ea1565b600a5588546040516001600160a01b038f1691600080516020615f858339815191529161109b91600160381b90046001600160601b031690615f12565b60405180910390a25050505b505b50506005805460ff191690555050505050505050565b601290565b60055461010090046001600160a01b031633146110f35760405162461bcd60e51b8152600401610607906157cd565b64e8d4a510008110801590611110575067016345785d8a00008111155b61112c5760405162461bcd60e51b815260040161060790615ddc565b60078190556040517fccfe595973efc7c1f6c29e31974d380470b9431d7770290185b7129419c7e63e90611161908390615eed565b60405180910390a150565b60055460009060ff16156111925760405162461bcd60e51b815260040161060790615a99565b6005805460ff191660011790556111a761508c565b6111b0856136a2565b905060006111d98260c0015183606001516001600160601b0316600254600a5489600754613f61565b9050838110156111fb5760405162461bcd60e51b815260040161060790615943565b6112158260c001516003670de0b6b3a76400008161064a57fe5b8111156112345760405162461bcd60e51b815260040161060790615af5565b61123f8633836138b4565b61124d8260c00151826139a3565b6001600160a01b03871660009081526009602052604090206001015561127382876139dc565b6000611280866000613777565b9050866001600160a01b0316336001600160a01b03167fe74c91552b64c2e2e7bd255639e004e693bd3e1d01cc33e65610b86afcc1ffed846040516112c59190615eed565b60405180910390a36112d73387613b6e565b61078d61078887836139a3565b600c5490565b60055460009060ff16156113105760405162461bcd60e51b815260040161060790615a99565b61131861508c565b506001600160a01b038216600090815260096020908152604091829020825160e081018452815460ff80821615158084526101008304821615159584019590955264ffffffffff62010000830416958301959095526001600160601b03600160381b820481166060840152600160981b8204166080830152600160f81b900490931660a08401526001015460c08301526113c45760405162461bcd60e51b815260040161060790615b20565b80602001516113ed5750506001600160a01b0381166000908152600b6020526040902054610ce8565b60c0015192915050565b60055460ff161561141a5760405162461bcd60e51b815260040161060790615a99565b6005805460ff19166001179055600654600160a01b900460ff166114505760405162461bcd60e51b815260040161060790615b72565b600061145a610a99565b905060006114688583613ecd565b9050806114875760405162461bcd60e51b8152600401610607906158c4565b60085483146114a85760405162461bcd60e51b815260040161060790615c19565b600c5480156114da57806114bc8488613ea1565b11156114da5760405162461bcd60e51b815260040161060790615daf565b60005b848110156115fd576000600882815481106114f457fe5b6000918252602090912001546001600160a01b0316905061151361508c565b600061151e83613b8e565b915091506000611532878460c00151613777565b9050806115515760405162461bcd60e51b8152600401610607906158c4565b89898681811061155d57fe5b905060200201358111156115835760405162461bcd60e51b815260040161060790615a43565b61159784846115928585613ea1565b61402a565b836001600160a01b0316336001600160a01b03167f63982df10efd8dfaaaa0fcc7f50b2d93b7cba26ccc48adee2873220d485dc39a836040516115da9190615eed565b60405180910390a36115ed84338361420a565b5050600190920191506114dd9050565b5061160786614235565b6116113387613b84565b50506005805460ff1916905550505050565b60055461010090046001600160a01b031633146116525760405162461bcd60e51b8152600401610607906157cd565b600c8190556040517f65492266ae9a1f46497efddd24b6946862569680a511c543590d4587ca800d0590611161908390615eed565b60055460ff16156116aa5760405162461bcd60e51b815260040161060790615a99565b60058054600160ff19909116179081905561010090046001600160a01b031633146116e75760405162461bcd60e51b8152600401610607906157cd565b8083146117065760405162461bcd60e51b815260040161060790615c19565b60005b838110156117635761175b85858381811061172057fe5b905060200201602081019061173591906151f4565b84848481811061174157fe5b90506020020160208101906117569190615662565b61423e565b600101611709565b50506005805460ff19169055505050565b60055460009060ff161561179a5760405162461bcd60e51b815260040161060790615a99565b6005805460ff19166001179055600654600160a01b900460ff166117d05760405162461bcd60e51b815260040161060790615b72565b6117d861508c565b60006117e386613b8e565b9150915084600014156118085760405162461bcd60e51b815260040161060790615e5d565b6118288260c001516002670de0b6b3a76400008161182257fe5b04613777565b8511156118475760405162461bcd60e51b81526004016106079061586f565b600061186e8360c0015184606001516001600160601b0316600254600a548a60075461435b565b600c5490915080156118a5578061188760025484613ea1565b11156118a55760405162461bcd60e51b815260040161060790615daf565b858210156118c55760405162461bcd60e51b815260040161060790615943565b6118d48885611592868b613ea1565b876001600160a01b0316336001600160a01b03167f63982df10efd8dfaaaa0fcc7f50b2d93b7cba26ccc48adee2873220d485dc39a896040516119179190615eed565b60405180910390a361192882614235565b6119323383613b84565b61193d88338961420a565b506005805460ff191690559695505050505050565b61195a61508c565b60055460ff161561197d5760405162461bcd60e51b815260040161060790615a99565b506001600160a01b038116600090815260096020908152604091829020825160e081018452815460ff80821615158084526101008304821615159584019590955264ffffffffff62010000830416958301959095526001600160601b03600160381b820481166060840152600160981b8204166080830152600160f81b900490931660a08401526001015460c0830152610ce85760405162461bcd60e51b815260040161060790615b20565b3360009081526001602090815260408083206001600160a01b038616845290915281205480831115611a7e573360009081526001602090815260408083206001600160a01b0388168452909152812055611aad565b611a8881846139a3565b3360009081526001602090815260408083206001600160a01b03891684529091529020555b3360008181526001602090815260408083206001600160a01b038916808552925291829020549151909291600080516020615fa583398151915291610cb89190615eed565b60055460009060ff1615611b185760405162461bcd60e51b815260040161060790615a99565b6005805460ff19166001179055600654600160a01b900460ff16611b4e5760405162461bcd60e51b815260040161060790615b72565b600c548015611b825780611b6460025486613ea1565b1115611b825760405162461bcd60e51b815260040161060790615daf565b611b8a61508c565b6000611b9587613b8e565b915091506000611bc08360c0015184606001516001600160601b0316600254600a548b6007546143f7565b905080611bdf5760405162461bcd60e51b8152600401610607906158c4565b85811115611bff5760405162461bcd60e51b815260040161060790615a43565b611c198360c001516002670de0b6b3a76400008161182257fe5b811115611c385760405162461bcd60e51b81526004016106079061586f565b611c4788846115928585613ea1565b876001600160a01b0316336001600160a01b03167f63982df10efd8dfaaaa0fcc7f50b2d93b7cba26ccc48adee2873220d485dc39a83604051611c8a9190615eed565b60405180910390a3611c9b87614235565b611ca53388613b84565b611cb088338361420a565b6005805460ff19169055979650505050505050565b6001600160a01b031660009081526020819052604090205490565b600554600090819060ff1615611d085760405162461bcd60e51b815260040161060790615a99565b6005805460ff19166001179055600654600160a01b900460ff16611d3e5760405162461bcd60e51b815260040161060790615b72565b611d4661508c565b6000611d5189613b8e565b91509150611d5d61508c565b611d66886136a2565b9050611d828160c001516003670de0b6b3a76400008161064a57fe5b871115611da15760405162461bcd60e51b815260040161060790615af5565b6000611dd48460c0015185606001516001600160601b03168460c0015185606001516001600160601b0316600754613cdc565b905086811115611df65760405162461bcd60e51b815260040161060790615b9a565b6000611e2a8560c0015186606001516001600160601b03168560c0015186606001516001600160601b03168d600754614491565b90508a811115611e4c5760405162461bcd60e51b815260040161060790615a43565b611e578c338361420a565b611e628a338b6138b4565b611e6c8482613ea1565b9350611e798c868661402a565b846020015115611e8b5760c085018490525b611e998360c001518a6139a3565b60c084018190526001600160a01b038b16600090815260096020526040902060010155611ec6838b6139dc565b6000611ef98660c0015187606001516001600160601b03168660c0015187606001516001600160601b0316600754613cdc565b905082811015611f1b5760405162461bcd60e51b8152600401610607906158c4565b88811115611f3b5760405162461bcd60e51b815260040161060790615c61565b611f45828b613ecd565b831115611f645760405162461bcd60e51b8152600401610607906158c4565b8a6001600160a01b03168d6001600160a01b0316336001600160a01b03167f908fb5ee8f16c6bc9bc3690973819f32a4d4b10188134543c88706e0e1d43378858e604051611fb3929190615ef6565b60405180910390a46005805460ff19169055909c909b509950505050505050505050565b600181565b600554600090819060ff16156120045760405162461bcd60e51b815260040161060790615a99565b6005805460ff19166001179055600654600160a01b900460ff1661203a5760405162461bcd60e51b815260040161060790615b72565b61204261508c565b600061204d89613b8e565b9150915061205961508c565b612062886136a2565b905061207e8360c001516002670de0b6b3a76400008161182257fe5b89111561209d5760405162461bcd60e51b81526004016106079061586f565b60006120d08460c0015185606001516001600160601b03168460c0015185606001516001600160601b0316600754613cdc565b9050868111156120f25760405162461bcd60e51b815260040161060790615b9a565b60006121268560c0015186606001516001600160601b03168560c0015186606001516001600160601b03168f600754614514565b9050888110156121485760405162461bcd60e51b815260040161060790615943565b6121538c338d61420a565b61215e8a33836138b4565b612168848c613ea1565b93506121758c868661402a565b8460200151156121875760c085018490525b6121958360c00151826139a3565b60c084018190526001600160a01b038b166000908152600960205260409020600101556121c2838b6139dc565b60006121f58660c0015187606001516001600160601b03168660c0015187606001516001600160601b0316600754613cdc565b9050828110156122175760405162461bcd60e51b815260040161060790615899565b888111156122375760405162461bcd60e51b815260040161060790615c61565b6122418c83613ecd565b8311156122605760405162461bcd60e51b8152600401610607906158c4565b8a6001600160a01b03168d6001600160a01b0316336001600160a01b03167f908fb5ee8f16c6bc9bc3690973819f32a4d4b10188134543c88706e0e1d433788f86604051611fb3929190615ef6565b60055460ff16156122d25760405162461bcd60e51b815260040161060790615a99565b6005805460ff191660011790556001600160a01b03811660008181526009602052604080822090516370a0823160e01b81529092906370a082319061231b9030906004016156a5565b60206040518083038186803b15801561233357600080fd5b505afa158015612347573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236b9190615600565b825490915060ff16156124e2578154610100900460ff166124bf576001600160a01b0383166000908152600b60205260409020548082106124bd576001600160a01b0384166000818152600b6020526040808220829055855461ff001916610100178655517ff7bb8e57ffdfd9a31e7580ee84f68757f44fb4a8a913f44520d22f2da1c955e59190a2600061240083836139a3565b9050600061240e8284613ecd565b905060006124256004670de0b6b3a7640000610ff7565b8654600160381b600160981b031916600160381b6001600160601b0383169081029190911766ffffffffff00001916620100004264ffffffffff1602178855600a549192506124749190613ea1565b600a5585546040516001600160a01b03891691600080516020615f85833981519152916124b191600160381b90046001600160601b031690615f12565b60405180910390a25050505b505b6001600160a01b038316600090815260096020526040902060010181905561255f565b6006546124fa9084906001600160a01b0316836138b4565b6006546040516360b8257960e11b81526001600160a01b039091169063c1704af29061252c90869085906004016156dd565b600060405180830381600087803b15801561254657600080fd5b505af115801561255a573d6000803e3d6000fd5b505050505b50506005805460ff1916905550565b60055460009060ff16156125945760405162461bcd60e51b815260040161060790615a99565b61259c61508c565b506001600160a01b038216600090815260096020908152604091829020825160e081018452815460ff80821615158084526101008304821615159584019590955264ffffffffff62010000830416958301959095526001600160601b03600160381b820481166060840152600160981b8204166080830152600160f81b900490931660a08401526001015460c08301526126485760405162461bcd60e51b815260040161060790615b20565b80602001511561266a5760405162461bcd60e51b815260040161060790615c3e565b50506001600160a01b03166000908152600b602052604090205490565b60055460009060ff16156126ad5760405162461bcd60e51b815260040161060790615a99565b50600a5490565b60055460009060ff16156126da5760405162461bcd60e51b815260040161060790615a99565b6001600160a01b03821660009081526009602052604090205460ff166127125760405162461bcd60e51b815260040161060790615b20565b506001600160a01b0316600090815260096020526040902054600160381b90046001600160601b031690565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156109af5780601f10610984576101008083540402835291602001916109af565b600554600090819060ff16156127c75760405162461bcd60e51b815260040161060790615a99565b6008546000908190815b8181101561287857600881815481106127e657fe5b60009182526020808320909101546001600160a01b03168083526009909152604090912080549195509060ff61010090910416801561283557508054600160981b90046001600160601b031615155b1561286f576001810154600a548254612867929161286291600160381b90046001600160601b0316613ecd565b613777565b935050612878565b506001016127d1565b50600082116128995760405162461bcd60e51b8152600401610607906157f9565b5090925090509091565b60055461010090046001600160a01b031633146128d25760405162461bcd60e51b8152600401610607906157cd565b600854156128f25760405162461bcd60e51b8152600401610607906159c1565b8660028110156129145760405162461bcd60e51b815260040161060790615e05565b600a8111156129355760405162461bcd60e51b815260040161060790615847565b858114801561294357508381145b61295f5760405162461bcd60e51b815260040161060790615c19565b6000805b82811015612c3b5760008b8b8381811061297957fe5b905060200201602081019061298e91906151f4565b9050600088888481811061299e57fe5b90506020020160208101906129b39190615662565b905060008b8b858181106129c357fe5b9050602002013590506004670de0b6b3a7640000816129de57fe5b04826001600160601b03161015612a075760405162461bcd60e51b815260040161060790615bc7565b68015af1d78b58c400006001600160601b0383161115612a395760405162461bcd60e51b8152600401610607906158ed565b620f4240811015612a5c5760405162461bcd60e51b81526004016106079061596a565b6040518060e001604052806001151581526020016001151581526020014264ffffffffff168152602001836001600160601b03168152602001836001600160601b031681526020018560ff1681526020018281525060096000856001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690831515021790555060408201518160000160026101000a81548164ffffffffff021916908364ffffffffff16021790555060608201518160000160076101000a8154816001600160601b0302191690836001600160601b0316021790555060808201518160000160136101000a8154816001600160601b0302191690836001600160601b0316021790555060a082015181600001601f6101000a81548160ff021916908360ff16021790555060c082015181600101559050506008839080600181540180825580915050600190039060005260206000200160009091909190916101000a8154816001600160a01b0302191690836001600160a01b03160217905550612c2385836001600160601b0316613ea1565b9450612c3083898361420a565b505050600101612963565b50680168d28e3f00280000811115612c655760405162461bcd60e51b815260040161060790615915565b600a8190556006805460ff60a01b1916600160a01b1790556040517f183bed17d33ee5be9a47bb997aee6a152d84a34309cdb66f76301de0a40a138990600090a1612cb868056bc75e2d63100000614235565b612ccb8468056bc75e2d63100000613b84565b5050600680546001600160a01b0319166001600160a01b039290921691909117905550505050505050565b60055461010090046001600160a01b03163314612d255760405162461bcd60e51b8152600401610607906157cd565b6001600160a01b0382166000908152600960205260409020805460ff16612d5e5760405162461bcd60e51b815260040161060790615b20565b8054610100900460ff1615612d855760405162461bcd60e51b815260040161060790615c3e565b6001600160a01b0383166000908152600b602052604090819020839055517e0c7a55677231b335e6dea005fa240ac2aeafbd62f188372a7d66892b722c5290612dd190859085906156dd565b60405180910390a1505050565b6000612deb338484613db8565b50600192915050565b60055460ff1615612e175760405162461bcd60e51b815260040161060790615a99565b6005805460ff191660011790556008548114612e455760405162461bcd60e51b815260040161060790615c19565b6000612e4f610a99565b90506000612e5e856000613777565b90506000612e6c86836139a3565b90506000612e7a8285613ecd565b905080612e995760405162461bcd60e51b8152600401610607906158c4565b612ea33388613b6e565b600554612ebe9061010090046001600160a01b031684613b84565b612ec782613b78565b60005b858110156130aa57600060088281548110612ee157fe5b6000918252602090912001546001600160a01b03169050612f0061508c565b506001600160a01b038116600090815260096020908152604091829020825160e081018452815460ff80821615158352610100820481161580159584019590955264ffffffffff62010000830416958301959095526001600160601b03600160381b820481166060840152600160981b8204166080830152600160f81b900490931660a08401526001015460c083015261306e576000612fa4858360c00151613777565b905080612fc35760405162461bcd60e51b8152600401610607906158c4565b898985818110612fcf57fe5b90506020020135811015612ff55760405162461bcd60e51b815260040161060790615943565b6130038260c00151826139a3565b6001600160a01b0384166000818152600960205260409081902060010192909255905133907fe74c91552b64c2e2e7bd255639e004e693bd3e1d01cc33e65610b86afcc1ffed90613055908590615eed565b60405180910390a36130688333836138b4565b506130a0565b88888481811061307a57fe5b905060200201356000146130a05760405162461bcd60e51b815260040161060790615b47565b5050600101612eca565b50506005805460ff19169055505050505050565b60055460ff16156130e15760405162461bcd60e51b815260040161060790615a99565b60058054600160ff19909116179081905561010090046001600160a01b0316331461311e5760405162461bcd60e51b8152600401610607906157cd565b828514801561312c57508085145b6131485760405162461bcd60e51b815260040161060790615c19565b60085460608167ffffffffffffffff8111801561316457600080fd5b5060405190808252806020026020018201604052801561318e578160200160208202803683370190505b50905060608767ffffffffffffffff811180156131aa57600080fd5b506040519080825280602002602001820160405280156131e457816020015b6131d161508c565b8152602001906001900390816131c95790505b50905060005b8881101561331f57600960008b8b8481811061320257fe5b905060200201602081019061321791906151f4565b6001600160a01b031681526020808201929092526040908101600020815160e081018352815460ff808216151583526101008204811615159583019590955264ffffffffff62010000820416938201939093526001600160601b03600160381b840481166060830152600160981b8404166080820152600160f81b90920490921660a082015260019091015460c082015282518390839081106132b657fe5b60200260200101819052508181815181106132cd57fe5b60200260200101516000015115613317576001838383815181106132ed57fe5b602002602001015160a0015160ff168151811061330657fe5b911515602092830291909101909101525b6001016131ea565b5060005b838110156133755782818151811061333757fe5b602002602001015161336d5761336d6008828154811061335357fe5b60009182526020822001546001600160a01b03169061423e565b600101613323565b5060005b888110156110a95760008a8a8381811061338f57fe5b90506020020160208101906133a491906151f4565b905060008989848181106133b457fe5b90506020020160208101906133c99190615662565b90506703782dace9d900006001600160601b03821610156133ef57506703782dace9d900005b8383815181106133fb57fe5b60200260200101516000015161342d576134288289898681811061341b57fe5b9050602002013583614595565b613437565b613437828261423e565b5050600101613379565b60055460609060ff16156134675760405162461bcd60e51b815260040161060790615a99565b60088054806020026020016040519081016040528092919081815260200182805480156109af57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161349f575050505050905090565b60085490565b60055460009060ff16156134f25760405162461bcd60e51b815260040161060790615a99565b5060075490565b3360009081526001602090815260408083206001600160a01b03861684529091528120546135279083613ea1565b3360008181526001602090815260408083206001600160a01b03891680855292529182902084905590519092600080516020615fa583398151915291610a009190615eed565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60055460009060ff16156135be5760405162461bcd60e51b815260040161060790615a99565b6001600160a01b0382166000908152600960205260409020805460ff166135f75760405162461bcd60e51b815260040161060790615b20565b6001015492915050565b60055461010090046001600160a01b031633146136305760405162461bcd60e51b8152600401610607906157cd565b6040516317066a5760e21b81526001600160a01b03831690635c19a95c9061365c9084906004016156a5565b600060405180830381600087803b15801561367657600080fd5b505af115801561368a573d6000803e3d6000fd5b505050505050565b600654600160a01b900460ff1690565b6136aa61508c565b506001600160a01b038116600090815260096020908152604091829020825160e081018452815460ff80821615158084526101008304821615159584019590955264ffffffffff62010000830416958301959095526001600160601b03600160381b820481166060840152600160981b8204166080830152600160f81b900490931660a08401526001015460c08301526137565760405162461bcd60e51b815260040161060790615b20565b8060200151610ce85760405162461bcd60e51b815260040161060790615b47565b600082820283158061379157508284828161378e57fe5b04145b6137ad5760405162461bcd60e51b815260040161060790615bef565b6706f05b59d3b200008101818110156137d85760405162461bcd60e51b815260040161060790615bef565b6000670de0b6b3a7640000825b049695505050505050565b6000806137fd8786613ecd565b90506000613813670de0b6b3a7640000836139a3565b905060006138218286613777565b905060006138408761383b670de0b6b3a7640000856139a3565b613ecd565b9050600061384e8c836139a3565b9050600061385c828e613ecd565b9050600061386a8288614875565b90506000613878828e613777565b905060006138868e836139a3565b905061389f8161383b670de0b6b3a764000060006139a3565b99505050505050505050509695505050505050565b60006060846001600160a01b031663a9059cbb60e01b85856040516024016138dd9291906156dd565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161391b9190615689565b6000604051808303816000865af19150503d8060008114613958576040519150601f19603f3d011682016040523d82523d6000602084013e61395d565b606091505b509150915081801561398757508051158061398757508080602001905181019061398791906155c8565b610b935760405162461bcd60e51b815260040161060790615d07565b60008060006139b28585614928565b9150915080156139d45760405162461bcd60e51b815260040161060790615d30565b509392505050565b81608001516001600160601b031682606001516001600160601b0316111580613a0757508160200151155b80613a205750610e10826040015164ffffffffff164203105b15613a2a57613b6a565b606082015160808301516000613a536001600160601b0384166064670de0b6b3a7640000611822565b90506000613a73846001600160601b0316846001600160601b03166139a3565b905081811115613a9657613a90846001600160601b0316836139a3565b92508190505b6703782dace9d900006001600160601b03841611613ad057600a5460009350613abf90846139a3565b600a55613acb8561494d565b61368a565b613adc600a54826139a3565b600a556001600160601b038316606087018190526001600160a01b038616600081815260096020526040908190208054600160381b600160981b031916600160381b9094029390931766ffffffffff00001916620100004264ffffffffff1602179092559051600080516020615f8583398151915290613b5d908690615f12565b60405180910390a2505050505b5050565b613b6a8282614c8f565b613b8181614c9a565b50565b613b6a8282614d43565b613b9661508c565b506001600160a01b0381166000908152600960209081526040808320815160e081018352815460ff80821615158084526101008304821615159684019690965264ffffffffff62010000830416948301949094526001600160601b03600160381b820481166060840152600160981b8204166080830152600160f81b900490921660a08301526001015460c08201529190613c435760405162461bcd60e51b815260040161060790615b20565b5060c08101516020820151613cd7576001600160a01b0383166000908152600b602052604081205460c08401819052613c8a90613c8090846139a3565b8460c00151613ecd565b90506000613cae600a6004670de0b6b3a76400005b0481613ca757fe5b0483613777565b9050613cc66004670de0b6b3a76400005b0482613ea1565b6001600160601b0316606085015250505b915091565b600080613ce98787613ecd565b90506000613cf78686613ecd565b90506000613d058383613ecd565b90506000613d27670de0b6b3a764000061383b670de0b6b3a7640000896139a3565b9050613d338282613777565b9a9950505050505050505050565b60035460026000196101006001841615020190911604158015613d645750815115155b8015613d705750805115155b613d8c5760405162461bcd60e51b815260040161060790615a69565b8151613d9f9060039060208501906150c8565b508051613db39060049060208401906150c8565b505050565b6001600160a01b038316600090815260208190526040902054811115613df05760405162461bcd60e51b815260040161060790615993565b6001600160a01b038316600090815260208190526040902054613e1390826139a3565b6001600160a01b038085166000908152602081905260408082209390935590841681522054613e429082613ea1565b6001600160a01b0380841660008181526020819052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90613e94908590615eed565b60405180910390a3505050565b600082820183811015613ec65760405162461bcd60e51b815260040161060790615d5b565b9392505050565b600081613eec5760405162461bcd60e51b815260040161060790615cb2565b670de0b6b3a76400008302831580613f145750670de0b6b3a7640000848281613f1157fe5b04145b613f305760405162461bcd60e51b8152600401610607906159ea565b60028304810181811015613f565760405162461bcd60e51b8152600401610607906159ea565b60008482816137e557fe5b600080613f6e8786613ecd565b90506000613f8985612862670de0b6b3a764000060006139a3565b90506000613f9788836139a3565b90506000613fa5828a613ecd565b90506000613fc482613fbf670de0b6b3a764000088613ecd565b614875565b90506000613fd2828e613777565b90506000613fe08e836139a3565b90506000613fff613ff9670de0b6b3a76400008a6139a3565b8b613777565b905061401782612862670de0b6b3a7640000846139a3565b9f9e505050505050505050505050505050565b81602001516141dd578160c001518110614186576001600160a01b0383166000818152600b6020908152604080832083905560098252808320805461ff001916610100179055600191860191909152517ff7bb8e57ffdfd9a31e7580ee84f68757f44fb4a8a913f44520d22f2da1c955e59190a260006140ae828460c001516139a3565b905060006140c0828560c00151613ecd565b90506140d86703782dace9d9000061100a8184613777565b6001600160601b03908116606086018181526001600160a01b03881660009081526009602052604090208054600160381b600160981b031916600160381b9093029290921766ffffffffff00001916620100004264ffffffffff160217909155600a5490516141479216613ea1565b600a5560608401516040516001600160a01b03871691600080516020615f85833981519152916141779190615f12565b60405180910390a250506141d8565b6000614199613c808460c00151846139a3565b905060006141b2600a6004670de0b6b3a7640000613c9f565b90506141c76004670de0b6b3a7640000613cbf565b6001600160601b0316606085015250505b6141e7565b6141e78284614d4e565b6001600160a01b0390921660009081526009602052604090206001019190915550565b60006060846001600160a01b03166323b872dd60e01b8530866040516024016138dd939291906156b9565b613b8181614ebf565b6001600160a01b0382166000908152600960205260409020805460ff166142775760405162461bcd60e51b815260040161060790615b20565b6703782dace9d900006001600160601b03831610158061429e57506001600160601b038216155b6142ba5760405162461bcd60e51b815260040161060790615bc7565b68015af1d78b58c400006001600160601b03831611156142ec5760405162461bcd60e51b8152600401610607906158ed565b80546bffffffffffffffffffffffff60981b1916600160981b6001600160601b038416021781556040516001600160a01b038416907fc7ea88f3376e27ce6ebc2025310023327f743a8377d438258c36b166dd8b29839061434e908590615f12565b60405180910390a2505050565b6000806143688786613ecd565b90506000614387614381670de0b6b3a7640000846139a3565b85613777565b905060006143a186612862670de0b6b3a7640000856139a3565b905060006143af8b83613ea1565b905060006143bd828d613ecd565b905060006143cb8287614875565b905060006143d9828d613777565b90506143e5818d6139a3565b9e9d5050505050505050505050505050565b6000806144048786613ecd565b905060006144128786613ea1565b905060006144208289613ecd565b90506000614436670de0b6b3a764000085613ecd565b905060006144448383614875565b90506000614452828e613777565b90506000614460828f6139a3565b90506000614479613ff9670de0b6b3a76400008a6139a3565b90506140178261383b670de0b6b3a7640000846139a3565b60008061449e8588613ecd565b905060006144ac87866139a3565b905060006144ba8883613ecd565b905060006144c88285614875565b90506144dc81670de0b6b3a76400006139a3565b90506144f0670de0b6b3a7640000876139a3565b94506145056144ff8c83613777565b86613ecd565b9b9a5050505050505050505050565b6000806145218786613ecd565b90506000614537670de0b6b3a7640000856139a3565b90506145438582613777565b905060006145558a61383b8c85613ea1565b905060006145638285614875565b90506000614579670de0b6b3a7640000836139a3565b90506145858a82613777565b9c9b505050505050505050505050565b6001600160a01b03831660009081526009602052604090205460ff16156145ce5760405162461bcd60e51b815260040161060790615821565b6703782dace9d900006001600160601b03821610156145ff5760405162461bcd60e51b815260040161060790615bc7565b68015af1d78b58c400006001600160601b03821611156146315760405162461bcd60e51b8152600401610607906158ed565b620f42408210156146545760405162461bcd60e51b81526004016106079061596a565b6040518060e00160405280600115158152602001600015158152602001600064ffffffffff16815260200160006001600160601b03168152602001826001600160601b0316815260200160088054905060ff168152602001600081525060096000856001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690831515021790555060408201518160000160026101000a81548164ffffffffff021916908364ffffffffff16021790555060608201518160000160076101000a8154816001600160601b0302191690836001600160601b0316021790555060808201518160000160136101000a8154816001600160601b0302191690836001600160601b0316021790555060a082015181600001601f6101000a81548160ff021916908360ff16021790555060c082015181600101559050506008839080600181540180825580915050600190039060005260206000200160009091909190916101000a8154816001600160a01b0302191690836001600160a01b0316021790555081600b6000856001600160a01b03166001600160a01b0316815260200190815260200160002081905550826001600160a01b03167fb2daf560899f6307b318aecfb57eb2812c488da4a4c1cad2019b482fa63294ed828460405161434e929190615f26565b600060018310156148985760405162461bcd60e51b815260040161060790615cd8565b671bc16d674ec7ffff8311156148c05760405162461bcd60e51b815260040161060790615e2d565b60006148cb83614f2e565b905060006148d984836139a3565b905060006148ef866148ea85614f49565b614f57565b905081614900579250610a0c915050565b600061491187846305f5e100614fae565b905061491d8282613777565b979650505050505050565b60008082841061493e5750508082036000614946565b505081810360015b9250929050565b61495561508c565b506001600160a01b038116600090815260096020908152604091829020825160e081018452815460ff808216151583526101008204811615159483019490945264ffffffffff62010000820416948201949094526001600160601b03600160381b850481166060830152600160981b8504166080820152600160f81b90930490911660a0830181905260019091015460c0830181905260085490919060001901808214614ab35760088181548110614a0957fe5b600091825260209091200154600880546001600160a01b039092169184908110614a2f57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550816009600060088581548110614a6f57fe5b60009182526020808320909101546001600160a01b031683528201929092526040019020805460ff92909216600160f81b026001600160f81b039092169190911790555b6008805480614abe57fe5b60008281526020808220600019908401810180546001600160a01b03191690559092019092556040805160e081018252838152808301848152818301858152606083018681526080840187815260a0850188815260c086018981526001600160a01b038f81168b52600990995296909820945185549451935192519151985160ff199095169015151761ff001916610100931515939093029290921766ffffffffff000019166201000064ffffffffff9092169190910217600160381b600160981b031916600160381b6001600160601b0392831602176bffffffffffffffffffffffff60981b1916600160981b9190961602949094176001600160f81b0316600160f81b60ff909516949094029390931783555160019290920191909155600654614bed91879116856138b4565b6006546040516360b8257960e11b81526001600160a01b039091169063c1704af290614c1f90889087906004016156dd565b600060405180830381600087803b158015614c3957600080fd5b505af1158015614c4d573d6000803e3d6000fd5b505050507f12a8262eb28ee8a8c11e6cf411b3af6ce5bea42abb36e051bf0a65ae602d52ec85604051614c8091906156a5565b60405180910390a15050505050565b613b6a823083613db8565b30600090815260208190526040902054811115614cc95760405162461bcd60e51b815260040161060790615993565b30600090815260208190526040902054614ce390826139a3565b30600090815260208190526040902055600254614d0090826139a3565b60025560405160009030907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90614d38908590615eed565b60405180910390a350565b613b6a308383613db8565b81608001516001600160601b031682606001516001600160601b0316101580614d7957508160200151155b80614d925750610e10826040015164ffffffffff164203105b15614d9c57613b6a565b606082015160808301516000614dc56001600160601b0384166064670de0b6b3a7640000611822565b90506000614de5836001600160601b0316856001600160601b03166139a3565b905081811115614e0857614e02846001600160601b031683613ea1565b92508190505b614e14600a5482613ea1565b600a819055680168d28e3f002800001015614e415760405162461bcd60e51b815260040161060790615915565b6001600160601b038316606087018190526001600160a01b038616600081815260096020526040908190208054600160381b600160981b031916600160381b9094029390931766ffffffffff00001916620100004264ffffffffff1602179092559051600080516020615f8583398151915290613b5d908690615f12565b30600090815260208190526040902054614ed99082613ea1565b30600090815260208190526040902055600254614ef69082613ea1565b60025560405130906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90614d38908590615eed565b6000670de0b6b3a7640000614f4283614f49565b0292915050565b670de0b6b3a7640000900490565b60008060028306614f7057670de0b6b3a7640000614f72565b835b90506002830492505b8215613ec657614f8b8485613777565b93506002830615614fa357614fa08185613777565b90505b600283049250614f7b565b6000828180614fc587670de0b6b3a7640000614928565b9092509050670de0b6b3a764000080600060015b88841061507d576000670de0b6b3a76400008202905060008061500d8a61500885670de0b6b3a76400006139a3565b614928565b9150915061501f87612862848c613777565b965061502b8784613ecd565b96508661503a5750505061507d565b8715615044579315935b801561504e579315935b84156150655761505e86886139a3565b9550615072565b61506f8688613ea1565b95505b505050600101614fd9565b50909998505050505050505050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061510957805160ff1916838001178555615136565b82800160010185558215615136579182015b8281111561513657825182559160200191906001019061511b565b50615142929150615146565b5090565b5b808211156151425760008155600101615147565b80356001600160a01b0381168114610a0c57600080fd5b60008083601f840112615183578182fd5b50813567ffffffffffffffff81111561519a578182fd5b602083019150836020808302850101111561494657600080fd5b60008083601f8401126151c5578182fd5b50813567ffffffffffffffff8111156151dc578182fd5b60208301915083602082850101111561494657600080fd5b600060208284031215615205578081fd5b613ec6838361515b565b60008060408385031215615221578081fd5b61522b848461515b565b915061523a846020850161515b565b90509250929050565b600080600060608486031215615257578081fd5b833561526281615f6f565b9250602084013561527281615f6f565b929592945050506040919091013590565b60008060008060006080868803121561529a578081fd5b6152a4878761515b565b94506152b3876020880161515b565b935060408601359250606086013567ffffffffffffffff8111156152d5578182fd5b6152e1888289016151b4565b969995985093965092949392505050565b600080600080600060608688031215615309578081fd5b853561531481615f6f565b9450602086013567ffffffffffffffff80821115615330578283fd5b61533c89838a016151b4565b90965094506040880135915080821115615354578283fd5b506152e1888289016151b4565b60008060408385031215615373578182fd5b61537d848461515b565b946020939093013593505050565b600080600080600060a086880312156153a2578081fd5b6153ac878761515b565b9450602086013593506153c2876040880161515b565b94979396509394606081013594506080013592915050565b6000806000606084860312156153ee578283fd5b6153f8858561515b565b95602085013595506040909401359392505050565b60008060008060008060008060a0898b031215615428578283fd5b883567ffffffffffffffff8082111561543f578485fd5b61544b8c838d01615172565b909a50985060208b0135915080821115615463578485fd5b61546f8c838d01615172565b909850965060408b0135915080821115615487578485fd5b506154948b828c01615172565b90955093505060608901356154a881615f6f565b915060808901356154b881615f6f565b809150509295985092959890939650565b600080600080604085870312156154de578182fd5b843567ffffffffffffffff808211156154f5578384fd5b61550188838901615172565b90965094506020870135915080821115615519578384fd5b5061552687828801615172565b95989497509550505050565b6000806000806000806060878903121561554a578384fd5b863567ffffffffffffffff80821115615561578586fd5b61556d8a838b01615172565b90985096506020890135915080821115615585578586fd5b6155918a838b01615172565b909650945060408901359150808211156155a9578384fd5b506155b689828a01615172565b979a9699509497509295939492505050565b6000602082840312156155d9578081fd5b81518015158114613ec6578182fd5b6000602082840312156155f9578081fd5b5035919050565b600060208284031215615611578081fd5b5051919050565b60008060006040848603121561562c578081fd5b83359250602084013567ffffffffffffffff811115615649578182fd5b61565586828701615172565b9497909650939450505050565b600060208284031215615673578081fd5b81356001600160601b0381168114613ec6578182fd5b6000825161569b818460208701615f3f565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b600060018060a01b038716825285602083015284604083015260806060830152826080830152828460a084013781830160a090810191909152601f909201601f19160101949350505050565b6020808252825182820181905260009190848201906040850190845b818110156157835783516001600160a01b03168352928401929184019160010161575e565b50909695505050505050565b901515815260200190565b60006020825282518060208401526157b9816040850160208701615f3f565b601f01601f19169190910160400192915050565b60208082526012908201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604082015260600190565b6020808252600e908201526d4552525f4e4f4e455f524541445960901b604082015260600190565b6020808252600c908201526b11549497d254d7d093d5539160a21b604082015260600190565b6020808252600e908201526d4552525f4d41585f544f4b454e5360901b604082015260600190565b60208082526010908201526f4552525f4d41585f494e5f524154494f60801b604082015260600190565b60208082526011908201527022a9292fa6a0aa242fa0a8282927ac2f9960791b604082015260600190565b6020808252600f908201526e08aa4a4be9a82a890be82a0a0a49eb608b1b604082015260600190565b6020808252600e908201526d11549497d3505617d5d15251d21560921b604082015260600190565b60208082526014908201527311549497d3505617d513d5105317d5d15251d21560621b604082015260600190565b6020808252600d908201526c11549497d31253525517d3d555609a1b604082015260600190565b6020808252600f908201526e4552525f4d494e5f42414c414e434560881b604082015260600190565b60208082526014908201527311549497d25394d551919250d251539517d0905360621b604082015260600190565b6020808252600f908201526e11549497d253925512505312569151608a1b604082015260600190565b60208082526010908201526f11549497d1125597d25395115493905360821b604082015260600190565b60208082526015908201527422a9292fa12a27a5a2a72fa120a22fa1a0a62622a960591b604082015260600190565b6020808252600c908201526b22a9292fa624a6a4aa2fa4a760a11b604082015260600190565b60208082526016908201527511549497d09513d2d15397d25392551250531256915160521b604082015260600190565b6020808252600b908201526a4552525f5245454e54525960a81b604082015260600190565b60208082526018908201527f4552525f494e53554646494349454e545f5041594d454e540000000000000000604082015260600190565b6020808252601190820152704552525f4d41585f4f55545f524154494f60781b604082015260600190565b6020808252600d908201526c11549497d393d517d093d55391609a1b604082015260600190565b6020808252601190820152704552525f4f55545f4e4f545f524541445960781b604082015260600190565b6020808252600e908201526d4552525f4e4f545f5055424c494360901b604082015260600190565b6020808252601390820152724552525f4241445f4c494d49545f505249434560681b604082015260600190565b6020808252600e908201526d11549497d3525397d5d15251d21560921b604082015260600190565b60208082526010908201526f4552525f4d554c5f4f564552464c4f5760801b604082015260600190565b6020808252600b908201526a22a9292fa0a9292fa622a760a91b604082015260600190565b6020808252600990820152684552525f524541445960b81b604082015260600190565b6020808252600f908201526e4552525f4c494d49545f505249434560881b604082015260600190565b6020808252600e908201526d11549497d0d3d3919251d554915160921b604082015260600190565b6020808252600c908201526b4552525f4449565f5a45524f60a01b604082015260600190565b6020808252601590820152744552525f42504f575f424153455f544f4f5f4c4f5760581b604082015260600190565b6020808252600f908201526e4552525f45524332305f46414c534560881b604082015260600190565b6020808252601190820152704552525f5355425f554e444552464c4f5760781b604082015260600190565b60208082526010908201526f4552525f4144445f4f564552464c4f5760801b604082015260600190565b60208082526010908201526f4552525f4e554c4c5f4144445245535360801b604082015260600190565b6020808252601390820152724552525f4d41585f504f4f4c5f544f4b454e5360681b604082015260600190565b6020808252600f908201526e4552525f494e56414c49445f46454560881b604082015260600190565b6020808252600e908201526d4552525f4d494e5f544f4b454e5360901b604082015260600190565b60208082526016908201527508aa4a4be84a09eaebe8482a68abea89e9ebe90928e960531b604082015260600190565b6020808252600b908201526a22a9292fad22a927afa4a760a91b604082015260600190565b600060e08201905082511515825260208301511515602083015264ffffffffff604084015116604083015260608301516001600160601b038082166060850152806080860151166080850152505060ff60a08401511660a083015260c083015160c083015292915050565b90815260200190565b918252602082015260400190565b60ff91909116815260200190565b6001600160601b0391909116815260200190565b6001600160601b03929092168252602082015260400190565b60005b83811015615f5a578181015183820152602001615f42565b83811115615f69576000848401525b50505050565b6001600160a01b0381168114613b8157600080fdfe21b12aed5d425f5675450ffeeae01039085e5323974c3099e1828155d9b51e778c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a264697066735822122086dfc7f00db3307780c9ea65c3c17ec36e609e7603a619408e81e237acf577bb64736f6c634300060c0033",
      "r": "0x8f2a47f88a36f88b1da57e0c0bded1cf2864be67b5361bb03f8089f0ee405495",
      "s": "0x3664190cbd8dd96d51e70843cc56aa3b0d10d980159affe04110f10af5f29fc2",
      "v": 43,
      "chainId": 4
    }
  }
}